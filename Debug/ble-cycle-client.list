
ble-cycle-client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109f4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001690  08010b38  08010b38  00011b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080121c8  080121c8  000131c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080121d0  080121d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080121d4  080121d4  000131d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  20000008  080121d8  00014008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000069  200001e4  080123b4  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000250  0801241d  00014250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cdc  20000264  0801242e  00014264  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f40  0801242e  00014f40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00016000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00016000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0801242e  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00042204  00000000  00000000  00015a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008175  00000000  00000000  00057c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003c58  00000000  00000000  0005fe10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002ee4  00000000  00000000  00063a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00033f9b  00000000  00000000  0006694c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000486c2  00000000  00000000  0009a8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00122ab5  00000000  00000000  000e2fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00205a5e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00011378  00000000  00000000  00205aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006b  00000000  00000000  00216e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000264 	.word	0x20000264
 800015c:	00000000 	.word	0x00000000
 8000160:	08010b1c 	.word	0x08010b1c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000268 	.word	0x20000268
 800017c:	08010b1c 	.word	0x08010b1c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b96a 	b.w	8000f04 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	460c      	mov	r4, r1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d14e      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c54:	4694      	mov	ip, r2
 8000c56:	458c      	cmp	ip, r1
 8000c58:	4686      	mov	lr, r0
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	d962      	bls.n	8000d26 <__udivmoddi4+0xde>
 8000c60:	b14a      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c62:	f1c2 0320 	rsb	r3, r2, #32
 8000c66:	4091      	lsls	r1, r2
 8000c68:	fa20 f303 	lsr.w	r3, r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	4319      	orrs	r1, r3
 8000c72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f f68c 	uxth.w	r6, ip
 8000c7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c86:	fb07 1114 	mls	r1, r7, r4, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb04 f106 	mul.w	r1, r4, r6
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c9e:	f080 8112 	bcs.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 810f 	bls.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca8:	3c02      	subs	r4, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	fa1f f38e 	uxth.w	r3, lr
 8000cb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f606 	mul.w	r6, r0, r6
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x94>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cce:	f080 80fc 	bcs.w	8000eca <__udivmoddi4+0x282>
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	f240 80f9 	bls.w	8000eca <__udivmoddi4+0x282>
 8000cd8:	4463      	add	r3, ip
 8000cda:	3802      	subs	r0, #2
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11d      	cbz	r5, 8000cee <__udivmoddi4+0xa6>
 8000ce6:	40d3      	lsrs	r3, r2
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e9c5 3200 	strd	r3, r2, [r5]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d905      	bls.n	8000d02 <__udivmoddi4+0xba>
 8000cf6:	b10d      	cbz	r5, 8000cfc <__udivmoddi4+0xb4>
 8000cf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e7f5      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d02:	fab3 f183 	clz	r1, r3
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d146      	bne.n	8000d98 <__udivmoddi4+0x150>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xcc>
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	f0c0 80f0 	bcc.w	8000ef4 <__udivmoddi4+0x2ac>
 8000d14:	1a86      	subs	r6, r0, r2
 8000d16:	eb64 0303 	sbc.w	r3, r4, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d0e6      	beq.n	8000cee <__udivmoddi4+0xa6>
 8000d20:	e9c5 6300 	strd	r6, r3, [r5]
 8000d24:	e7e3      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	f040 8090 	bne.w	8000e4c <__udivmoddi4+0x204>
 8000d2c:	eba1 040c 	sub.w	r4, r1, ip
 8000d30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d42:	fb08 4416 	mls	r4, r8, r6, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb07 f006 	mul.w	r0, r7, r6
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x11c>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x11a>
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	f200 80cd 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d62:	4626      	mov	r6, r4
 8000d64:	1a1c      	subs	r4, r3, r0
 8000d66:	fa1f f38e 	uxth.w	r3, lr
 8000d6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d76:	fb00 f707 	mul.w	r7, r0, r7
 8000d7a:	429f      	cmp	r7, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x148>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x146>
 8000d88:	429f      	cmp	r7, r3
 8000d8a:	f200 80b0 	bhi.w	8000eee <__udivmoddi4+0x2a6>
 8000d8e:	4620      	mov	r0, r4
 8000d90:	1bdb      	subs	r3, r3, r7
 8000d92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d96:	e7a5      	b.n	8000ce4 <__udivmoddi4+0x9c>
 8000d98:	f1c1 0620 	rsb	r6, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000da2:	431f      	orrs	r7, r3
 8000da4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dac:	ea43 030c 	orr.w	r3, r3, ip
 8000db0:	40f4      	lsrs	r4, r6
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	0c38      	lsrs	r0, r7, #16
 8000db8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc0:	fa1f fc87 	uxth.w	ip, r7
 8000dc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd0:	45a1      	cmp	r9, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d90a      	bls.n	8000dee <__udivmoddi4+0x1a6>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dde:	f080 8084 	bcs.w	8000eea <__udivmoddi4+0x2a2>
 8000de2:	45a1      	cmp	r9, r4
 8000de4:	f240 8081 	bls.w	8000eea <__udivmoddi4+0x2a2>
 8000de8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	eba4 0409 	sub.w	r4, r4, r9
 8000df2:	fa1f f983 	uxth.w	r9, r3
 8000df6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dfa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dfe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x1d2>
 8000e0a:	193c      	adds	r4, r7, r4
 8000e0c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e10:	d267      	bcs.n	8000ee2 <__udivmoddi4+0x29a>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d965      	bls.n	8000ee2 <__udivmoddi4+0x29a>
 8000e16:	3b02      	subs	r3, #2
 8000e18:	443c      	add	r4, r7
 8000e1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e1e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e22:	eba4 040c 	sub.w	r4, r4, ip
 8000e26:	429c      	cmp	r4, r3
 8000e28:	46ce      	mov	lr, r9
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	d351      	bcc.n	8000ed2 <__udivmoddi4+0x28a>
 8000e2e:	d04e      	beq.n	8000ece <__udivmoddi4+0x286>
 8000e30:	b155      	cbz	r5, 8000e48 <__udivmoddi4+0x200>
 8000e32:	ebb8 030e 	subs.w	r3, r8, lr
 8000e36:	eb64 040c 	sbc.w	r4, r4, ip
 8000e3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3e:	40cb      	lsrs	r3, r1
 8000e40:	431e      	orrs	r6, r3
 8000e42:	40cc      	lsrs	r4, r1
 8000e44:	e9c5 6400 	strd	r6, r4, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e750      	b.n	8000cee <__udivmoddi4+0xa6>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f103 	lsr.w	r1, r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa24 f303 	lsr.w	r3, r4, r3
 8000e5c:	4094      	lsls	r4, r2
 8000e5e:	430c      	orrs	r4, r1
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e68:	fa1f f78c 	uxth.w	r7, ip
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3110 	mls	r1, r8, r0, r3
 8000e74:	0c23      	lsrs	r3, r4, #16
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f107 	mul.w	r1, r0, r7
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x24c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e8a:	d22c      	bcs.n	8000ee6 <__udivmoddi4+0x29e>
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d92a      	bls.n	8000ee6 <__udivmoddi4+0x29e>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e9c:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb01 f307 	mul.w	r3, r1, r7
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x276>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000eb4:	d213      	bcs.n	8000ede <__udivmoddi4+0x296>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d911      	bls.n	8000ede <__udivmoddi4+0x296>
 8000eba:	3902      	subs	r1, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	1ae4      	subs	r4, r4, r3
 8000ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec4:	e739      	b.n	8000d3a <__udivmoddi4+0xf2>
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	e6f0      	b.n	8000cac <__udivmoddi4+0x64>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e706      	b.n	8000cdc <__udivmoddi4+0x94>
 8000ece:	45c8      	cmp	r8, r9
 8000ed0:	d2ae      	bcs.n	8000e30 <__udivmoddi4+0x1e8>
 8000ed2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ed6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7a8      	b.n	8000e30 <__udivmoddi4+0x1e8>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	e7ed      	b.n	8000ebe <__udivmoddi4+0x276>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	e799      	b.n	8000e1a <__udivmoddi4+0x1d2>
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e7d4      	b.n	8000e94 <__udivmoddi4+0x24c>
 8000eea:	46d6      	mov	lr, sl
 8000eec:	e77f      	b.n	8000dee <__udivmoddi4+0x1a6>
 8000eee:	4463      	add	r3, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e74d      	b.n	8000d90 <__udivmoddi4+0x148>
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e70f      	b.n	8000d1c <__udivmoddi4+0xd4>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	e730      	b.n	8000d64 <__udivmoddi4+0x11c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <APPD_EnableCPU2+0x34>)
 8000f10:	1d3c      	adds	r4, r7, #4
 8000f12:	461d      	mov	r5, r3
 8000f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f1c:	c403      	stmia	r4!, {r0, r1}
 8000f1e:	8022      	strh	r2, [r4, #0]
 8000f20:	3402      	adds	r4, #2
 8000f22:	0c13      	lsrs	r3, r2, #16
 8000f24:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f26:	f00a fd3b 	bl	800b9a0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f009 ffcc 	bl	800aeca <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f32:	bf00      	nop
}
 8000f34:	3720      	adds	r7, #32
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bdb0      	pop	{r4, r5, r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	08010b38 	.word	0x08010b38

08000f40 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000f4e:	897a      	ldrh	r2, [r7, #10]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68f9      	ldr	r1, [r7, #12]
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 fc81 	bl	800185c <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000f5a:	bf00      	nop
}
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000f6c:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <LL_C2_PWR_SetPowerMode+0x28>)
 8000f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f72:	f023 0207 	bic.w	r2, r3, #7
 8000f76:	4905      	ldr	r1, [pc, #20]	@ (8000f8c <LL_C2_PWR_SetPowerMode+0x28>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	58000400 	.word	0x58000400

08000f90 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000f9a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000f9e:	4905      	ldr	r1, [pc, #20]	@ (8000fb4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	58000800 	.word	0x58000800

08000fb8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000fc6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000fca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000fd2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	cafecafe 	.word	0xcafecafe

08000ff4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001006:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4313      	orrs	r3, r2
 800100e:	608b      	str	r3, [r1, #8]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <LL_DBGMCU_GetDeviceID+0x18>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e0042000 	.word	0xe0042000

08001038 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800103c:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <LL_DBGMCU_GetRevisionID+0x18>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	0c1b      	lsrs	r3, r3, #16
 8001042:	b29b      	uxth	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e0042000 	.word	0xe0042000

08001054 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	22ff      	movs	r2, #255	@ 0xff
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	22ca      	movs	r2, #202	@ 0xca
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2253      	movs	r2, #83	@ 0x53
 8001080:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f023 0207 	bic.w	r2, r3, #7
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	431a      	orrs	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	609a      	str	r2, [r3, #8]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80010b8:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <MX_APPE_Config+0x18>)
 80010ba:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010be:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80010c0:	f000 f824 	bl	800110c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80010c4:	f000 f829 	bl	800111a <Config_HSE>

  return;
 80010c8:	bf00      	nop
}
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	58004000 	.word	0x58004000

080010d0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80010d4:	f000 f835 	bl	8001142 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80010d8:	f000 f84e 	bl	8001178 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80010dc:	4903      	ldr	r1, [pc, #12]	@ (80010ec <MX_APPE_Init+0x1c>)
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 fae2 	bl	80016a8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80010e4:	f000 f856 	bl	8001194 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80010e8:	bf00      	nop
}
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200005a0 	.word	0x200005a0

080010f0 <Init_Smps>:

void Init_Smps(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80010f4:	bf00      	nop
}
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <Init_Exti>:

void Init_Exti(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001102:	2050      	movs	r0, #80	@ 0x50
 8001104:	f7ff ff44 	bl	8000f90 <LL_EXTI_EnableIT_32_63>

  return;
 8001108:	bf00      	nop
}
 800110a:	bd80      	pop	{r7, pc}

0800110c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001110:	bf00      	nop
}
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001120:	2000      	movs	r0, #0
 8001122:	f00a fd61 	bl	800bbe8 <OTP_Read>
 8001126:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d005      	beq.n	800113a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	799b      	ldrb	r3, [r3, #6]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff40 	bl	8000fb8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001138:	bf00      	nop
 800113a:	bf00      	nop
}
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <System_Init>:

static void System_Init(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
  Init_Smps();
 8001146:	f7ff ffd3 	bl	80010f0 <Init_Smps>

  Init_Exti();
 800114a:	f7ff ffd8 	bl	80010fe <Init_Exti>

  Init_Rtc();
 800114e:	f000 f803 	bl	8001158 <Init_Rtc>

  return;
 8001152:	bf00      	nop
}
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800115c:	4805      	ldr	r0, [pc, #20]	@ (8001174 <Init_Rtc+0x1c>)
 800115e:	f7ff ff86 	bl	800106e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001162:	2100      	movs	r1, #0
 8001164:	4803      	ldr	r0, [pc, #12]	@ (8001174 <Init_Rtc+0x1c>)
 8001166:	f7ff ff92 	bl	800108e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800116a:	4802      	ldr	r0, [pc, #8]	@ (8001174 <Init_Rtc+0x1c>)
 800116c:	f7ff ff72 	bl	8001054 <LL_RTC_EnableWriteProtection>

  return;
 8001170:	bf00      	nop
}
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40002800 	.word	0x40002800

08001178 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800117c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001180:	f7ff ff38 	bl	8000ff4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001184:	f00c fd4a 	bl	800dc1c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001188:	2004      	movs	r0, #4
 800118a:	f7ff feeb 	bl	8000f64 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800118e:	bf00      	nop
}
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800119a:	f00a fa4b 	bl	800b634 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800119e:	4a11      	ldr	r2, [pc, #68]	@ (80011e4 <appe_Tl_Init+0x50>)
 80011a0:	2100      	movs	r1, #0
 80011a2:	2020      	movs	r0, #32
 80011a4:	f00c fe78 	bl	800de98 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <appe_Tl_Init+0x54>)
 80011aa:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <appe_Tl_Init+0x58>)
 80011ae:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80011b0:	463b      	mov	r3, r7
 80011b2:	4619      	mov	r1, r3
 80011b4:	480e      	ldr	r0, [pc, #56]	@ (80011f0 <appe_Tl_Init+0x5c>)
 80011b6:	f00a f8ff 	bl	800b3b8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <appe_Tl_Init+0x60>)
 80011bc:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <appe_Tl_Init+0x64>)
 80011c0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <appe_Tl_Init+0x68>)
 80011c4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80011c6:	f240 533c 	movw	r3, #1340	@ 0x53c
 80011ca:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4618      	mov	r0, r3
 80011d2:	f00a fb71 	bl	800b8b8 <TL_MM_Init>

  TL_Enable();
 80011d6:	f00a fa27 	bl	800b628 <TL_Enable>

  return;
 80011da:	bf00      	nop
}
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	0800b3f1 	.word	0x0800b3f1
 80011e8:	20030734 	.word	0x20030734
 80011ec:	08001201 	.word	0x08001201
 80011f0:	08001219 	.word	0x08001219
 80011f4:	2003094c 	.word	0x2003094c
 80011f8:	20030840 	.word	0x20030840
 80011fc:	200301f8 	.word	0x200301f8

08001200 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800120a:	bf00      	nop
}
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	330b      	adds	r3, #11
 8001226:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001232:	2b07      	cmp	r3, #7
 8001234:	f200 80d0 	bhi.w	80013d8 <APPE_SysUserEvtRx+0x1c0>
 8001238:	a201      	add	r2, pc, #4	@ (adr r2, 8001240 <APPE_SysUserEvtRx+0x28>)
 800123a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123e:	bf00      	nop
 8001240:	08001261 	.word	0x08001261
 8001244:	080012f3 	.word	0x080012f3
 8001248:	08001315 	.word	0x08001315
 800124c:	080013d9 	.word	0x080013d9
 8001250:	08001359 	.word	0x08001359
 8001254:	0800137d 	.word	0x0800137d
 8001258:	08001399 	.word	0x08001399
 800125c:	080013bd 	.word	0x080013bd
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	4618      	mov	r0, r3
 8001266:	f009 fe5d 	bl	800af24 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800126a:	485e      	ldr	r0, [pc, #376]	@ (80013e4 <APPE_SysUserEvtRx+0x1cc>)
 800126c:	f00a fc24 	bl	800bab8 <DbgTraceGetFileName>
 8001270:	4601      	mov	r1, r0
 8001272:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 8001276:	4a5c      	ldr	r2, [pc, #368]	@ (80013e8 <APPE_SysUserEvtRx+0x1d0>)
 8001278:	485c      	ldr	r0, [pc, #368]	@ (80013ec <APPE_SysUserEvtRx+0x1d4>)
 800127a:	f00d fc45 	bl	800eb08 <iprintf>
 800127e:	7b3b      	ldrb	r3, [r7, #12]
 8001280:	4619      	mov	r1, r3
 8001282:	7b7b      	ldrb	r3, [r7, #13]
 8001284:	461a      	mov	r2, r3
 8001286:	7bbb      	ldrb	r3, [r7, #14]
 8001288:	4859      	ldr	r0, [pc, #356]	@ (80013f0 <APPE_SysUserEvtRx+0x1d8>)
 800128a:	f00d fc3d 	bl	800eb08 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800128e:	4855      	ldr	r0, [pc, #340]	@ (80013e4 <APPE_SysUserEvtRx+0x1cc>)
 8001290:	f00a fc12 	bl	800bab8 <DbgTraceGetFileName>
 8001294:	4601      	mov	r1, r0
 8001296:	f240 136b 	movw	r3, #363	@ 0x16b
 800129a:	4a53      	ldr	r2, [pc, #332]	@ (80013e8 <APPE_SysUserEvtRx+0x1d0>)
 800129c:	4853      	ldr	r0, [pc, #332]	@ (80013ec <APPE_SysUserEvtRx+0x1d4>)
 800129e:	f00d fc33 	bl	800eb08 <iprintf>
 80012a2:	7c3b      	ldrb	r3, [r7, #16]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4853      	ldr	r0, [pc, #332]	@ (80013f4 <APPE_SysUserEvtRx+0x1dc>)
 80012a8:	f00d fc2e 	bl	800eb08 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80012ac:	484d      	ldr	r0, [pc, #308]	@ (80013e4 <APPE_SysUserEvtRx+0x1cc>)
 80012ae:	f00a fc03 	bl	800bab8 <DbgTraceGetFileName>
 80012b2:	4601      	mov	r1, r0
 80012b4:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 80012b8:	4a4b      	ldr	r2, [pc, #300]	@ (80013e8 <APPE_SysUserEvtRx+0x1d0>)
 80012ba:	484c      	ldr	r0, [pc, #304]	@ (80013ec <APPE_SysUserEvtRx+0x1d4>)
 80012bc:	f00d fc24 	bl	800eb08 <iprintf>
 80012c0:	7dbb      	ldrb	r3, [r7, #22]
 80012c2:	4619      	mov	r1, r3
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	461a      	mov	r2, r3
 80012c8:	7e3b      	ldrb	r3, [r7, #24]
 80012ca:	484b      	ldr	r0, [pc, #300]	@ (80013f8 <APPE_SysUserEvtRx+0x1e0>)
 80012cc:	f00d fc1c 	bl	800eb08 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80012d0:	4844      	ldr	r0, [pc, #272]	@ (80013e4 <APPE_SysUserEvtRx+0x1cc>)
 80012d2:	f00a fbf1 	bl	800bab8 <DbgTraceGetFileName>
 80012d6:	4601      	mov	r1, r0
 80012d8:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80012dc:	4a42      	ldr	r2, [pc, #264]	@ (80013e8 <APPE_SysUserEvtRx+0x1d0>)
 80012de:	4843      	ldr	r0, [pc, #268]	@ (80013ec <APPE_SysUserEvtRx+0x1d4>)
 80012e0:	f00d fc12 	bl	800eb08 <iprintf>
 80012e4:	4845      	ldr	r0, [pc, #276]	@ (80013fc <APPE_SysUserEvtRx+0x1e4>)
 80012e6:	f00d fc0f 	bl	800eb08 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f8e0 	bl	80014b0 <APPE_SysEvtReadyProcessing>
    break;
 80012f0:	e073      	b.n	80013da <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80012f2:	483c      	ldr	r0, [pc, #240]	@ (80013e4 <APPE_SysUserEvtRx+0x1cc>)
 80012f4:	f00a fbe0 	bl	800bab8 <DbgTraceGetFileName>
 80012f8:	4601      	mov	r1, r0
 80012fa:	f240 1373 	movw	r3, #371	@ 0x173
 80012fe:	4a3a      	ldr	r2, [pc, #232]	@ (80013e8 <APPE_SysUserEvtRx+0x1d0>)
 8001300:	483a      	ldr	r0, [pc, #232]	@ (80013ec <APPE_SysUserEvtRx+0x1d4>)
 8001302:	f00d fc01 	bl	800eb08 <iprintf>
 8001306:	483e      	ldr	r0, [pc, #248]	@ (8001400 <APPE_SysUserEvtRx+0x1e8>)
 8001308:	f00d fbfe 	bl	800eb08 <iprintf>
    APPE_SysEvtError(pPayload);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f885 	bl	800141c <APPE_SysEvtError>
    break;
 8001312:	e062      	b.n	80013da <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001314:	4833      	ldr	r0, [pc, #204]	@ (80013e4 <APPE_SysUserEvtRx+0x1cc>)
 8001316:	f00a fbcf 	bl	800bab8 <DbgTraceGetFileName>
 800131a:	4601      	mov	r1, r0
 800131c:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8001320:	4a31      	ldr	r2, [pc, #196]	@ (80013e8 <APPE_SysUserEvtRx+0x1d0>)
 8001322:	4832      	ldr	r0, [pc, #200]	@ (80013ec <APPE_SysUserEvtRx+0x1d4>)
 8001324:	f00d fbf0 	bl	800eb08 <iprintf>
 8001328:	4836      	ldr	r0, [pc, #216]	@ (8001404 <APPE_SysUserEvtRx+0x1ec>)
 800132a:	f00d fc55 	bl	800ebd8 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800132e:	482d      	ldr	r0, [pc, #180]	@ (80013e4 <APPE_SysUserEvtRx+0x1cc>)
 8001330:	f00a fbc2 	bl	800bab8 <DbgTraceGetFileName>
 8001334:	4601      	mov	r1, r0
 8001336:	f240 1379 	movw	r3, #377	@ 0x179
 800133a:	4a2b      	ldr	r2, [pc, #172]	@ (80013e8 <APPE_SysUserEvtRx+0x1d0>)
 800133c:	482b      	ldr	r0, [pc, #172]	@ (80013ec <APPE_SysUserEvtRx+0x1d4>)
 800133e:	f00d fbe3 	bl	800eb08 <iprintf>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3302      	adds	r3, #2
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	3302      	adds	r3, #2
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	461a      	mov	r2, r3
 8001350:	482d      	ldr	r0, [pc, #180]	@ (8001408 <APPE_SysUserEvtRx+0x1f0>)
 8001352:	f00d fbd9 	bl	800eb08 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8001356:	e040      	b.n	80013da <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001358:	4822      	ldr	r0, [pc, #136]	@ (80013e4 <APPE_SysUserEvtRx+0x1cc>)
 800135a:	f00a fbad 	bl	800bab8 <DbgTraceGetFileName>
 800135e:	4601      	mov	r1, r0
 8001360:	f240 137f 	movw	r3, #383	@ 0x17f
 8001364:	4a20      	ldr	r2, [pc, #128]	@ (80013e8 <APPE_SysUserEvtRx+0x1d0>)
 8001366:	4821      	ldr	r0, [pc, #132]	@ (80013ec <APPE_SysUserEvtRx+0x1d4>)
 8001368:	f00d fbce 	bl	800eb08 <iprintf>
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	3302      	adds	r3, #2
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4619      	mov	r1, r3
 8001374:	4825      	ldr	r0, [pc, #148]	@ (800140c <APPE_SysUserEvtRx+0x1f4>)
 8001376:	f00d fbc7 	bl	800eb08 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 800137a:	e02e      	b.n	80013da <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 800137c:	4819      	ldr	r0, [pc, #100]	@ (80013e4 <APPE_SysUserEvtRx+0x1cc>)
 800137e:	f00a fb9b 	bl	800bab8 <DbgTraceGetFileName>
 8001382:	4601      	mov	r1, r0
 8001384:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8001388:	4a17      	ldr	r2, [pc, #92]	@ (80013e8 <APPE_SysUserEvtRx+0x1d0>)
 800138a:	4818      	ldr	r0, [pc, #96]	@ (80013ec <APPE_SysUserEvtRx+0x1d4>)
 800138c:	f00d fbbc 	bl	800eb08 <iprintf>
 8001390:	481f      	ldr	r0, [pc, #124]	@ (8001410 <APPE_SysUserEvtRx+0x1f8>)
 8001392:	f00d fbb9 	bl	800eb08 <iprintf>
    break;
 8001396:	e020      	b.n	80013da <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001398:	4812      	ldr	r0, [pc, #72]	@ (80013e4 <APPE_SysUserEvtRx+0x1cc>)
 800139a:	f00a fb8d 	bl	800bab8 <DbgTraceGetFileName>
 800139e:	4601      	mov	r1, r0
 80013a0:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 80013a4:	4a10      	ldr	r2, [pc, #64]	@ (80013e8 <APPE_SysUserEvtRx+0x1d0>)
 80013a6:	4811      	ldr	r0, [pc, #68]	@ (80013ec <APPE_SysUserEvtRx+0x1d4>)
 80013a8:	f00d fbae 	bl	800eb08 <iprintf>
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	3302      	adds	r3, #2
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4619      	mov	r1, r3
 80013b4:	4817      	ldr	r0, [pc, #92]	@ (8001414 <APPE_SysUserEvtRx+0x1fc>)
 80013b6:	f00d fba7 	bl	800eb08 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80013ba:	e00e      	b.n	80013da <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80013bc:	4809      	ldr	r0, [pc, #36]	@ (80013e4 <APPE_SysUserEvtRx+0x1cc>)
 80013be:	f00a fb7b 	bl	800bab8 <DbgTraceGetFileName>
 80013c2:	4601      	mov	r1, r0
 80013c4:	f240 138d 	movw	r3, #397	@ 0x18d
 80013c8:	4a07      	ldr	r2, [pc, #28]	@ (80013e8 <APPE_SysUserEvtRx+0x1d0>)
 80013ca:	4808      	ldr	r0, [pc, #32]	@ (80013ec <APPE_SysUserEvtRx+0x1d4>)
 80013cc:	f00d fb9c 	bl	800eb08 <iprintf>
 80013d0:	4811      	ldr	r0, [pc, #68]	@ (8001418 <APPE_SysUserEvtRx+0x200>)
 80013d2:	f00d fb99 	bl	800eb08 <iprintf>
    break;
 80013d6:	e000      	b.n	80013da <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80013d8:	bf00      	nop
  }

  return;
 80013da:	bf00      	nop
}
 80013dc:	3720      	adds	r7, #32
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	08010b54 	.word	0x08010b54
 80013e8:	08011c94 	.word	0x08011c94
 80013ec:	08010b6c 	.word	0x08010b6c
 80013f0:	08010b80 	.word	0x08010b80
 80013f4:	08010ba4 	.word	0x08010ba4
 80013f8:	08010bc0 	.word	0x08010bc0
 80013fc:	08010bd8 	.word	0x08010bd8
 8001400:	08010bf8 	.word	0x08010bf8
 8001404:	08010c1c 	.word	0x08010c1c
 8001408:	08010c6c 	.word	0x08010c6c
 800140c:	08010c94 	.word	0x08010c94
 8001410:	08010cd0 	.word	0x08010cd0
 8001414:	08010cf4 	.word	0x08010cf4
 8001418:	08010d30 	.word	0x08010d30

0800141c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	330b      	adds	r3, #11
 800142a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3302      	adds	r3, #2
 8001430:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001432:	4819      	ldr	r0, [pc, #100]	@ (8001498 <APPE_SysEvtError+0x7c>)
 8001434:	f00a fb40 	bl	800bab8 <DbgTraceGetFileName>
 8001438:	4601      	mov	r1, r0
 800143a:	f240 13a5 	movw	r3, #421	@ 0x1a5
 800143e:	4a17      	ldr	r2, [pc, #92]	@ (800149c <APPE_SysEvtError+0x80>)
 8001440:	4817      	ldr	r0, [pc, #92]	@ (80014a0 <APPE_SysEvtError+0x84>)
 8001442:	f00d fb61 	bl	800eb08 <iprintf>
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	4619      	mov	r1, r3
 800144c:	4815      	ldr	r0, [pc, #84]	@ (80014a4 <APPE_SysEvtError+0x88>)
 800144e:	f00d fb5b 	bl	800eb08 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10d      	bne.n	8001476 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800145a:	480f      	ldr	r0, [pc, #60]	@ (8001498 <APPE_SysEvtError+0x7c>)
 800145c:	f00a fb2c 	bl	800bab8 <DbgTraceGetFileName>
 8001460:	4601      	mov	r1, r0
 8001462:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8001466:	4a0d      	ldr	r2, [pc, #52]	@ (800149c <APPE_SysEvtError+0x80>)
 8001468:	480d      	ldr	r0, [pc, #52]	@ (80014a0 <APPE_SysEvtError+0x84>)
 800146a:	f00d fb4d 	bl	800eb08 <iprintf>
 800146e:	480e      	ldr	r0, [pc, #56]	@ (80014a8 <APPE_SysEvtError+0x8c>)
 8001470:	f00d fbb2 	bl	800ebd8 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001474:	e00d      	b.n	8001492 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001476:	4808      	ldr	r0, [pc, #32]	@ (8001498 <APPE_SysEvtError+0x7c>)
 8001478:	f00a fb1e 	bl	800bab8 <DbgTraceGetFileName>
 800147c:	4601      	mov	r1, r0
 800147e:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8001482:	4a06      	ldr	r2, [pc, #24]	@ (800149c <APPE_SysEvtError+0x80>)
 8001484:	4806      	ldr	r0, [pc, #24]	@ (80014a0 <APPE_SysEvtError+0x84>)
 8001486:	f00d fb3f 	bl	800eb08 <iprintf>
 800148a:	4808      	ldr	r0, [pc, #32]	@ (80014ac <APPE_SysEvtError+0x90>)
 800148c:	f00d fba4 	bl	800ebd8 <puts>
  return;
 8001490:	bf00      	nop
}
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	08010b54 	.word	0x08010b54
 800149c:	08011ca8 	.word	0x08011ca8
 80014a0:	08010b6c 	.word	0x08010b6c
 80014a4:	08010d54 	.word	0x08010d54
 80014a8:	08010d84 	.word	0x08010d84
 80014ac:	08010dc0 	.word	0x08010dc0

080014b0 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	@ 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	330b      	adds	r3, #11
 80014d4:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3302      	adds	r3, #2
 80014da:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d146      	bne.n	8001572 <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80014e4:	4836      	ldr	r0, [pc, #216]	@ (80015c0 <APPE_SysEvtReadyProcessing+0x110>)
 80014e6:	f00a fae7 	bl	800bab8 <DbgTraceGetFileName>
 80014ea:	4601      	mov	r1, r0
 80014ec:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 80014f0:	4a34      	ldr	r2, [pc, #208]	@ (80015c4 <APPE_SysEvtReadyProcessing+0x114>)
 80014f2:	4835      	ldr	r0, [pc, #212]	@ (80015c8 <APPE_SysEvtReadyProcessing+0x118>)
 80014f4:	f00d fb08 	bl	800eb08 <iprintf>
 80014f8:	4834      	ldr	r0, [pc, #208]	@ (80015cc <APPE_SysEvtReadyProcessing+0x11c>)
 80014fa:	f00d fb6d 	bl	800ebd8 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80014fe:	f7ff fd03 	bl	8000f08 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001502:	230f      	movs	r3, #15
 8001504:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001506:	237f      	movs	r3, #127	@ 0x7f
 8001508:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800150a:	f7ff fd95 	bl	8001038 <LL_DBGMCU_GetRevisionID>
 800150e:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001510:	482b      	ldr	r0, [pc, #172]	@ (80015c0 <APPE_SysEvtReadyProcessing+0x110>)
 8001512:	f00a fad1 	bl	800bab8 <DbgTraceGetFileName>
 8001516:	4601      	mov	r1, r0
 8001518:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 800151c:	4a29      	ldr	r2, [pc, #164]	@ (80015c4 <APPE_SysEvtReadyProcessing+0x114>)
 800151e:	482a      	ldr	r0, [pc, #168]	@ (80015c8 <APPE_SysEvtReadyProcessing+0x118>)
 8001520:	f00d faf2 	bl	800eb08 <iprintf>
 8001524:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001526:	482a      	ldr	r0, [pc, #168]	@ (80015d0 <APPE_SysEvtReadyProcessing+0x120>)
 8001528:	f00d faee 	bl	800eb08 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	b29b      	uxth	r3, r3
 8001530:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001532:	f7ff fd73 	bl	800101c <LL_DBGMCU_GetDeviceID>
 8001536:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001538:	4821      	ldr	r0, [pc, #132]	@ (80015c0 <APPE_SysEvtReadyProcessing+0x110>)
 800153a:	f00a fabd 	bl	800bab8 <DbgTraceGetFileName>
 800153e:	4601      	mov	r1, r0
 8001540:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8001544:	4a1f      	ldr	r2, [pc, #124]	@ (80015c4 <APPE_SysEvtReadyProcessing+0x114>)
 8001546:	4820      	ldr	r0, [pc, #128]	@ (80015c8 <APPE_SysEvtReadyProcessing+0x118>)
 8001548:	f00d fade 	bl	800eb08 <iprintf>
 800154c:	6a39      	ldr	r1, [r7, #32]
 800154e:	4821      	ldr	r0, [pc, #132]	@ (80015d4 <APPE_SysEvtReadyProcessing+0x124>)
 8001550:	f00d fada 	bl	800eb08 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	b29b      	uxth	r3, r3
 8001558:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4618      	mov	r0, r3
 8001560:	f009 fcca 	bl	800aef8 <SHCI_C2_Config>

    APP_BLE_Init();
 8001564:	f00a fc26 	bl	800bdb4 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001568:	2100      	movs	r1, #0
 800156a:	2001      	movs	r0, #1
 800156c:	f00c fb68 	bl	800dc40 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001570:	e022      	b.n	80015b8 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d110      	bne.n	800159c <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800157a:	4811      	ldr	r0, [pc, #68]	@ (80015c0 <APPE_SysEvtReadyProcessing+0x110>)
 800157c:	f00a fa9c 	bl	800bab8 <DbgTraceGetFileName>
 8001580:	4601      	mov	r1, r0
 8001582:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 8001586:	4a0f      	ldr	r2, [pc, #60]	@ (80015c4 <APPE_SysEvtReadyProcessing+0x114>)
 8001588:	480f      	ldr	r0, [pc, #60]	@ (80015c8 <APPE_SysEvtReadyProcessing+0x118>)
 800158a:	f00d fabd 	bl	800eb08 <iprintf>
 800158e:	4812      	ldr	r0, [pc, #72]	@ (80015d8 <APPE_SysEvtReadyProcessing+0x128>)
 8001590:	f00d faba 	bl	800eb08 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
  return;
 800159a:	e00d      	b.n	80015b8 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 800159c:	4808      	ldr	r0, [pc, #32]	@ (80015c0 <APPE_SysEvtReadyProcessing+0x110>)
 800159e:	f00a fa8b 	bl	800bab8 <DbgTraceGetFileName>
 80015a2:	4601      	mov	r1, r0
 80015a4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80015a8:	4a06      	ldr	r2, [pc, #24]	@ (80015c4 <APPE_SysEvtReadyProcessing+0x114>)
 80015aa:	4807      	ldr	r0, [pc, #28]	@ (80015c8 <APPE_SysEvtReadyProcessing+0x118>)
 80015ac:	f00d faac 	bl	800eb08 <iprintf>
 80015b0:	480a      	ldr	r0, [pc, #40]	@ (80015dc <APPE_SysEvtReadyProcessing+0x12c>)
 80015b2:	f00d faa9 	bl	800eb08 <iprintf>
  return;
 80015b6:	bf00      	nop
}
 80015b8:	3728      	adds	r7, #40	@ 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	08010b54 	.word	0x08010b54
 80015c4:	08011cbc 	.word	0x08011cbc
 80015c8:	08010b6c 	.word	0x08010b6c
 80015cc:	08010df8 	.word	0x08010df8
 80015d0:	08010e14 	.word	0x08010e14
 80015d4:	08010e38 	.word	0x08010e38
 80015d8:	08010e58 	.word	0x08010e58
 80015dc:	08010e8c 	.word	0x08010e8c

080015e0 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f00c fb5a 	bl	800dca0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80015f4:	bf00      	nop
}
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f00c fb48 	bl	800dca0 <UTIL_SEQ_Run>
  return;
 8001610:	bf00      	nop
}
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001620:	2100      	movs	r1, #0
 8001622:	2020      	movs	r0, #32
 8001624:	f00c fc5a 	bl	800dedc <UTIL_SEQ_SetTask>
  return;
 8001628:	bf00      	nop
}
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001638:	2002      	movs	r0, #2
 800163a:	f00c fcbb 	bl	800dfb4 <UTIL_SEQ_SetEvt>
  return;
 800163e:	bf00      	nop
}
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800164e:	2002      	movs	r0, #2
 8001650:	f00c fcd0 	bl	800dff4 <UTIL_SEQ_WaitEvt>
  return;
 8001654:	bf00      	nop
}
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <LL_EXTI_EnableIT_0_31>:
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <LL_EXTI_EnableIT_0_31+0x24>)
 8001666:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800166a:	4905      	ldr	r1, [pc, #20]	@ (8001680 <LL_EXTI_EnableIT_0_31+0x24>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4313      	orrs	r3, r2
 8001670:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	58000800 	.word	0x58000800

08001684 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800168c:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4904      	ldr	r1, [pc, #16]	@ (80016a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]

}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	58000800 	.word	0x58000800

080016a8 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80016b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001830 <HW_TS_Init+0x188>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	22ca      	movs	r2, #202	@ 0xca
 80016ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80016bc:	4b5c      	ldr	r3, [pc, #368]	@ (8001830 <HW_TS_Init+0x188>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2253      	movs	r2, #83	@ 0x53
 80016c2:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80016c4:	4b5b      	ldr	r3, [pc, #364]	@ (8001834 <HW_TS_Init+0x18c>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4a5a      	ldr	r2, [pc, #360]	@ (8001834 <HW_TS_Init+0x18c>)
 80016ca:	f043 0320 	orr.w	r3, r3, #32
 80016ce:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80016d0:	4b58      	ldr	r3, [pc, #352]	@ (8001834 <HW_TS_Init+0x18c>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f1c3 0304 	rsb	r3, r3, #4
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b55      	ldr	r3, [pc, #340]	@ (8001838 <HW_TS_Init+0x190>)
 80016e4:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80016e6:	4b53      	ldr	r3, [pc, #332]	@ (8001834 <HW_TS_Init+0x18c>)
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80016ee:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80016f2:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	fa92 f2a2 	rbit	r2, r2
 80016fa:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	2a00      	cmp	r2, #0
 8001704:	d101      	bne.n	800170a <HW_TS_Init+0x62>
  {
    return 32U;
 8001706:	2220      	movs	r2, #32
 8001708:	e003      	b.n	8001712 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	fab2 f282 	clz	r2, r2
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	40d3      	lsrs	r3, r2
 8001714:	b2db      	uxtb	r3, r3
 8001716:	3301      	adds	r3, #1
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b48      	ldr	r3, [pc, #288]	@ (800183c <HW_TS_Init+0x194>)
 800171c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800171e:	4b45      	ldr	r3, [pc, #276]	@ (8001834 <HW_TS_Init+0x18c>)
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	b29b      	uxth	r3, r3
 8001724:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001728:	b29b      	uxth	r3, r3
 800172a:	3301      	adds	r3, #1
 800172c:	b29a      	uxth	r2, r3
 800172e:	4b44      	ldr	r3, [pc, #272]	@ (8001840 <HW_TS_Init+0x198>)
 8001730:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001732:	4b43      	ldr	r3, [pc, #268]	@ (8001840 <HW_TS_Init+0x198>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	3b01      	subs	r3, #1
 8001738:	4a40      	ldr	r2, [pc, #256]	@ (800183c <HW_TS_Init+0x194>)
 800173a:	7812      	ldrb	r2, [r2, #0]
 800173c:	fb02 f303 	mul.w	r3, r2, r3
 8001740:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001744:	4a3c      	ldr	r2, [pc, #240]	@ (8001838 <HW_TS_Init+0x190>)
 8001746:	7812      	ldrb	r2, [r2, #0]
 8001748:	40d3      	lsrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001752:	4293      	cmp	r3, r2
 8001754:	d904      	bls.n	8001760 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001756:	4b3b      	ldr	r3, [pc, #236]	@ (8001844 <HW_TS_Init+0x19c>)
 8001758:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800175c:	801a      	strh	r2, [r3, #0]
 800175e:	e003      	b.n	8001768 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	b29a      	uxth	r2, r3
 8001764:	4b37      	ldr	r3, [pc, #220]	@ (8001844 <HW_TS_Init+0x19c>)
 8001766:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001768:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800176c:	f7ff ff8a 	bl	8001684 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001770:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001774:	f7ff ff72 	bl	800165c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d13d      	bne.n	80017fa <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800177e:	4b32      	ldr	r3, [pc, #200]	@ (8001848 <HW_TS_Init+0x1a0>)
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001784:	4b31      	ldr	r3, [pc, #196]	@ (800184c <HW_TS_Init+0x1a4>)
 8001786:	f04f 32ff 	mov.w	r2, #4294967295
 800178a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800178c:	2300      	movs	r3, #0
 800178e:	77fb      	strb	r3, [r7, #31]
 8001790:	e00c      	b.n	80017ac <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001792:	7ffa      	ldrb	r2, [r7, #31]
 8001794:	492e      	ldr	r1, [pc, #184]	@ (8001850 <HW_TS_Init+0x1a8>)
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	330c      	adds	r3, #12
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80017a6:	7ffb      	ldrb	r3, [r7, #31]
 80017a8:	3301      	adds	r3, #1
 80017aa:	77fb      	strb	r3, [r7, #31]
 80017ac:	7ffb      	ldrb	r3, [r7, #31]
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d9ef      	bls.n	8001792 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80017b2:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <HW_TS_Init+0x1ac>)
 80017b4:	2206      	movs	r2, #6
 80017b6:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80017b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <HW_TS_Init+0x188>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <HW_TS_Init+0x188>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017c6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80017c8:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <HW_TS_Init+0x188>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <HW_TS_Init+0x188>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80017d8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80017da:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <HW_TS_Init+0x1b0>)
 80017dc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80017e0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80017e2:	2003      	movs	r0, #3
 80017e4:	f002 fdcf 	bl	8004386 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <HW_TS_Init+0x188>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <HW_TS_Init+0x188>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	e009      	b.n	800180e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80017fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <HW_TS_Init+0x188>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001808:	2003      	movs	r0, #3
 800180a:	f002 fdae 	bl	800436a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800180e:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <HW_TS_Init+0x188>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	22ff      	movs	r2, #255	@ 0xff
 8001814:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001816:	2200      	movs	r2, #0
 8001818:	2103      	movs	r1, #3
 800181a:	2003      	movs	r0, #3
 800181c:	f002 fd71 	bl	8004302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001820:	2003      	movs	r0, #3
 8001822:	f002 fd88 	bl	8004336 <HAL_NVIC_EnableIRQ>

  return;
 8001826:	bf00      	nop
}
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200005a0 	.word	0x200005a0
 8001834:	40002800 	.word	0x40002800
 8001838:	20000319 	.word	0x20000319
 800183c:	2000031a 	.word	0x2000031a
 8001840:	2000031c 	.word	0x2000031c
 8001844:	2000031e 	.word	0x2000031e
 8001848:	20000318 	.word	0x20000318
 800184c:	20000314 	.word	0x20000314
 8001850:	20000280 	.word	0x20000280
 8001854:	20000310 	.word	0x20000310
 8001858:	58000800 	.word	0x58000800

0800185c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	4603      	mov	r3, r0
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	4613      	mov	r3, r2
 800186c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001872:	2300      	movs	r3, #0
 8001874:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10e      	bne.n	800189a <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 800187c:	4a17      	ldr	r2, [pc, #92]	@ (80018dc <HW_UART_Transmit_DMA+0x80>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001882:	4b17      	ldr	r3, [pc, #92]	@ (80018e0 <HW_UART_Transmit_DMA+0x84>)
 8001884:	4a17      	ldr	r2, [pc, #92]	@ (80018e4 <HW_UART_Transmit_DMA+0x88>)
 8001886:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001888:	89bb      	ldrh	r3, [r7, #12]
 800188a:	461a      	mov	r2, r3
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	4814      	ldr	r0, [pc, #80]	@ (80018e0 <HW_UART_Transmit_DMA+0x84>)
 8001890:	f006 ffd2 	bl	8008838 <HAL_UART_Transmit_DMA>
 8001894:	4603      	mov	r3, r0
 8001896:	75fb      	strb	r3, [r7, #23]
            break;
 8001898:	e000      	b.n	800189c <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800189a:	bf00      	nop
    }

    switch (hal_status)
 800189c:	7dfb      	ldrb	r3, [r7, #23]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d816      	bhi.n	80018d0 <HW_UART_Transmit_DMA+0x74>
 80018a2:	a201      	add	r2, pc, #4	@ (adr r2, 80018a8 <HW_UART_Transmit_DMA+0x4c>)
 80018a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a8:	080018b9 	.word	0x080018b9
 80018ac:	080018bf 	.word	0x080018bf
 80018b0:	080018c5 	.word	0x080018c5
 80018b4:	080018cb 	.word	0x080018cb
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80018b8:	2300      	movs	r3, #0
 80018ba:	75bb      	strb	r3, [r7, #22]
            break;
 80018bc:	e009      	b.n	80018d2 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80018be:	2301      	movs	r3, #1
 80018c0:	75bb      	strb	r3, [r7, #22]
            break;
 80018c2:	e006      	b.n	80018d2 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80018c4:	2302      	movs	r3, #2
 80018c6:	75bb      	strb	r3, [r7, #22]
            break;
 80018c8:	e003      	b.n	80018d2 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80018ca:	2303      	movs	r3, #3
 80018cc:	75bb      	strb	r3, [r7, #22]
            break;
 80018ce:	e000      	b.n	80018d2 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80018d0:	bf00      	nop
    }

    return hw_status;
 80018d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000320 	.word	0x20000320
 80018e0:	20000758 	.word	0x20000758
 80018e4:	40013800 	.word	0x40013800

080018e8 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b09      	ldr	r3, [pc, #36]	@ (800191c <HAL_UART_TxCpltCallback+0x34>)
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d107      	bne.n	800190c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <HAL_UART_TxCpltCallback+0x38>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_UART_TxCpltCallback+0x38>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4798      	blx	r3
            }
            break;
 800190a:	e001      	b.n	8001910 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800190c:	bf00      	nop
 800190e:	e000      	b.n	8001912 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001910:	bf00      	nop
    }

    return;
 8001912:	bf00      	nop
}
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40013800 	.word	0x40013800
 8001920:	20000320 	.word	0x20000320

08001924 <LL_RCC_LSE_SetDriveCapability>:
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800192c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001934:	f023 0218 	bic.w	r2, r3, #24
 8001938:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4313      	orrs	r3, r2
 8001940:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800195e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4313      	orrs	r3, r2
 8001966:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800196c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4013      	ands	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001974:	68fb      	ldr	r3, [r7, #12]
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800198a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800198e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001990:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4313      	orrs	r3, r2
 8001998:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800199a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800199e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4013      	ands	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019a6:	68fb      	ldr	r3, [r7, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019d8:	68fb      	ldr	r3, [r7, #12]
}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ec:	f001 fc4e 	bl	800328c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80019f0:	f7ff fb60 	bl	80010b4 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f4:	f000 f832 	bl	8001a5c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019f8:	f000 f8c6 	bl	8001b88 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80019fc:	f000 f9f8 	bl	8001df0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8001a00:	f000 fa90 	bl	8001f24 <MX_RF_Init>
  MX_GPIO_Init();
 8001a04:	f000 fcfc 	bl	8002400 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a08:	f000 fcdc 	bl	80023c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a0c:	f000 f8f0 	bl	8001bf0 <MX_ADC1_Init>
  MX_CRC_Init();
 8001a10:	f000 f952 	bl	8001cb8 <MX_CRC_Init>
  MX_I2C1_Init();
 8001a14:	f000 f972 	bl	8001cfc <MX_I2C1_Init>
  MX_I2C3_SMBUS_Init();
 8001a18:	f000 f9b0 	bl	8001d7c <MX_I2C3_SMBUS_Init>
  MX_LPTIM1_Init();
 8001a1c:	f000 f9fc 	bl	8001e18 <MX_LPTIM1_Init>
  MX_LPTIM2_Init();
 8001a20:	f000 fa26 	bl	8001e70 <MX_LPTIM2_Init>
  MX_USART1_UART_Init();
 8001a24:	f000 fc58 	bl	80022d8 <MX_USART1_UART_Init>
  MX_QUADSPI_Init();
 8001a28:	f000 fa56 	bl	8001ed8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001a2c:	f000 fa82 	bl	8001f34 <MX_RTC_Init>
  MX_SPI1_Init();
 8001a30:	f000 fb12 	bl	8002058 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001a34:	f000 fb4e 	bl	80020d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a38:	f000 fba2 	bl	8002180 <MX_TIM2_Init>
  MX_TIM16_Init();
 8001a3c:	f000 fc00 	bl	8002240 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001a40:	f000 fc24 	bl	800228c <MX_TIM17_Init>
  MX_USB_PCD_Init();
 8001a44:	f000 fc96 	bl	8002374 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  printf("start\r\n");
 8001a48:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <main+0x70>)
 8001a4a:	f00d f8c5 	bl	800ebd8 <puts>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001a4e:	f7ff fb3f 	bl	80010d0 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001a52:	f7ff fdc5 	bl	80015e0 <MX_APPE_Process>
 8001a56:	e7fc      	b.n	8001a52 <main+0x6a>
 8001a58:	08010ec0 	.word	0x08010ec0

08001a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0a0      	sub	sp, #128	@ 0x80
 8001a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a66:	2248      	movs	r2, #72	@ 0x48
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f00d f9a4 	bl	800edb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	615a      	str	r2, [r3, #20]
 8001a82:	619a      	str	r2, [r3, #24]
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]
 8001a92:	615a      	str	r2, [r3, #20]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001aa2:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f023 0303 	bic.w	r3, r3, #3
 8001aae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ab8:	f003 fd96 	bl	80055e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001abc:	2000      	movs	r0, #0
 8001abe:	f7ff ff31 	bl	8001924 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ac2:	4b30      	ldr	r3, [pc, #192]	@ (8001b84 <SystemClock_Config+0x128>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001aca:	4a2e      	ldr	r2, [pc, #184]	@ (8001b84 <SystemClock_Config+0x128>)
 8001acc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b84 <SystemClock_Config+0x128>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001ade:	2327      	movs	r3, #39	@ 0x27
 8001ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ae2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001af0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001af2:	2301      	movs	r3, #1
 8001af4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af6:	2340      	movs	r3, #64	@ 0x40
 8001af8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001afa:	2300      	movs	r3, #0
 8001afc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001afe:	2360      	movs	r3, #96	@ 0x60
 8001b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 f9ba 	bl	8005e84 <HAL_RCC_OscConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001b16:	f000 fdaf 	bl	8002678 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001b1a:	236f      	movs	r3, #111	@ 0x6f
 8001b1c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001b32:	2300      	movs	r3, #0
 8001b34:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f004 fd15 	bl	800656c <HAL_RCC_ClockConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001b48:	f000 fd96 	bl	8002678 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001b4c:	f005 faf5 	bl	800713a <HAL_RCCEx_EnableMSIPLLMode>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001b50:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8001b54:	f7ff ff2e 	bl	80019b4 <LL_APB1_GRP1_EnableClock>

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8001b5c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001b60:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32774);
 8001b66:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 8001b6a:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8001b6c:	2322      	movs	r3, #34	@ 0x22
 8001b6e:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8001b70:	2320      	movs	r3, #32
 8001b72:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	4618      	mov	r0, r3
 8001b78:	f005 fae6 	bl	8007148 <HAL_RCCEx_CRSConfig>
}
 8001b7c:	bf00      	nop
 8001b7e:	3780      	adds	r7, #128	@ 0x80
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	58000400 	.word	0x58000400

08001b88 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b094      	sub	sp, #80	@ 0x50
 8001b8c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b8e:	463b      	mov	r3, r7
 8001b90:	2250      	movs	r2, #80	@ 0x50
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f00d f90f 	bl	800edb8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001b9a:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 8001b9e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001ba0:	2318      	movs	r3, #24
 8001ba2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001ba4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ba8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001baa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001bb0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001bb4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8001bb6:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8001bba:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001bbc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001bc0:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001bc2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001bc8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bcc:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f005 f938 	bl	8006e4e <HAL_RCCEx_PeriphCLKConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8001be4:	f000 fd48 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001be8:	bf00      	nop
 8001bea:	3750      	adds	r7, #80	@ 0x50
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
 8001c04:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c06:	4b29      	ldr	r3, [pc, #164]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c08:	4a29      	ldr	r2, [pc, #164]	@ (8001cb0 <MX_ADC1_Init+0xc0>)
 8001c0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8001c0c:	4b27      	ldr	r3, [pc, #156]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c0e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8001c12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c14:	4b25      	ldr	r3, [pc, #148]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c1a:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c20:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c26:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c28:	2204      	movs	r2, #4
 8001c2a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001c38:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c46:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c4c:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c52:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c5a:	4b14      	ldr	r3, [pc, #80]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001c60:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c68:	4810      	ldr	r0, [pc, #64]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c6a:	f001 fd21 	bl	80036b0 <HAL_ADC_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001c74:	f000 fd00 	bl	8002678 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c78:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <MX_ADC1_Init+0xc4>)
 8001c7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c7c:	2306      	movs	r3, #6
 8001c7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c84:	237f      	movs	r3, #127	@ 0x7f
 8001c86:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c88:	2304      	movs	r3, #4
 8001c8a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c90:	463b      	mov	r3, r7
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	@ (8001cac <MX_ADC1_Init+0xbc>)
 8001c96:	f001 fe57 	bl	8003948 <HAL_ADC_ConfigChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001ca0:	f000 fcea 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ca4:	bf00      	nop
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000324 	.word	0x20000324
 8001cb0:	50040000 	.word	0x50040000
 8001cb4:	08600004 	.word	0x08600004

08001cb8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf4 <MX_CRC_Init+0x3c>)
 8001cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8001cf8 <MX_CRC_Init+0x40>)
 8001cc0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <MX_CRC_Init+0x3c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf4 <MX_CRC_Init+0x3c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <MX_CRC_Init+0x3c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001cd4:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <MX_CRC_Init+0x3c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <MX_CRC_Init+0x3c>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001ce0:	4804      	ldr	r0, [pc, #16]	@ (8001cf4 <MX_CRC_Init+0x3c>)
 8001ce2:	f002 fb5f 	bl	80043a4 <HAL_CRC_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001cec:	f000 fcc4 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200003e8 	.word	0x200003e8
 8001cf8:	40023000 	.word	0x40023000

08001cfc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d00:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <MX_I2C1_Init+0x74>)
 8001d02:	4a1c      	ldr	r2, [pc, #112]	@ (8001d74 <MX_I2C1_Init+0x78>)
 8001d04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8001d06:	4b1a      	ldr	r3, [pc, #104]	@ (8001d70 <MX_I2C1_Init+0x74>)
 8001d08:	4a1b      	ldr	r2, [pc, #108]	@ (8001d78 <MX_I2C1_Init+0x7c>)
 8001d0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d0c:	4b18      	ldr	r3, [pc, #96]	@ (8001d70 <MX_I2C1_Init+0x74>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d12:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <MX_I2C1_Init+0x74>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d18:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <MX_I2C1_Init+0x74>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d1e:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <MX_I2C1_Init+0x74>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <MX_I2C1_Init+0x74>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <MX_I2C1_Init+0x74>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <MX_I2C1_Init+0x74>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d36:	480e      	ldr	r0, [pc, #56]	@ (8001d70 <MX_I2C1_Init+0x74>)
 8001d38:	f003 f904 	bl	8004f44 <HAL_I2C_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d42:	f000 fc99 	bl	8002678 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d46:	2100      	movs	r1, #0
 8001d48:	4809      	ldr	r0, [pc, #36]	@ (8001d70 <MX_I2C1_Init+0x74>)
 8001d4a:	f003 f996 	bl	800507a <HAL_I2CEx_ConfigAnalogFilter>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d54:	f000 fc90 	bl	8002678 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <MX_I2C1_Init+0x74>)
 8001d5c:	f003 f9d8 	bl	8005110 <HAL_I2CEx_ConfigDigitalFilter>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d66:	f000 fc87 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000040c 	.word	0x2000040c
 8001d74:	40005400 	.word	0x40005400
 8001d78:	10707dbc 	.word	0x10707dbc

08001d7c <MX_I2C3_SMBUS_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_SMBUS_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hsmbus3.Instance = I2C3;
 8001d80:	4b18      	ldr	r3, [pc, #96]	@ (8001de4 <MX_I2C3_SMBUS_Init+0x68>)
 8001d82:	4a19      	ldr	r2, [pc, #100]	@ (8001de8 <MX_I2C3_SMBUS_Init+0x6c>)
 8001d84:	601a      	str	r2, [r3, #0]
  hsmbus3.Init.Timing = 0x00B07CB4;
 8001d86:	4b17      	ldr	r3, [pc, #92]	@ (8001de4 <MX_I2C3_SMBUS_Init+0x68>)
 8001d88:	4a18      	ldr	r2, [pc, #96]	@ (8001dec <MX_I2C3_SMBUS_Init+0x70>)
 8001d8a:	605a      	str	r2, [r3, #4]
  hsmbus3.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001d8c:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <MX_I2C3_SMBUS_Init+0x68>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  hsmbus3.Init.OwnAddress1 = 2;
 8001d92:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <MX_I2C3_SMBUS_Init+0x68>)
 8001d94:	2202      	movs	r2, #2
 8001d96:	60da      	str	r2, [r3, #12]
  hsmbus3.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001d98:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <MX_I2C3_SMBUS_Init+0x68>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	611a      	str	r2, [r3, #16]
  hsmbus3.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001d9e:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <MX_I2C3_SMBUS_Init+0x68>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
  hsmbus3.Init.OwnAddress2 = 0;
 8001da4:	4b0f      	ldr	r3, [pc, #60]	@ (8001de4 <MX_I2C3_SMBUS_Init+0x68>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  hsmbus3.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001daa:	4b0e      	ldr	r3, [pc, #56]	@ (8001de4 <MX_I2C3_SMBUS_Init+0x68>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	61da      	str	r2, [r3, #28]
  hsmbus3.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001db0:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <MX_I2C3_SMBUS_Init+0x68>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	621a      	str	r2, [r3, #32]
  hsmbus3.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001db6:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <MX_I2C3_SMBUS_Init+0x68>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	625a      	str	r2, [r3, #36]	@ 0x24
  hsmbus3.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001dbc:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <MX_I2C3_SMBUS_Init+0x68>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsmbus3.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001dc2:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <MX_I2C3_SMBUS_Init+0x68>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsmbus3.Init.SMBusTimeout = 0x00008186;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <MX_I2C3_SMBUS_Init+0x68>)
 8001dca:	f248 1286 	movw	r2, #33158	@ 0x8186
 8001dce:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SMBUS_Init(&hsmbus3) != HAL_OK)
 8001dd0:	4804      	ldr	r0, [pc, #16]	@ (8001de4 <MX_I2C3_SMBUS_Init+0x68>)
 8001dd2:	f005 ff2f 	bl	8007c34 <HAL_SMBUS_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_I2C3_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001ddc:	f000 fc4c 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000460 	.word	0x20000460
 8001de8:	40005c00 	.word	0x40005c00
 8001dec:	00b07cb4 	.word	0x00b07cb4

08001df0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <MX_IPCC_Init+0x20>)
 8001df6:	4a07      	ldr	r2, [pc, #28]	@ (8001e14 <MX_IPCC_Init+0x24>)
 8001df8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001dfa:	4805      	ldr	r0, [pc, #20]	@ (8001e10 <MX_IPCC_Init+0x20>)
 8001dfc:	f003 f9d4 	bl	80051a8 <HAL_IPCC_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001e06:	f000 fc37 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200004b0 	.word	0x200004b0
 8001e14:	58000c00 	.word	0x58000c00

08001e18 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001e1c:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <MX_LPTIM1_Init+0x50>)
 8001e1e:	4a13      	ldr	r2, [pc, #76]	@ (8001e6c <MX_LPTIM1_Init+0x54>)
 8001e20:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001e22:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <MX_LPTIM1_Init+0x50>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <MX_LPTIM1_Init+0x50>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <MX_LPTIM1_Init+0x50>)
 8001e30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e34:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001e36:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <MX_LPTIM1_Init+0x50>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <MX_LPTIM1_Init+0x50>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001e42:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <MX_LPTIM1_Init+0x50>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001e48:	4b07      	ldr	r3, [pc, #28]	@ (8001e68 <MX_LPTIM1_Init+0x50>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <MX_LPTIM1_Init+0x50>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001e54:	4804      	ldr	r0, [pc, #16]	@ (8001e68 <MX_LPTIM1_Init+0x50>)
 8001e56:	f003 fa2d 	bl	80052b4 <HAL_LPTIM_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8001e60:	f000 fc0a 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200004ec 	.word	0x200004ec
 8001e6c:	40007c00 	.word	0x40007c00

08001e70 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8001e74:	4b16      	ldr	r3, [pc, #88]	@ (8001ed0 <MX_LPTIM2_Init+0x60>)
 8001e76:	4a17      	ldr	r2, [pc, #92]	@ (8001ed4 <MX_LPTIM2_Init+0x64>)
 8001e78:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <MX_LPTIM2_Init+0x60>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001e80:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <MX_LPTIM2_Init+0x60>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_FALLING;
 8001e86:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <MX_LPTIM2_Init+0x60>)
 8001e88:	2202      	movs	r2, #2
 8001e8a:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_2TRANSITIONS;
 8001e8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <MX_LPTIM2_Init+0x60>)
 8001e8e:	2208      	movs	r2, #8
 8001e90:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001e92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <MX_LPTIM2_Init+0x60>)
 8001e94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e98:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <MX_LPTIM2_Init+0x60>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <MX_LPTIM2_Init+0x60>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <MX_LPTIM2_Init+0x60>)
 8001ea8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001eac:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_COMP2;
 8001eae:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <MX_LPTIM2_Init+0x60>)
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <MX_LPTIM2_Init+0x60>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8001eba:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <MX_LPTIM2_Init+0x60>)
 8001ebc:	f003 f9fa 	bl	80052b4 <HAL_LPTIM_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 8001ec6:	f000 fbd7 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000524 	.word	0x20000524
 8001ed4:	40009400 	.word	0x40009400

08001ed8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <MX_QUADSPI_Init+0x44>)
 8001ede:	4a10      	ldr	r2, [pc, #64]	@ (8001f20 <MX_QUADSPI_Init+0x48>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <MX_QUADSPI_Init+0x44>)
 8001ee4:	22ff      	movs	r2, #255	@ 0xff
 8001ee6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f1c <MX_QUADSPI_Init+0x44>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <MX_QUADSPI_Init+0x44>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <MX_QUADSPI_Init+0x44>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001efa:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <MX_QUADSPI_Init+0x44>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <MX_QUADSPI_Init+0x44>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001f06:	4805      	ldr	r0, [pc, #20]	@ (8001f1c <MX_QUADSPI_Init+0x44>)
 8001f08:	f003 fb8c 	bl	8005624 <HAL_QSPI_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001f12:	f000 fbb1 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000055c 	.word	0x2000055c
 8001f20:	a0001000 	.word	0xa0001000

08001f24 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b090      	sub	sp, #64	@ 0x40
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001f4e:	463b      	mov	r3, r7
 8001f50:	2228      	movs	r2, #40	@ 0x28
 8001f52:	2100      	movs	r1, #0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00c ff2f 	bl	800edb8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002050 <MX_RTC_Init+0x11c>)
 8001f5c:	4a3d      	ldr	r2, [pc, #244]	@ (8002054 <MX_RTC_Init+0x120>)
 8001f5e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f60:	4b3b      	ldr	r3, [pc, #236]	@ (8002050 <MX_RTC_Init+0x11c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001f66:	4b3a      	ldr	r3, [pc, #232]	@ (8002050 <MX_RTC_Init+0x11c>)
 8001f68:	220f      	movs	r2, #15
 8001f6a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001f6c:	4b38      	ldr	r3, [pc, #224]	@ (8002050 <MX_RTC_Init+0x11c>)
 8001f6e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001f72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f74:	4b36      	ldr	r3, [pc, #216]	@ (8002050 <MX_RTC_Init+0x11c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f7a:	4b35      	ldr	r3, [pc, #212]	@ (8002050 <MX_RTC_Init+0x11c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f80:	4b33      	ldr	r3, [pc, #204]	@ (8002050 <MX_RTC_Init+0x11c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001f86:	4b32      	ldr	r3, [pc, #200]	@ (8002050 <MX_RTC_Init+0x11c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f8c:	4830      	ldr	r0, [pc, #192]	@ (8002050 <MX_RTC_Init+0x11c>)
 8001f8e:	f005 fa27 	bl	80073e0 <HAL_RTC_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8001f98:	f000 fb6e 	bl	8002678 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.SubSeconds = 0x0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001fba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4823      	ldr	r0, [pc, #140]	@ (8002050 <MX_RTC_Init+0x11c>)
 8001fc4:	f005 fabc 	bl	8007540 <HAL_RTC_SetTime>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_RTC_Init+0x9e>
  {
    Error_Handler();
 8001fce:	f000 fb53 	bl	8002678 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001fea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4817      	ldr	r0, [pc, #92]	@ (8002050 <MX_RTC_Init+0x11c>)
 8001ff4:	f005 fb68 	bl	80076c8 <HAL_RTC_SetDate>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001ffe:	f000 fb3b 	bl	8002678 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8002002:	2301      	movs	r3, #1
 8002004:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x20;
 8002006:	2320      	movs	r3, #32
 8002008:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800200a:	2300      	movs	r3, #0
 800200c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002026:	2301      	movs	r3, #1
 8002028:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800202c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002032:	463b      	mov	r3, r7
 8002034:	2201      	movs	r2, #1
 8002036:	4619      	mov	r1, r3
 8002038:	4805      	ldr	r0, [pc, #20]	@ (8002050 <MX_RTC_Init+0x11c>)
 800203a:	f005 fbf3 	bl	8007824 <HAL_RTC_SetAlarm_IT>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8002044:	f000 fb18 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002048:	bf00      	nop
 800204a:	3740      	adds	r7, #64	@ 0x40
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200005a0 	.word	0x200005a0
 8002054:	40002800 	.word	0x40002800

08002058 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800205c:	4b1b      	ldr	r3, [pc, #108]	@ (80020cc <MX_SPI1_Init+0x74>)
 800205e:	4a1c      	ldr	r2, [pc, #112]	@ (80020d0 <MX_SPI1_Init+0x78>)
 8002060:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002062:	4b1a      	ldr	r3, [pc, #104]	@ (80020cc <MX_SPI1_Init+0x74>)
 8002064:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002068:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800206a:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <MX_SPI1_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_10BIT;
 8002070:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <MX_SPI1_Init+0x74>)
 8002072:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8002076:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002078:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <MX_SPI1_Init+0x74>)
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800207e:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <MX_SPI1_Init+0x74>)
 8002080:	2200      	movs	r2, #0
 8002082:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <MX_SPI1_Init+0x74>)
 8002086:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800208a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800208c:	4b0f      	ldr	r3, [pc, #60]	@ (80020cc <MX_SPI1_Init+0x74>)
 800208e:	2200      	movs	r2, #0
 8002090:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002092:	4b0e      	ldr	r3, [pc, #56]	@ (80020cc <MX_SPI1_Init+0x74>)
 8002094:	2200      	movs	r2, #0
 8002096:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002098:	4b0c      	ldr	r3, [pc, #48]	@ (80020cc <MX_SPI1_Init+0x74>)
 800209a:	2200      	movs	r2, #0
 800209c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800209e:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <MX_SPI1_Init+0x74>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80020a4:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <MX_SPI1_Init+0x74>)
 80020a6:	2207      	movs	r2, #7
 80020a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020aa:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <MX_SPI1_Init+0x74>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <MX_SPI1_Init+0x74>)
 80020b2:	2208      	movs	r2, #8
 80020b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020b6:	4805      	ldr	r0, [pc, #20]	@ (80020cc <MX_SPI1_Init+0x74>)
 80020b8:	f005 fe74 	bl	8007da4 <HAL_SPI_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80020c2:	f000 fad9 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200005c4 	.word	0x200005c4
 80020d0:	40013000 	.word	0x40013000

080020d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80020da:	f107 030c 	add.w	r3, r7, #12
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
 80020e8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ea:	463b      	mov	r3, r7
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020f4:	4b20      	ldr	r3, [pc, #128]	@ (8002178 <MX_TIM1_Init+0xa4>)
 80020f6:	4a21      	ldr	r2, [pc, #132]	@ (800217c <MX_TIM1_Init+0xa8>)
 80020f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002178 <MX_TIM1_Init+0xa4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002100:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <MX_TIM1_Init+0xa4>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002106:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <MX_TIM1_Init+0xa4>)
 8002108:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800210c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800210e:	4b1a      	ldr	r3, [pc, #104]	@ (8002178 <MX_TIM1_Init+0xa4>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002114:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <MX_TIM1_Init+0xa4>)
 8002116:	2200      	movs	r2, #0
 8002118:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211a:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <MX_TIM1_Init+0xa4>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002120:	4815      	ldr	r0, [pc, #84]	@ (8002178 <MX_TIM1_Init+0xa4>)
 8002122:	f005 fee2 	bl	8007eea <HAL_TIM_Base_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800212c:	f000 faa4 	bl	8002678 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002130:	2307      	movs	r3, #7
 8002132:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8002134:	2320      	movs	r3, #32
 8002136:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	4619      	mov	r1, r3
 800213e:	480e      	ldr	r0, [pc, #56]	@ (8002178 <MX_TIM1_Init+0xa4>)
 8002140:	f006 f831 	bl	80081a6 <HAL_TIM_SlaveConfigSynchro>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800214a:	f000 fa95 	bl	8002678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800215a:	463b      	mov	r3, r7
 800215c:	4619      	mov	r1, r3
 800215e:	4806      	ldr	r0, [pc, #24]	@ (8002178 <MX_TIM1_Init+0xa4>)
 8002160:	f006 fa1a 	bl	8008598 <HAL_TIMEx_MasterConfigSynchronization>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800216a:	f000 fa85 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	3720      	adds	r7, #32
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000628 	.word	0x20000628
 800217c:	40012c00 	.word	0x40012c00

08002180 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
 8002194:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002196:	463b      	mov	r3, r7
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021a0:	4b26      	ldr	r3, [pc, #152]	@ (800223c <MX_TIM2_Init+0xbc>)
 80021a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021a8:	4b24      	ldr	r3, [pc, #144]	@ (800223c <MX_TIM2_Init+0xbc>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ae:	4b23      	ldr	r3, [pc, #140]	@ (800223c <MX_TIM2_Init+0xbc>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80021b4:	4b21      	ldr	r3, [pc, #132]	@ (800223c <MX_TIM2_Init+0xbc>)
 80021b6:	f04f 32ff 	mov.w	r2, #4294967295
 80021ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021bc:	4b1f      	ldr	r3, [pc, #124]	@ (800223c <MX_TIM2_Init+0xbc>)
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c2:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <MX_TIM2_Init+0xbc>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021c8:	481c      	ldr	r0, [pc, #112]	@ (800223c <MX_TIM2_Init+0xbc>)
 80021ca:	f005 fe8e 	bl	8007eea <HAL_TIM_Base_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80021d4:	f000 fa50 	bl	8002678 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80021d8:	2306      	movs	r3, #6
 80021da:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80021dc:	2370      	movs	r3, #112	@ 0x70
 80021de:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	4619      	mov	r1, r3
 80021f2:	4812      	ldr	r0, [pc, #72]	@ (800223c <MX_TIM2_Init+0xbc>)
 80021f4:	f005 ffd7 	bl	80081a6 <HAL_TIM_SlaveConfigSynchro>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80021fe:	f000 fa3b 	bl	8002678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800220a:	463b      	mov	r3, r7
 800220c:	4619      	mov	r1, r3
 800220e:	480b      	ldr	r0, [pc, #44]	@ (800223c <MX_TIM2_Init+0xbc>)
 8002210:	f006 f9c2 	bl	8008598 <HAL_TIMEx_MasterConfigSynchronization>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800221a:	f000 fa2d 	bl	8002678 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM_TIM2_ETR_COMP1) != HAL_OK)
 800221e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002222:	4806      	ldr	r0, [pc, #24]	@ (800223c <MX_TIM2_Init+0xbc>)
 8002224:	f006 fa18 	bl	8008658 <HAL_TIMEx_RemapConfig>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800222e:	f000 fa23 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002232:	bf00      	nop
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000674 	.word	0x20000674

08002240 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <MX_TIM16_Init+0x44>)
 8002246:	4a10      	ldr	r2, [pc, #64]	@ (8002288 <MX_TIM16_Init+0x48>)
 8002248:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800224a:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <MX_TIM16_Init+0x44>)
 800224c:	2200      	movs	r2, #0
 800224e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002250:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <MX_TIM16_Init+0x44>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002256:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <MX_TIM16_Init+0x44>)
 8002258:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800225c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225e:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <MX_TIM16_Init+0x44>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002264:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <MX_TIM16_Init+0x44>)
 8002266:	2200      	movs	r2, #0
 8002268:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <MX_TIM16_Init+0x44>)
 800226c:	2280      	movs	r2, #128	@ 0x80
 800226e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002270:	4804      	ldr	r0, [pc, #16]	@ (8002284 <MX_TIM16_Init+0x44>)
 8002272:	f005 fe3a 	bl	8007eea <HAL_TIM_Base_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800227c:	f000 f9fc 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200006c0 	.word	0x200006c0
 8002288:	40014400 	.word	0x40014400

0800228c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002290:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <MX_TIM17_Init+0x44>)
 8002292:	4a10      	ldr	r2, [pc, #64]	@ (80022d4 <MX_TIM17_Init+0x48>)
 8002294:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 16;
 8002296:	4b0e      	ldr	r3, [pc, #56]	@ (80022d0 <MX_TIM17_Init+0x44>)
 8002298:	2210      	movs	r2, #16
 800229a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229c:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <MX_TIM17_Init+0x44>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80022a2:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <MX_TIM17_Init+0x44>)
 80022a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022a8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022aa:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <MX_TIM17_Init+0x44>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80022b0:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <MX_TIM17_Init+0x44>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b6:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <MX_TIM17_Init+0x44>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80022bc:	4804      	ldr	r0, [pc, #16]	@ (80022d0 <MX_TIM17_Init+0x44>)
 80022be:	f005 fe14 	bl	8007eea <HAL_TIM_Base_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80022c8:	f000 f9d6 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	2000070c 	.word	0x2000070c
 80022d4:	40014800 	.word	0x40014800

080022d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022dc:	4b23      	ldr	r3, [pc, #140]	@ (800236c <MX_USART1_UART_Init+0x94>)
 80022de:	4a24      	ldr	r2, [pc, #144]	@ (8002370 <MX_USART1_UART_Init+0x98>)
 80022e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022e2:	4b22      	ldr	r3, [pc, #136]	@ (800236c <MX_USART1_UART_Init+0x94>)
 80022e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ea:	4b20      	ldr	r3, [pc, #128]	@ (800236c <MX_USART1_UART_Init+0x94>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022f0:	4b1e      	ldr	r3, [pc, #120]	@ (800236c <MX_USART1_UART_Init+0x94>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022f6:	4b1d      	ldr	r3, [pc, #116]	@ (800236c <MX_USART1_UART_Init+0x94>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022fc:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <MX_USART1_UART_Init+0x94>)
 80022fe:	220c      	movs	r2, #12
 8002300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002302:	4b1a      	ldr	r3, [pc, #104]	@ (800236c <MX_USART1_UART_Init+0x94>)
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002308:	4b18      	ldr	r3, [pc, #96]	@ (800236c <MX_USART1_UART_Init+0x94>)
 800230a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800230e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002310:	4b16      	ldr	r3, [pc, #88]	@ (800236c <MX_USART1_UART_Init+0x94>)
 8002312:	2200      	movs	r2, #0
 8002314:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002316:	4b15      	ldr	r3, [pc, #84]	@ (800236c <MX_USART1_UART_Init+0x94>)
 8002318:	2200      	movs	r2, #0
 800231a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800231c:	4b13      	ldr	r3, [pc, #76]	@ (800236c <MX_USART1_UART_Init+0x94>)
 800231e:	2200      	movs	r2, #0
 8002320:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002322:	4812      	ldr	r0, [pc, #72]	@ (800236c <MX_USART1_UART_Init+0x94>)
 8002324:	f006 fa38 	bl	8008798 <HAL_UART_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800232e:	f000 f9a3 	bl	8002678 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002332:	2100      	movs	r1, #0
 8002334:	480d      	ldr	r0, [pc, #52]	@ (800236c <MX_USART1_UART_Init+0x94>)
 8002336:	f007 fc18 	bl	8009b6a <HAL_UARTEx_SetTxFifoThreshold>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002340:	f000 f99a 	bl	8002678 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002344:	2100      	movs	r1, #0
 8002346:	4809      	ldr	r0, [pc, #36]	@ (800236c <MX_USART1_UART_Init+0x94>)
 8002348:	f007 fc4d 	bl	8009be6 <HAL_UARTEx_SetRxFifoThreshold>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002352:	f000 f991 	bl	8002678 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002356:	4805      	ldr	r0, [pc, #20]	@ (800236c <MX_USART1_UART_Init+0x94>)
 8002358:	f007 fbce 	bl	8009af8 <HAL_UARTEx_DisableFifoMode>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002362:	f000 f989 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000758 	.word	0x20000758
 8002370:	40013800 	.word	0x40013800

08002374 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002378:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <MX_USB_PCD_Init+0x48>)
 800237a:	4a11      	ldr	r2, [pc, #68]	@ (80023c0 <MX_USB_PCD_Init+0x4c>)
 800237c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800237e:	4b0f      	ldr	r3, [pc, #60]	@ (80023bc <MX_USB_PCD_Init+0x48>)
 8002380:	2208      	movs	r2, #8
 8002382:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002384:	4b0d      	ldr	r3, [pc, #52]	@ (80023bc <MX_USB_PCD_Init+0x48>)
 8002386:	2202      	movs	r2, #2
 8002388:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800238a:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <MX_USB_PCD_Init+0x48>)
 800238c:	2202      	movs	r2, #2
 800238e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002390:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <MX_USB_PCD_Init+0x48>)
 8002392:	2200      	movs	r2, #0
 8002394:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002396:	4b09      	ldr	r3, [pc, #36]	@ (80023bc <MX_USB_PCD_Init+0x48>)
 8002398:	2200      	movs	r2, #0
 800239a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800239c:	4b07      	ldr	r3, [pc, #28]	@ (80023bc <MX_USB_PCD_Init+0x48>)
 800239e:	2200      	movs	r2, #0
 80023a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80023a2:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <MX_USB_PCD_Init+0x48>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80023a8:	4804      	ldr	r0, [pc, #16]	@ (80023bc <MX_USB_PCD_Init+0x48>)
 80023aa:	f003 f825 	bl	80053f8 <HAL_PCD_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80023b4:	f000 f960 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	2000084c 	.word	0x2000084c
 80023c0:	40006800 	.word	0x40006800

080023c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80023c8:	2004      	movs	r0, #4
 80023ca:	f7ff fac1 	bl	8001950 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023ce:	2001      	movs	r0, #1
 80023d0:	f7ff fabe 	bl	8001950 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023d4:	2002      	movs	r0, #2
 80023d6:	f7ff fabb 	bl	8001950 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	200b      	movs	r0, #11
 80023e0:	f001 ff8f 	bl	8004302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80023e4:	200b      	movs	r0, #11
 80023e6:	f001 ffa6 	bl	8004336 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	210f      	movs	r1, #15
 80023ee:	203a      	movs	r0, #58	@ 0x3a
 80023f0:	f001 ff87 	bl	8004302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80023f4:	203a      	movs	r0, #58	@ 0x3a
 80023f6:	f001 ff9e 	bl	8004336 <HAL_NVIC_EnableIRQ>

}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002414:	2001      	movs	r0, #1
 8002416:	f7ff fab4 	bl	8001982 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800241a:	2004      	movs	r0, #4
 800241c:	f7ff fab1 	bl	8001982 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002420:	2002      	movs	r0, #2
 8002422:	f7ff faae 	bl	8001982 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002426:	2008      	movs	r0, #8
 8002428:	f7ff faab 	bl	8001982 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800242c:	2010      	movs	r0, #16
 800242e:	f7ff faa8 	bl	8001982 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002432:	2080      	movs	r0, #128	@ 0x80
 8002434:	f7ff faa5 	bl	8001982 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DISP_Pin|GPIO_SELECT2_Pin, GPIO_PIN_RESET);
 8002438:	2200      	movs	r2, #0
 800243a:	2103      	movs	r1, #3
 800243c:	4889      	ldr	r0, [pc, #548]	@ (8002664 <MX_GPIO_Init+0x264>)
 800243e:	f002 fd45 	bl	8004ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D_C_DISP_Pin|RST_DISP_Pin, GPIO_PIN_RESET);
 8002442:	2200      	movs	r2, #0
 8002444:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002448:	4887      	ldr	r0, [pc, #540]	@ (8002668 <MX_GPIO_Init+0x268>)
 800244a:	f002 fd3f 	bl	8004ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800244e:	2200      	movs	r2, #0
 8002450:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002454:	4885      	ldr	r0, [pc, #532]	@ (800266c <MX_GPIO_Init+0x26c>)
 8002456:	f002 fd39 	bl	8004ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_SELECT1_GPIO_Port, GPIO_SELECT1_Pin, GPIO_PIN_RESET);
 800245a:	2200      	movs	r2, #0
 800245c:	2104      	movs	r1, #4
 800245e:	4884      	ldr	r0, [pc, #528]	@ (8002670 <MX_GPIO_Init+0x270>)
 8002460:	f002 fd34 	bl	8004ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 8002464:	f640 4304 	movw	r3, #3076	@ 0xc04
 8002468:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	4619      	mov	r1, r3
 8002476:	487c      	ldr	r0, [pc, #496]	@ (8002668 <MX_GPIO_Init+0x268>)
 8002478:	f002 fbb8 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : LPUART1_RX_MCU_Pin */
  GPIO_InitStruct.Pin = LPUART1_RX_MCU_Pin;
 800247c:	2301      	movs	r3, #1
 800247e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800248c:	2308      	movs	r3, #8
 800248e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LPUART1_RX_MCU_GPIO_Port, &GPIO_InitStruct);
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	4619      	mov	r1, r3
 8002494:	4874      	ldr	r0, [pc, #464]	@ (8002668 <MX_GPIO_Init+0x268>)
 8002496:	f002 fba9 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_MCU_Pin PB12 */
  GPIO_InitStruct.Pin = LPUART1_TX_MCU_Pin|GPIO_PIN_12;
 800249a:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800249e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80024ac:	2308      	movs	r3, #8
 80024ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	4619      	mov	r1, r3
 80024b4:	486f      	ldr	r0, [pc, #444]	@ (8002674 <MX_GPIO_Init+0x274>)
 80024b6:	f002 fb99 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024ba:	2303      	movs	r3, #3
 80024bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024be:	2302      	movs	r3, #2
 80024c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024ca:	2305      	movs	r3, #5
 80024cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	4619      	mov	r1, r3
 80024d2:	4866      	ldr	r0, [pc, #408]	@ (800266c <MX_GPIO_Init+0x26c>)
 80024d4:	f002 fb8a 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : TSC_G4_IO1_Pin TSC_G4_IO2_Pin */
  GPIO_InitStruct.Pin = TSC_G4_IO1_Pin|TSC_G4_IO2_Pin;
 80024d8:	23c0      	movs	r3, #192	@ 0xc0
 80024da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 80024e8:	2309      	movs	r3, #9
 80024ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	4619      	mov	r1, r3
 80024f0:	485d      	ldr	r0, [pc, #372]	@ (8002668 <MX_GPIO_Init+0x268>)
 80024f2:	f002 fb7b 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80024f6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80024fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002508:	2305      	movs	r3, #5
 800250a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4858      	ldr	r0, [pc, #352]	@ (8002674 <MX_GPIO_Init+0x274>)
 8002512:	f002 fb6b 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|DRDY_Pin;
 8002516:	2312      	movs	r3, #18
 8002518:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	4619      	mov	r1, r3
 8002526:	4852      	ldr	r0, [pc, #328]	@ (8002670 <MX_GPIO_Init+0x270>)
 8002528:	f002 fb60 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800252c:	2304      	movs	r3, #4
 800252e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002530:	2300      	movs	r3, #0
 8002532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	4619      	mov	r1, r3
 800253c:	484d      	ldr	r0, [pc, #308]	@ (8002674 <MX_GPIO_Init+0x274>)
 800253e:	f002 fb55 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_CK2_Pin SAI1_D2_Pin */
  GPIO_InitStruct.Pin = SAI1_CK2_Pin|SAI1_D2_Pin;
 8002542:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002546:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF3_SAI1;
 8002554:	2303      	movs	r3, #3
 8002556:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	4619      	mov	r1, r3
 800255c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002560:	f002 fb44 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002564:	2340      	movs	r3, #64	@ 0x40
 8002566:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002570:	2300      	movs	r3, #0
 8002572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002574:	2308      	movs	r3, #8
 8002576:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	4619      	mov	r1, r3
 800257c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002580:	f002 fb34 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DISP_Pin GPIO_SELECT2_Pin */
  GPIO_InitStruct.Pin = CS_DISP_Pin|GPIO_SELECT2_Pin;
 8002584:	2303      	movs	r3, #3
 8002586:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002588:	2301      	movs	r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002594:	1d3b      	adds	r3, r7, #4
 8002596:	4619      	mov	r1, r3
 8002598:	4832      	ldr	r0, [pc, #200]	@ (8002664 <MX_GPIO_Init+0x264>)
 800259a:	f002 fb27 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_4;
 800259e:	f243 0310 	movw	r3, #12304	@ 0x3010
 80025a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	4619      	mov	r1, r3
 80025b0:	482e      	ldr	r0, [pc, #184]	@ (800266c <MX_GPIO_Init+0x26c>)
 80025b2:	f002 fb1b 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 80025b6:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80025ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	4619      	mov	r1, r3
 80025ca:	4828      	ldr	r0, [pc, #160]	@ (800266c <MX_GPIO_Init+0x26c>)
 80025cc:	f002 fb0e 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : D_C_DISP_Pin RST_DISP_Pin */
  GPIO_InitStruct.Pin = D_C_DISP_Pin|RST_DISP_Pin;
 80025d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d6:	2301      	movs	r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e2:	1d3b      	adds	r3, r7, #4
 80025e4:	4619      	mov	r1, r3
 80025e6:	4820      	ldr	r0, [pc, #128]	@ (8002668 <MX_GPIO_Init+0x268>)
 80025e8:	f002 fb00 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025ec:	2308      	movs	r3, #8
 80025ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	4619      	mov	r1, r3
 80025fe:	481c      	ldr	r0, [pc, #112]	@ (8002670 <MX_GPIO_Init+0x270>)
 8002600:	f002 faf4 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002604:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002608:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260a:	2301      	movs	r3, #1
 800260c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002616:	1d3b      	adds	r3, r7, #4
 8002618:	4619      	mov	r1, r3
 800261a:	4814      	ldr	r0, [pc, #80]	@ (800266c <MX_GPIO_Init+0x26c>)
 800261c:	f002 fae6 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pins : TSC_G6_IO1_Pin TSC_G6_IO2_Pin */
  GPIO_InitStruct.Pin = TSC_G6_IO1_Pin|TSC_G6_IO2_Pin;
 8002620:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002624:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8002632:	2309      	movs	r3, #9
 8002634:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	4619      	mov	r1, r3
 800263a:	480c      	ldr	r0, [pc, #48]	@ (800266c <MX_GPIO_Init+0x26c>)
 800263c:	f002 fad6 	bl	8004bec <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SELECT1_Pin */
  GPIO_InitStruct.Pin = GPIO_SELECT1_Pin;
 8002640:	2304      	movs	r3, #4
 8002642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002644:	2301      	movs	r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIO_SELECT1_GPIO_Port, &GPIO_InitStruct);
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	4619      	mov	r1, r3
 8002654:	4806      	ldr	r0, [pc, #24]	@ (8002670 <MX_GPIO_Init+0x270>)
 8002656:	f002 fac9 	bl	8004bec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800265a:	bf00      	nop
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	48001c00 	.word	0x48001c00
 8002668:	48000800 	.word	0x48000800
 800266c:	48000c00 	.word	0x48000c00
 8002670:	48001000 	.word	0x48001000
 8002674:	48000400 	.word	0x48000400

08002678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800267c:	b672      	cpsid	i
}
 800267e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002680:	bf00      	nop
 8002682:	e7fd      	b.n	8002680 <Error_Handler+0x8>

08002684 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800268c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002690:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <LL_AHB1_GRP1_EnableClock>:
{
 80026a6:	b480      	push	{r7}
 80026a8:	b085      	sub	sp, #20
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80026ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80026b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80026be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4013      	ands	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026ca:	68fb      	ldr	r3, [r7, #12]
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <LL_AHB2_GRP1_EnableClock>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80026e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80026e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026fc:	68fb      	ldr	r3, [r7, #12]
}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <LL_AHB3_GRP1_EnableClock>:
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002716:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002718:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4313      	orrs	r3, r2
 8002720:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002726:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4013      	ands	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800272e:	68fb      	ldr	r3, [r7, #12]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_APB1_GRP1_EnableClock>:
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002748:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800274a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4313      	orrs	r3, r2
 8002752:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002758:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002760:	68fb      	ldr	r3, [r7, #12]
}
 8002762:	bf00      	nop
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800277a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800277c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4313      	orrs	r3, r2
 8002784:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800278a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4013      	ands	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80027a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80027b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027c4:	68fb      	ldr	r3, [r7, #12]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80027d6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80027da:	f7ff ff96 	bl	800270a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	202e      	movs	r0, #46	@ 0x2e
 80027e4:	f001 fd8d 	bl	8004302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80027e8:	202e      	movs	r0, #46	@ 0x2e
 80027ea:	f001 fda4 	bl	8004336 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a2a      	ldr	r2, [pc, #168]	@ (80028bc <HAL_ADC_MspInit+0xc8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d14d      	bne.n	80028b2 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002816:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800281a:	f7ff ff5d 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	2001      	movs	r0, #1
 8002820:	f7ff ff5a 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002824:	2004      	movs	r0, #4
 8002826:	f7ff ff57 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>
    PC1     ------> ADC1_IN2
    PC5     ------> ADC1_IN14
    PC4     ------> ADC1_IN13
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5;
 800282a:	2325      	movs	r3, #37	@ 0x25
 800282c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800282e:	2303      	movs	r3, #3
 8002830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002836:	f107 030c 	add.w	r3, r7, #12
 800283a:	4619      	mov	r1, r3
 800283c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002840:	f002 f9d4 	bl	8004bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8002844:	233a      	movs	r3, #58	@ 0x3a
 8002846:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002848:	2303      	movs	r3, #3
 800284a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002850:	f107 030c 	add.w	r3, r7, #12
 8002854:	4619      	mov	r1, r3
 8002856:	481a      	ldr	r0, [pc, #104]	@ (80028c0 <HAL_ADC_MspInit+0xcc>)
 8002858:	f002 f9c8 	bl	8004bec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800285c:	4b19      	ldr	r3, [pc, #100]	@ (80028c4 <HAL_ADC_MspInit+0xd0>)
 800285e:	4a1a      	ldr	r2, [pc, #104]	@ (80028c8 <HAL_ADC_MspInit+0xd4>)
 8002860:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002862:	4b18      	ldr	r3, [pc, #96]	@ (80028c4 <HAL_ADC_MspInit+0xd0>)
 8002864:	2205      	movs	r2, #5
 8002866:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002868:	4b16      	ldr	r3, [pc, #88]	@ (80028c4 <HAL_ADC_MspInit+0xd0>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800286e:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <HAL_ADC_MspInit+0xd0>)
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002874:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <HAL_ADC_MspInit+0xd0>)
 8002876:	2280      	movs	r2, #128	@ 0x80
 8002878:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800287a:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <HAL_ADC_MspInit+0xd0>)
 800287c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002880:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <HAL_ADC_MspInit+0xd0>)
 8002884:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002888:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800288a:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <HAL_ADC_MspInit+0xd0>)
 800288c:	2220      	movs	r2, #32
 800288e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002890:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <HAL_ADC_MspInit+0xd0>)
 8002892:	2200      	movs	r2, #0
 8002894:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002896:	480b      	ldr	r0, [pc, #44]	@ (80028c4 <HAL_ADC_MspInit+0xd0>)
 8002898:	f001 fe76 	bl	8004588 <HAL_DMA_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80028a2:	f7ff fee9 	bl	8002678 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a06      	ldr	r2, [pc, #24]	@ (80028c4 <HAL_ADC_MspInit+0xd0>)
 80028aa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80028ac:	4a05      	ldr	r2, [pc, #20]	@ (80028c4 <HAL_ADC_MspInit+0xd0>)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80028b2:	bf00      	nop
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	50040000 	.word	0x50040000
 80028c0:	48000800 	.word	0x48000800
 80028c4:	20000388 	.word	0x20000388
 80028c8:	40020008 	.word	0x40020008

080028cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a05      	ldr	r2, [pc, #20]	@ (80028f0 <HAL_CRC_MspInit+0x24>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d103      	bne.n	80028e6 <HAL_CRC_MspInit+0x1a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80028de:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80028e2:	f7ff fee0 	bl	80026a6 <LL_AHB1_GRP1_EnableClock>

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023000 	.word	0x40023000

080028f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b09c      	sub	sp, #112	@ 0x70
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800290c:	f107 030c 	add.w	r3, r7, #12
 8002910:	2250      	movs	r2, #80	@ 0x50
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f00c fa4f 	bl	800edb8 <memset>
  if(hi2c->Instance==I2C1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a21      	ldr	r2, [pc, #132]	@ (80029a4 <HAL_I2C_MspInit+0xb0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d13b      	bne.n	800299c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002924:	2304      	movs	r3, #4
 8002926:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002928:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800292c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800292e:	f107 030c 	add.w	r3, r7, #12
 8002932:	4618      	mov	r0, r3
 8002934:	f004 fa8b 	bl	8006e4e <HAL_RCCEx_PeriphCLKConfig>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800293e:	f7ff fe9b 	bl	8002678 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002942:	2002      	movs	r0, #2
 8002944:	f7ff fec8 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002948:	2001      	movs	r0, #1
 800294a:	f7ff fec5 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800294e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002952:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002954:	2312      	movs	r3, #18
 8002956:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002958:	2301      	movs	r3, #1
 800295a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295c:	2300      	movs	r3, #0
 800295e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002960:	2304      	movs	r3, #4
 8002962:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002964:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002968:	4619      	mov	r1, r3
 800296a:	480f      	ldr	r0, [pc, #60]	@ (80029a8 <HAL_I2C_MspInit+0xb4>)
 800296c:	f002 f93e 	bl	8004bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002974:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002976:	2312      	movs	r3, #18
 8002978:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800297a:	2301      	movs	r3, #1
 800297c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297e:	2300      	movs	r3, #0
 8002980:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002982:	2304      	movs	r3, #4
 8002984:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002986:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800298a:	4619      	mov	r1, r3
 800298c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002990:	f002 f92c 	bl	8004bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002994:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002998:	f7ff fed0 	bl	800273c <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800299c:	bf00      	nop
 800299e:	3770      	adds	r7, #112	@ 0x70
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40005400 	.word	0x40005400
 80029a8:	48000400 	.word	0x48000400

080029ac <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b09c      	sub	sp, #112	@ 0x70
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	2250      	movs	r2, #80	@ 0x50
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f00c f9f3 	bl	800edb8 <memset>
  if(hsmbus->Instance==I2C3)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a17      	ldr	r2, [pc, #92]	@ (8002a34 <HAL_SMBUS_MspInit+0x88>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d126      	bne.n	8002a2a <HAL_SMBUS_MspInit+0x7e>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80029dc:	2308      	movs	r3, #8
 80029de:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80029e0:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80029e4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029e6:	f107 030c 	add.w	r3, r7, #12
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 fa2f 	bl	8006e4e <HAL_RCCEx_PeriphCLKConfig>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_SMBUS_MspInit+0x4e>
    {
      Error_Handler();
 80029f6:	f7ff fe3f 	bl	8002678 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	2002      	movs	r0, #2
 80029fc:	f7ff fe6c 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB13     ------> I2C3_SCL
    PB11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin|I2C3_SDA_Pin;
 8002a00:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a06:	2312      	movs	r3, #18
 8002a08:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a12:	2304      	movs	r3, #4
 8002a14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a16:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4806      	ldr	r0, [pc, #24]	@ (8002a38 <HAL_SMBUS_MspInit+0x8c>)
 8002a1e:	f002 f8e5 	bl	8004bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a22:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002a26:	f7ff fe89 	bl	800273c <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002a2a:	bf00      	nop
 8002a2c:	3770      	adds	r7, #112	@ 0x70
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40005c00 	.word	0x40005c00
 8002a38:	48000400 	.word	0x48000400

08002a3c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	@ (8002a80 <HAL_IPCC_MspInit+0x44>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d113      	bne.n	8002a76 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002a4e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002a52:	f7ff fe5a 	bl	800270a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2100      	movs	r1, #0
 8002a5a:	202c      	movs	r0, #44	@ 0x2c
 8002a5c:	f001 fc51 	bl	8004302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002a60:	202c      	movs	r0, #44	@ 0x2c
 8002a62:	f001 fc68 	bl	8004336 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2100      	movs	r1, #0
 8002a6a:	202d      	movs	r0, #45	@ 0x2d
 8002a6c:	f001 fc49 	bl	8004302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002a70:	202d      	movs	r0, #45	@ 0x2d
 8002a72:	f001 fc60 	bl	8004336 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	58000c00 	.word	0x58000c00

08002a84 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b096      	sub	sp, #88	@ 0x58
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a8c:	f107 0308 	add.w	r3, r7, #8
 8002a90:	2250      	movs	r2, #80	@ 0x50
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f00c f98f 	bl	800edb8 <memset>
  if(hlptim->Instance==LPTIM1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a19      	ldr	r2, [pc, #100]	@ (8002b04 <HAL_LPTIM_MspInit+0x80>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d113      	bne.n	8002acc <HAL_LPTIM_MspInit+0x48>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002aa4:	2310      	movs	r3, #16
 8002aa6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8002aa8:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002aac:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aae:	f107 0308 	add.w	r3, r7, #8
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f004 f9cb 	bl	8006e4e <HAL_RCCEx_PeriphCLKConfig>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8002abe:	f7ff fddb 	bl	8002678 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002ac2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8002ac6:	f7ff fe39 	bl	800273c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8002aca:	e016      	b.n	8002afa <HAL_LPTIM_MspInit+0x76>
  else if(hlptim->Instance==LPTIM2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b08 <HAL_LPTIM_MspInit+0x84>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d111      	bne.n	8002afa <HAL_LPTIM_MspInit+0x76>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 8002ada:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002ade:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ae0:	f107 0308 	add.w	r3, r7, #8
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f004 f9b2 	bl	8006e4e <HAL_RCCEx_PeriphCLKConfig>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_LPTIM_MspInit+0x70>
      Error_Handler();
 8002af0:	f7ff fdc2 	bl	8002678 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8002af4:	2020      	movs	r0, #32
 8002af6:	f7ff fe3a 	bl	800276e <LL_APB1_GRP2_EnableClock>
}
 8002afa:	bf00      	nop
 8002afc:	3758      	adds	r7, #88	@ 0x58
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40007c00 	.word	0x40007c00
 8002b08:	40009400 	.word	0x40009400

08002b0c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a22      	ldr	r2, [pc, #136]	@ (8002bb4 <HAL_QSPI_MspInit+0xa8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d13e      	bne.n	8002bac <HAL_QSPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002b2e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002b32:	f7ff fdea 	bl	800270a <LL_AHB3_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b36:	2002      	movs	r0, #2
 8002b38:	f7ff fdce 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f7ff fdcb 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b42:	2008      	movs	r0, #8
 8002b44:	f7ff fdc8 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>
    PD7     ------> QUADSPI_BK1_IO3
    PD3     ------> QUADSPI_BK1_NCS
    PD5     ------> QUADSPI_BK1_IO1
    PD6     ------> QUADSPI_BK1_IO2
    */
    GPIO_InitStruct.Pin = QSPI_BK_IO0_Pin;
 8002b48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b5a:	230a      	movs	r3, #10
 8002b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(QSPI_BK_IO0_GPIO_Port, &GPIO_InitStruct);
 8002b5e:	f107 030c 	add.w	r3, r7, #12
 8002b62:	4619      	mov	r1, r3
 8002b64:	4814      	ldr	r0, [pc, #80]	@ (8002bb8 <HAL_QSPI_MspInit+0xac>)
 8002b66:	f002 f841 	bl	8004bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK_SCK_Pin;
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b7a:	230a      	movs	r3, #10
 8002b7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(QSPI_BK_SCK_GPIO_Port, &GPIO_InitStruct);
 8002b7e:	f107 030c 	add.w	r3, r7, #12
 8002b82:	4619      	mov	r1, r3
 8002b84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b88:	f002 f830 	bl	8004bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK_IO3_Pin|QSPI_BK_NCS_Pin|QSPI_BK_IO1_Pin|QSPI_BK_IO2_Pin;
 8002b8c:	23e8      	movs	r3, #232	@ 0xe8
 8002b8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b9c:	230a      	movs	r3, #10
 8002b9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4805      	ldr	r0, [pc, #20]	@ (8002bbc <HAL_QSPI_MspInit+0xb0>)
 8002ba8:	f002 f820 	bl	8004bec <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002bac:	bf00      	nop
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	a0001000 	.word	0xa0001000
 8002bb8:	48000400 	.word	0x48000400
 8002bbc:	48000c00 	.word	0x48000c00

08002bc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b096      	sub	sp, #88	@ 0x58
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bc8:	f107 0308 	add.w	r3, r7, #8
 8002bcc:	2250      	movs	r2, #80	@ 0x50
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f00c f8f1 	bl	800edb8 <memset>
  if(hrtc->Instance==RTC)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a12      	ldr	r2, [pc, #72]	@ (8002c24 <HAL_RTC_MspInit+0x64>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d11d      	bne.n	8002c1c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002be0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002be4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002be6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bea:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bec:	f107 0308 	add.w	r3, r7, #8
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f004 f92c 	bl	8006e4e <HAL_RCCEx_PeriphCLKConfig>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002bfc:	f7ff fd3c 	bl	8002678 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c00:	f7ff fd40 	bl	8002684 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c04:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002c08:	f7ff fd98 	bl	800273c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2100      	movs	r1, #0
 8002c10:	2029      	movs	r0, #41	@ 0x29
 8002c12:	f001 fb76 	bl	8004302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002c16:	2029      	movs	r0, #41	@ 0x29
 8002c18:	f001 fb8d 	bl	8004336 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002c1c:	bf00      	nop
 8002c1e:	3758      	adds	r7, #88	@ 0x58
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40002800 	.word	0x40002800

08002c28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	f107 030c 	add.w	r3, r7, #12
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a18      	ldr	r2, [pc, #96]	@ (8002ca8 <HAL_SPI_MspInit+0x80>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d12a      	bne.n	8002ca0 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c4a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002c4e:	f7ff fda7 	bl	80027a0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c52:	2001      	movs	r0, #1
 8002c54:	f7ff fd40 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c58:	2002      	movs	r0, #2
 8002c5a:	f7ff fd3d 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>
    PA1     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA4     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_4;
 8002c5e:	2392      	movs	r3, #146	@ 0x92
 8002c60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c62:	2302      	movs	r3, #2
 8002c64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c6e:	2305      	movs	r3, #5
 8002c70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c72:	f107 030c 	add.w	r3, r7, #12
 8002c76:	4619      	mov	r1, r3
 8002c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c7c:	f001 ffb6 	bl	8004bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c80:	2310      	movs	r3, #16
 8002c82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c84:	2302      	movs	r3, #2
 8002c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c90:	2305      	movs	r3, #5
 8002c92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c94:	f107 030c 	add.w	r3, r7, #12
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4804      	ldr	r0, [pc, #16]	@ (8002cac <HAL_SPI_MspInit+0x84>)
 8002c9c:	f001 ffa6 	bl	8004bec <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002ca0:	bf00      	nop
 8002ca2:	3720      	adds	r7, #32
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40013000 	.word	0x40013000
 8002cac:	48000400 	.word	0x48000400

08002cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 030c 	add.w	r3, r7, #12
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a3f      	ldr	r2, [pc, #252]	@ (8002dcc <HAL_TIM_Base_MspInit+0x11c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d120      	bne.n	8002d14 <HAL_TIM_Base_MspInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cd2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002cd6:	f7ff fd63 	bl	80027a0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cda:	2008      	movs	r0, #8
 8002cdc:	f7ff fcfc 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PD14     ------> TIM1_CH1
    PD15     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002ce0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002ce4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cf6:	f107 030c 	add.w	r3, r7, #12
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4834      	ldr	r0, [pc, #208]	@ (8002dd0 <HAL_TIM_Base_MspInit+0x120>)
 8002cfe:	f001 ff75 	bl	8004bec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002d02:	2200      	movs	r2, #0
 8002d04:	2100      	movs	r1, #0
 8002d06:	201b      	movs	r0, #27
 8002d08:	f001 fafb 	bl	8004302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002d0c:	201b      	movs	r0, #27
 8002d0e:	f001 fb12 	bl	8004336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002d12:	e057      	b.n	8002dc4 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d1c:	d12c      	bne.n	8002d78 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d1e:	2001      	movs	r0, #1
 8002d20:	f7ff fd0c 	bl	800273c <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d24:	2001      	movs	r0, #1
 8002d26:	f7ff fcd7 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2a:	2002      	movs	r0, #2
 8002d2c:	f7ff fcd4 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d36:	2302      	movs	r3, #2
 8002d38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d42:	2301      	movs	r3, #1
 8002d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d46:	f107 030c 	add.w	r3, r7, #12
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d50:	f001 ff4c 	bl	8004bec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d66:	2301      	movs	r3, #1
 8002d68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6a:	f107 030c 	add.w	r3, r7, #12
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4818      	ldr	r0, [pc, #96]	@ (8002dd4 <HAL_TIM_Base_MspInit+0x124>)
 8002d72:	f001 ff3b 	bl	8004bec <HAL_GPIO_Init>
}
 8002d76:	e025      	b.n	8002dc4 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM16)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a16      	ldr	r2, [pc, #88]	@ (8002dd8 <HAL_TIM_Base_MspInit+0x128>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d117      	bne.n	8002db2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d82:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002d86:	f7ff fd0b 	bl	80027a0 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d8a:	2010      	movs	r0, #16
 8002d8c:	f7ff fca4 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d90:	2301      	movs	r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8002da0:	230e      	movs	r3, #14
 8002da2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002da4:	f107 030c 	add.w	r3, r7, #12
 8002da8:	4619      	mov	r1, r3
 8002daa:	480c      	ldr	r0, [pc, #48]	@ (8002ddc <HAL_TIM_Base_MspInit+0x12c>)
 8002dac:	f001 ff1e 	bl	8004bec <HAL_GPIO_Init>
}
 8002db0:	e008      	b.n	8002dc4 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM17)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a0a      	ldr	r2, [pc, #40]	@ (8002de0 <HAL_TIM_Base_MspInit+0x130>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d103      	bne.n	8002dc4 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002dbc:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002dc0:	f7ff fcee 	bl	80027a0 <LL_APB2_GRP1_EnableClock>
}
 8002dc4:	bf00      	nop
 8002dc6:	3720      	adds	r7, #32
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40012c00 	.word	0x40012c00
 8002dd0:	48000c00 	.word	0x48000c00
 8002dd4:	48000400 	.word	0x48000400
 8002dd8:	40014400 	.word	0x40014400
 8002ddc:	48001000 	.word	0x48001000
 8002de0:	40014800 	.word	0x40014800

08002de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b09c      	sub	sp, #112	@ 0x70
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dfc:	f107 030c 	add.w	r3, r7, #12
 8002e00:	2250      	movs	r2, #80	@ 0x50
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f00b ffd7 	bl	800edb8 <memset>
  if(huart->Instance==USART1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2e      	ldr	r2, [pc, #184]	@ (8002ec8 <HAL_UART_MspInit+0xe4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d155      	bne.n	8002ec0 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e14:	2301      	movs	r3, #1
 8002e16:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e1c:	f107 030c 	add.w	r3, r7, #12
 8002e20:	4618      	mov	r0, r3
 8002e22:	f004 f814 	bl	8006e4e <HAL_RCCEx_PeriphCLKConfig>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e2c:	f7ff fc24 	bl	8002678 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e30:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002e34:	f7ff fcb4 	bl	80027a0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e38:	2002      	movs	r0, #2
 8002e3a:	f7ff fc4d 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8002e3e:	23c0      	movs	r3, #192	@ 0xc0
 8002e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e4e:	2307      	movs	r3, #7
 8002e50:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e52:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002e56:	4619      	mov	r1, r3
 8002e58:	481c      	ldr	r0, [pc, #112]	@ (8002ecc <HAL_UART_MspInit+0xe8>)
 8002e5a:	f001 fec7 	bl	8004bec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ed0 <HAL_UART_MspInit+0xec>)
 8002e60:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed4 <HAL_UART_MspInit+0xf0>)
 8002e62:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002e64:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed0 <HAL_UART_MspInit+0xec>)
 8002e66:	220f      	movs	r2, #15
 8002e68:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e6a:	4b19      	ldr	r3, [pc, #100]	@ (8002ed0 <HAL_UART_MspInit+0xec>)
 8002e6c:	2210      	movs	r2, #16
 8002e6e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e70:	4b17      	ldr	r3, [pc, #92]	@ (8002ed0 <HAL_UART_MspInit+0xec>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e76:	4b16      	ldr	r3, [pc, #88]	@ (8002ed0 <HAL_UART_MspInit+0xec>)
 8002e78:	2280      	movs	r2, #128	@ 0x80
 8002e7a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e7c:	4b14      	ldr	r3, [pc, #80]	@ (8002ed0 <HAL_UART_MspInit+0xec>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e82:	4b13      	ldr	r3, [pc, #76]	@ (8002ed0 <HAL_UART_MspInit+0xec>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002e88:	4b11      	ldr	r3, [pc, #68]	@ (8002ed0 <HAL_UART_MspInit+0xec>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ed0 <HAL_UART_MspInit+0xec>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002e94:	480e      	ldr	r0, [pc, #56]	@ (8002ed0 <HAL_UART_MspInit+0xec>)
 8002e96:	f001 fb77 	bl	8004588 <HAL_DMA_Init>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002ea0:	f7ff fbea 	bl	8002678 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed0 <HAL_UART_MspInit+0xec>)
 8002ea8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002eaa:	4a09      	ldr	r2, [pc, #36]	@ (8002ed0 <HAL_UART_MspInit+0xec>)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	2024      	movs	r0, #36	@ 0x24
 8002eb6:	f001 fa24 	bl	8004302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002eba:	2024      	movs	r0, #36	@ 0x24
 8002ebc:	f001 fa3b 	bl	8004336 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002ec0:	bf00      	nop
 8002ec2:	3770      	adds	r7, #112	@ 0x70
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40013800 	.word	0x40013800
 8002ecc:	48000400 	.word	0x48000400
 8002ed0:	200007ec 	.word	0x200007ec
 8002ed4:	40020444 	.word	0x40020444

08002ed8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	f107 030c 	add.w	r3, r7, #12
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0f      	ldr	r2, [pc, #60]	@ (8002f34 <HAL_PCD_MspInit+0x5c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d118      	bne.n	8002f2c <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efa:	2001      	movs	r0, #1
 8002efc:	f7ff fbec 	bl	80026d8 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    */
    GPIO_InitStruct.Pin = USB_P_Pin|USB_N_Pin;
 8002f00:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002f04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002f12:	230a      	movs	r3, #10
 8002f14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f16:	f107 030c 	add.w	r3, r7, #12
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f20:	f001 fe64 	bl	8004bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002f24:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002f28:	f7ff fc08 	bl	800273c <LL_APB1_GRP1_EnableClock>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8002f2c:	bf00      	nop
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40006800 	.word	0x40006800

08002f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f3c:	bf00      	nop
 8002f3e:	e7fd      	b.n	8002f3c <NMI_Handler+0x4>

08002f40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f44:	bf00      	nop
 8002f46:	e7fd      	b.n	8002f44 <HardFault_Handler+0x4>

08002f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f4c:	bf00      	nop
 8002f4e:	e7fd      	b.n	8002f4c <MemManage_Handler+0x4>

08002f50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f54:	bf00      	nop
 8002f56:	e7fd      	b.n	8002f54 <BusFault_Handler+0x4>

08002f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f5c:	bf00      	nop
 8002f5e:	e7fd      	b.n	8002f5c <UsageFault_Handler+0x4>

08002f60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f8e:	f000 f9d7 	bl	8003340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f9c:	4802      	ldr	r0, [pc, #8]	@ (8002fa8 <DMA1_Channel1_IRQHandler+0x10>)
 8002f9e:	f001 fcd4 	bl	800494a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000388 	.word	0x20000388

08002fac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fb0:	4802      	ldr	r0, [pc, #8]	@ (8002fbc <TIM1_CC_IRQHandler+0x10>)
 8002fb2:	f004 fff1 	bl	8007f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000628 	.word	0x20000628

08002fc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fc4:	4802      	ldr	r0, [pc, #8]	@ (8002fd0 <USART1_IRQHandler+0x10>)
 8002fc6:	f005 fcb7 	bl	8008938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000758 	.word	0x20000758

08002fd4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC A and B alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002fd8:	4802      	ldr	r0, [pc, #8]	@ (8002fe4 <RTC_Alarm_IRQHandler+0x10>)
 8002fda:	f004 fd61 	bl	8007aa0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200005a0 	.word	0x200005a0

08002fe8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002fec:	f00a fcd8 	bl	800d9a0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002ff0:	bf00      	nop
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002ff8:	f00a fd08 	bl	800da0c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003004:	f001 ff7a 	bl	8004efc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003008:	bf00      	nop
 800300a:	bd80      	pop	{r7, pc}

0800300c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003010:	4802      	ldr	r0, [pc, #8]	@ (800301c <DMA2_Channel4_IRQHandler+0x10>)
 8003012:	f001 fc9a 	bl	800494a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200007ec 	.word	0x200007ec

08003020 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return 1;
 8003024:	2301      	movs	r3, #1
}
 8003026:	4618      	mov	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <_kill>:

int _kill(int pid, int sig)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800303a:	f00b ff25 	bl	800ee88 <__errno>
 800303e:	4603      	mov	r3, r0
 8003040:	2216      	movs	r2, #22
 8003042:	601a      	str	r2, [r3, #0]
  return -1;
 8003044:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <_exit>:

void _exit (int status)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003058:	f04f 31ff 	mov.w	r1, #4294967295
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff ffe7 	bl	8003030 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003062:	bf00      	nop
 8003064:	e7fd      	b.n	8003062 <_exit+0x12>

08003066 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	e00a      	b.n	800308e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003078:	f3af 8000 	nop.w
 800307c:	4601      	mov	r1, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	60ba      	str	r2, [r7, #8]
 8003084:	b2ca      	uxtb	r2, r1
 8003086:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	3301      	adds	r3, #1
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	429a      	cmp	r2, r3
 8003094:	dbf0      	blt.n	8003078 <_read+0x12>
  }

  return len;
 8003096:	687b      	ldr	r3, [r7, #4]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030c8:	605a      	str	r2, [r3, #4]
  return 0;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <_isatty>:

int _isatty(int file)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030e0:	2301      	movs	r3, #1
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b085      	sub	sp, #20
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003110:	4a14      	ldr	r2, [pc, #80]	@ (8003164 <_sbrk+0x5c>)
 8003112:	4b15      	ldr	r3, [pc, #84]	@ (8003168 <_sbrk+0x60>)
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800311c:	4b13      	ldr	r3, [pc, #76]	@ (800316c <_sbrk+0x64>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003124:	4b11      	ldr	r3, [pc, #68]	@ (800316c <_sbrk+0x64>)
 8003126:	4a12      	ldr	r2, [pc, #72]	@ (8003170 <_sbrk+0x68>)
 8003128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800312a:	4b10      	ldr	r3, [pc, #64]	@ (800316c <_sbrk+0x64>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	429a      	cmp	r2, r3
 8003136:	d207      	bcs.n	8003148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003138:	f00b fea6 	bl	800ee88 <__errno>
 800313c:	4603      	mov	r3, r0
 800313e:	220c      	movs	r2, #12
 8003140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	e009      	b.n	800315c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003148:	4b08      	ldr	r3, [pc, #32]	@ (800316c <_sbrk+0x64>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800314e:	4b07      	ldr	r3, [pc, #28]	@ (800316c <_sbrk+0x64>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	4a05      	ldr	r2, [pc, #20]	@ (800316c <_sbrk+0x64>)
 8003158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800315a:	68fb      	ldr	r3, [r7, #12]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20030000 	.word	0x20030000
 8003168:	00000400 	.word	0x00000400
 800316c:	20000b28 	.word	0x20000b28
 8003170:	20000f40 	.word	0x20000f40

08003174 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003178:	4b24      	ldr	r3, [pc, #144]	@ (800320c <SystemInit+0x98>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317e:	4a23      	ldr	r2, [pc, #140]	@ (800320c <SystemInit+0x98>)
 8003180:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003184:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800319c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80031a0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031ac:	4b18      	ldr	r3, [pc, #96]	@ (8003210 <SystemInit+0x9c>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80031b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031be:	f023 0305 	bic.w	r3, r3, #5
 80031c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80031c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80031da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031de:	4a0d      	ldr	r2, [pc, #52]	@ (8003214 <SystemInit+0xa0>)
 80031e0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80031e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e6:	4a0b      	ldr	r2, [pc, #44]	@ (8003214 <SystemInit+0xa0>)
 80031e8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80031ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80031fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031fe:	2200      	movs	r2, #0
 8003200:	619a      	str	r2, [r3, #24]
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00
 8003210:	faf6fefb 	.word	0xfaf6fefb
 8003214:	22041000 	.word	0x22041000

08003218 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003218:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800321a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800321c:	3304      	adds	r3, #4

0800321e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800321e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003220:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003222:	d3f9      	bcc.n	8003218 <CopyDataInit>
  bx lr
 8003224:	4770      	bx	lr

08003226 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003226:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003228:	3004      	adds	r0, #4

0800322a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800322a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800322c:	d3fb      	bcc.n	8003226 <FillZerobss>
  bx lr
 800322e:	4770      	bx	lr

08003230 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003230:	480c      	ldr	r0, [pc, #48]	@ (8003264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003232:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003234:	f7ff ff9e 	bl	8003174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003238:	480b      	ldr	r0, [pc, #44]	@ (8003268 <LoopForever+0x6>)
 800323a:	490c      	ldr	r1, [pc, #48]	@ (800326c <LoopForever+0xa>)
 800323c:	4a0c      	ldr	r2, [pc, #48]	@ (8003270 <LoopForever+0xe>)
 800323e:	2300      	movs	r3, #0
 8003240:	f7ff ffed 	bl	800321e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003244:	480b      	ldr	r0, [pc, #44]	@ (8003274 <LoopForever+0x12>)
 8003246:	490c      	ldr	r1, [pc, #48]	@ (8003278 <LoopForever+0x16>)
 8003248:	4a0c      	ldr	r2, [pc, #48]	@ (800327c <LoopForever+0x1a>)
 800324a:	2300      	movs	r3, #0
 800324c:	f7ff ffe7 	bl	800321e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003250:	480b      	ldr	r0, [pc, #44]	@ (8003280 <LoopForever+0x1e>)
 8003252:	490c      	ldr	r1, [pc, #48]	@ (8003284 <LoopForever+0x22>)
 8003254:	2300      	movs	r3, #0
 8003256:	f7ff ffe8 	bl	800322a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800325a:	f00b fe1b 	bl	800ee94 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800325e:	f7fe fbc3 	bl	80019e8 <main>

08003262 <LoopForever>:

LoopForever:
  b LoopForever
 8003262:	e7fe      	b.n	8003262 <LoopForever>
  ldr   r0, =_estack
 8003264:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003268:	20000008 	.word	0x20000008
 800326c:	200001e4 	.word	0x200001e4
 8003270:	080121d8 	.word	0x080121d8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003274:	200301e4 	.word	0x200301e4
 8003278:	20030a67 	.word	0x20030a67
 800327c:	0801242e 	.word	0x0801242e
  INIT_BSS _sbss, _ebss
 8003280:	20000264 	.word	0x20000264
 8003284:	20000f40 	.word	0x20000f40

08003288 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003288:	e7fe      	b.n	8003288 <ADC1_IRQHandler>
	...

0800328c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003296:	4b0c      	ldr	r3, [pc, #48]	@ (80032c8 <HAL_Init+0x3c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a0b      	ldr	r2, [pc, #44]	@ (80032c8 <HAL_Init+0x3c>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032a2:	2003      	movs	r0, #3
 80032a4:	f001 f822 	bl	80042ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032a8:	2000      	movs	r0, #0
 80032aa:	f000 f80f 	bl	80032cc <HAL_InitTick>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	71fb      	strb	r3, [r7, #7]
 80032b8:	e001      	b.n	80032be <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032ba:	f7ff fa8a 	bl	80027d2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032be:	79fb      	ldrb	r3, [r7, #7]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	58004000 	.word	0x58004000

080032cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80032d8:	4b17      	ldr	r3, [pc, #92]	@ (8003338 <HAL_InitTick+0x6c>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d024      	beq.n	800332a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80032e0:	f003 faf0 	bl	80068c4 <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b14      	ldr	r3, [pc, #80]	@ (8003338 <HAL_InitTick+0x6c>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	4619      	mov	r1, r3
 80032ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	4618      	mov	r0, r3
 80032fa:	f001 f82a 	bl	8004352 <HAL_SYSTICK_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10f      	bne.n	8003324 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b0f      	cmp	r3, #15
 8003308:	d809      	bhi.n	800331e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800330a:	2200      	movs	r2, #0
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	f04f 30ff 	mov.w	r0, #4294967295
 8003312:	f000 fff6 	bl	8004302 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003316:	4a09      	ldr	r2, [pc, #36]	@ (800333c <HAL_InitTick+0x70>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	e007      	b.n	800332e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
 8003322:	e004      	b.n	800332e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
 8003328:	e001      	b.n	800332e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800332e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000010 	.word	0x20000010
 800333c:	2000000c 	.word	0x2000000c

08003340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003344:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <HAL_IncTick+0x20>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <HAL_IncTick+0x24>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4413      	add	r3, r2
 8003350:	4a04      	ldr	r2, [pc, #16]	@ (8003364 <HAL_IncTick+0x24>)
 8003352:	6013      	str	r3, [r2, #0]
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000010 	.word	0x20000010
 8003364:	20000b2c 	.word	0x20000b2c

08003368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return uwTick;
 800336c:	4b03      	ldr	r3, [pc, #12]	@ (800337c <HAL_GetTick+0x14>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000b2c 	.word	0x20000b2c

08003380 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <HAL_GetTickPrio+0x14>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	2000000c 	.word	0x2000000c

08003398 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	609a      	str	r2, [r3, #8]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	3360      	adds	r3, #96	@ 0x60
 8003412:	461a      	mov	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <LL_ADC_SetOffset+0x44>)
 8003422:	4013      	ands	r3, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	4313      	orrs	r3, r2
 8003430:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003438:	bf00      	nop
 800343a:	371c      	adds	r7, #28
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	03fff000 	.word	0x03fff000

08003448 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3360      	adds	r3, #96	@ 0x60
 8003456:	461a      	mov	r2, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003468:	4618      	mov	r0, r3
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3360      	adds	r3, #96	@ 0x60
 8003484:	461a      	mov	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	431a      	orrs	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b087      	sub	sp, #28
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3330      	adds	r3, #48	@ 0x30
 80034ba:	461a      	mov	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	4413      	add	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	211f      	movs	r1, #31
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	401a      	ands	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	0e9b      	lsrs	r3, r3, #26
 80034e2:	f003 011f 	and.w	r1, r3, #31
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	431a      	orrs	r2, r3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003502:	b480      	push	{r7}
 8003504:	b087      	sub	sp, #28
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3314      	adds	r3, #20
 8003512:	461a      	mov	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	0e5b      	lsrs	r3, r3, #25
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	4413      	add	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	0d1b      	lsrs	r3, r3, #20
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2107      	movs	r1, #7
 8003530:	fa01 f303 	lsl.w	r3, r1, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	401a      	ands	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	0d1b      	lsrs	r3, r3, #20
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	fa01 f303 	lsl.w	r3, r1, r3
 8003546:	431a      	orrs	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800354c:	bf00      	nop
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003570:	43db      	mvns	r3, r3
 8003572:	401a      	ands	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f003 0318 	and.w	r3, r3, #24
 800357a:	4908      	ldr	r1, [pc, #32]	@ (800359c <LL_ADC_SetChannelSingleDiff+0x44>)
 800357c:	40d9      	lsrs	r1, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	400b      	ands	r3, r1
 8003582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003586:	431a      	orrs	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	0007ffff 	.word	0x0007ffff

080035a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80035b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6093      	str	r3, [r2, #8]
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035d8:	d101      	bne.n	80035de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80035fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003600:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003624:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003628:	d101      	bne.n	800362e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <LL_ADC_IsEnabled+0x18>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <LL_ADC_IsEnabled+0x1a>
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b04      	cmp	r3, #4
 8003674:	d101      	bne.n	800367a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b08      	cmp	r3, #8
 800369a:	d101      	bne.n	80036a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80036bc:	2300      	movs	r3, #0
 80036be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e12e      	b.n	800392c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff f889 	bl	80027f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff65 	bl	80035c4 <LL_ADC_IsDeepPowerDownEnabled>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d004      	beq.n	800370a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff4b 	bl	80035a0 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff ff80 	bl	8003614 <LL_ADC_IsInternalRegulatorEnabled>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d115      	bne.n	8003746 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff ff64 	bl	80035ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003724:	4b83      	ldr	r3, [pc, #524]	@ (8003934 <HAL_ADC_Init+0x284>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	4a83      	ldr	r2, [pc, #524]	@ (8003938 <HAL_ADC_Init+0x288>)
 800372c:	fba2 2303 	umull	r2, r3, r2, r3
 8003730:	099b      	lsrs	r3, r3, #6
 8003732:	3301      	adds	r3, #1
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003738:	e002      	b.n	8003740 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	3b01      	subs	r3, #1
 800373e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f9      	bne.n	800373a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff ff62 	bl	8003614 <LL_ADC_IsInternalRegulatorEnabled>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10d      	bne.n	8003772 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375a:	f043 0210 	orr.w	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff ff73 	bl	8003662 <LL_ADC_REG_IsConversionOngoing>
 800377c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	f040 80c7 	bne.w	800391a <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	f040 80c3 	bne.w	800391a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003798:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800379c:	f043 0202 	orr.w	r2, r3, #2
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff ff47 	bl	800363c <LL_ADC_IsEnabled>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037b4:	4861      	ldr	r0, [pc, #388]	@ (800393c <HAL_ADC_Init+0x28c>)
 80037b6:	f7ff ff41 	bl	800363c <LL_ADC_IsEnabled>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4619      	mov	r1, r3
 80037c6:	485e      	ldr	r0, [pc, #376]	@ (8003940 <HAL_ADC_Init+0x290>)
 80037c8:	f7ff fde6 	bl	8003398 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	7e5b      	ldrb	r3, [r3, #25]
 80037d0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037d6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80037dc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80037e2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ea:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80037ec:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d106      	bne.n	800380c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	3b01      	subs	r3, #1
 8003804:	045b      	lsls	r3, r3, #17
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003810:	2b00      	cmp	r3, #0
 8003812:	d009      	beq.n	8003828 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003818:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003820:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	4b45      	ldr	r3, [pc, #276]	@ (8003944 <HAL_ADC_Init+0x294>)
 8003830:	4013      	ands	r3, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	69b9      	ldr	r1, [r7, #24]
 8003838:	430b      	orrs	r3, r1
 800383a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ff0e 	bl	8003662 <LL_ADC_REG_IsConversionOngoing>
 8003846:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff ff1b 	bl	8003688 <LL_ADC_INJ_IsConversionOngoing>
 8003852:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d13d      	bne.n	80038d6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d13a      	bne.n	80038d6 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003864:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800386c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800387c:	f023 0302 	bic.w	r3, r3, #2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	69b9      	ldr	r1, [r7, #24]
 8003886:	430b      	orrs	r3, r1
 8003888:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003890:	2b01      	cmp	r3, #1
 8003892:	d118      	bne.n	80038c6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800389e:	f023 0304 	bic.w	r3, r3, #4
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038aa:	4311      	orrs	r1, r2
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80038b0:	4311      	orrs	r1, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80038b6:	430a      	orrs	r2, r1
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	611a      	str	r2, [r3, #16]
 80038c4:	e007      	b.n	80038d6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d10c      	bne.n	80038f8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e4:	f023 010f 	bic.w	r1, r3, #15
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	1e5a      	subs	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80038f6:	e007      	b.n	8003908 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 020f 	bic.w	r2, r2, #15
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390c:	f023 0303 	bic.w	r3, r3, #3
 8003910:	f043 0201 	orr.w	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	655a      	str	r2, [r3, #84]	@ 0x54
 8003918:	e007      	b.n	800392a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391e:	f043 0210 	orr.w	r2, r3, #16
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800392a:	7ffb      	ldrb	r3, [r7, #31]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20000008 	.word	0x20000008
 8003938:	053e2d63 	.word	0x053e2d63
 800393c:	50040000 	.word	0x50040000
 8003940:	50040300 	.word	0x50040300
 8003944:	fff0c007 	.word	0xfff0c007

08003948 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b0b6      	sub	sp, #216	@ 0xd8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_ADC_ConfigChannel+0x22>
 8003966:	2302      	movs	r3, #2
 8003968:	e39f      	b.n	80040aa <HAL_ADC_ConfigChannel+0x762>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fe73 	bl	8003662 <LL_ADC_REG_IsConversionOngoing>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	f040 8384 	bne.w	800408c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	f7ff fd8a 	bl	80034aa <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fe61 	bl	8003662 <LL_ADC_REG_IsConversionOngoing>
 80039a0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fe6d 	bl	8003688 <LL_ADC_INJ_IsConversionOngoing>
 80039ae:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f040 81a6 	bne.w	8003d08 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f040 81a1 	bne.w	8003d08 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	6819      	ldr	r1, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	461a      	mov	r2, r3
 80039d4:	f7ff fd95 	bl	8003502 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	08db      	lsrs	r3, r3, #3
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d00a      	beq.n	8003a10 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6919      	ldr	r1, [r3, #16]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a0a:	f7ff fcf9 	bl	8003400 <LL_ADC_SetOffset>
 8003a0e:	e17b      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fd16 	bl	8003448 <LL_ADC_GetOffsetChannel>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0xf4>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff fd0b 	bl	8003448 <LL_ADC_GetOffsetChannel>
 8003a32:	4603      	mov	r3, r0
 8003a34:	0e9b      	lsrs	r3, r3, #26
 8003a36:	f003 021f 	and.w	r2, r3, #31
 8003a3a:	e01e      	b.n	8003a7a <HAL_ADC_ConfigChannel+0x132>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fd00 	bl	8003448 <LL_ADC_GetOffsetChannel>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8003a5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8003a62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	e004      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8003a6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d105      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x14a>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	0e9b      	lsrs	r3, r3, #26
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	e018      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x17c>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003aae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003ab6:	2320      	movs	r3, #32
 8003ab8:	e004      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8003aba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003abe:	fab3 f383 	clz	r3, r3
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d106      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff fccf 	bl	8003474 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2101      	movs	r1, #1
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff fcb3 	bl	8003448 <LL_ADC_GetOffsetChannel>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x1ba>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2101      	movs	r1, #1
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff fca8 	bl	8003448 <LL_ADC_GetOffsetChannel>
 8003af8:	4603      	mov	r3, r0
 8003afa:	0e9b      	lsrs	r3, r3, #26
 8003afc:	f003 021f 	and.w	r2, r3, #31
 8003b00:	e01e      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x1f8>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2101      	movs	r1, #1
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fc9d 	bl	8003448 <LL_ADC_GetOffsetChannel>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003b20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003b28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003b30:	2320      	movs	r3, #32
 8003b32:	e004      	b.n	8003b3e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003b34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b38:	fab3 f383 	clz	r3, r3
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d105      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x210>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	0e9b      	lsrs	r3, r3, #26
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	e018      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x242>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b64:	fa93 f3a3 	rbit	r3, r3
 8003b68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003b6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003b7c:	2320      	movs	r3, #32
 8003b7e:	e004      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003b80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b84:	fab3 f383 	clz	r3, r3
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d106      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2200      	movs	r2, #0
 8003b94:	2101      	movs	r1, #1
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff fc6c 	bl	8003474 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2102      	movs	r1, #2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fc50 	bl	8003448 <LL_ADC_GetOffsetChannel>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x280>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fc45 	bl	8003448 <LL_ADC_GetOffsetChannel>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	0e9b      	lsrs	r3, r3, #26
 8003bc2:	f003 021f 	and.w	r2, r3, #31
 8003bc6:	e01e      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x2be>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2102      	movs	r1, #2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fc3a 	bl	8003448 <LL_ADC_GetOffsetChannel>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003be6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8003bf6:	2320      	movs	r3, #32
 8003bf8:	e004      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d105      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x2d6>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	0e9b      	lsrs	r3, r3, #26
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	e016      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x304>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003c30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003c36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003c3e:	2320      	movs	r3, #32
 8003c40:	e004      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c46:	fab3 f383 	clz	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d106      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2200      	movs	r2, #0
 8003c56:	2102      	movs	r1, #2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fc0b 	bl	8003474 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2103      	movs	r1, #3
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fbef 	bl	8003448 <LL_ADC_GetOffsetChannel>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <HAL_ADC_ConfigChannel+0x342>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2103      	movs	r1, #3
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff fbe4 	bl	8003448 <LL_ADC_GetOffsetChannel>
 8003c80:	4603      	mov	r3, r0
 8003c82:	0e9b      	lsrs	r3, r3, #26
 8003c84:	f003 021f 	and.w	r2, r3, #31
 8003c88:	e017      	b.n	8003cba <HAL_ADC_ConfigChannel+0x372>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2103      	movs	r1, #3
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fbd9 	bl	8003448 <LL_ADC_GetOffsetChannel>
 8003c96:	4603      	mov	r3, r0
 8003c98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c9c:	fa93 f3a3 	rbit	r3, r3
 8003ca0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003ca2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ca4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003ca6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003cac:	2320      	movs	r3, #32
 8003cae:	e003      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003cb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cb2:	fab3 f383 	clz	r3, r3
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	461a      	mov	r2, r3
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d105      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x38a>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	0e9b      	lsrs	r3, r3, #26
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	e011      	b.n	8003cf6 <HAL_ADC_ConfigChannel+0x3ae>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cda:	fa93 f3a3 	rbit	r3, r3
 8003cde:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003ce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ce2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003cea:	2320      	movs	r3, #32
 8003cec:	e003      	b.n	8003cf6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003cee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cf0:	fab3 f383 	clz	r3, r3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d106      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2103      	movs	r1, #3
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fbb6 	bl	8003474 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fc95 	bl	800363c <LL_ADC_IsEnabled>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f040 81c2 	bne.w	800409e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6819      	ldr	r1, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	461a      	mov	r2, r3
 8003d28:	f7ff fc16 	bl	8003558 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4a8e      	ldr	r2, [pc, #568]	@ (8003f6c <HAL_ADC_ConfigChannel+0x624>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	f040 8130 	bne.w	8003f98 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10b      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x418>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	0e9b      	lsrs	r3, r3, #26
 8003d4e:	3301      	adds	r3, #1
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	2b09      	cmp	r3, #9
 8003d56:	bf94      	ite	ls
 8003d58:	2301      	movls	r3, #1
 8003d5a:	2300      	movhi	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	e019      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x44c>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d68:	fa93 f3a3 	rbit	r3, r3
 8003d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003d6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d70:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003d72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003d78:	2320      	movs	r3, #32
 8003d7a:	e003      	b.n	8003d84 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003d7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d7e:	fab3 f383 	clz	r3, r3
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	3301      	adds	r3, #1
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	2b09      	cmp	r3, #9
 8003d8c:	bf94      	ite	ls
 8003d8e:	2301      	movls	r3, #1
 8003d90:	2300      	movhi	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d079      	beq.n	8003e8c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d107      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x46c>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	0e9b      	lsrs	r3, r3, #26
 8003daa:	3301      	adds	r3, #1
 8003dac:	069b      	lsls	r3, r3, #26
 8003dae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003db2:	e015      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x498>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dbc:	fa93 f3a3 	rbit	r3, r3
 8003dc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dc4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003dcc:	2320      	movs	r3, #32
 8003dce:	e003      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd2:	fab3 f383 	clz	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	3301      	adds	r3, #1
 8003dda:	069b      	lsls	r3, r3, #26
 8003ddc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d109      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x4b8>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	0e9b      	lsrs	r3, r3, #26
 8003df2:	3301      	adds	r3, #1
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	2101      	movs	r1, #1
 8003dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfe:	e017      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x4e8>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e08:	fa93 f3a3 	rbit	r3, r3
 8003e0c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e10:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003e18:	2320      	movs	r3, #32
 8003e1a:	e003      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003e1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	3301      	adds	r3, #1
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e30:	ea42 0103 	orr.w	r1, r2, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x50e>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	0e9b      	lsrs	r3, r3, #26
 8003e46:	3301      	adds	r3, #1
 8003e48:	f003 021f 	and.w	r2, r3, #31
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	4413      	add	r3, r2
 8003e52:	051b      	lsls	r3, r3, #20
 8003e54:	e018      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x540>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5e:	fa93 f3a3 	rbit	r3, r3
 8003e62:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003e6e:	2320      	movs	r3, #32
 8003e70:	e003      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e74:	fab3 f383 	clz	r3, r3
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	f003 021f 	and.w	r2, r3, #31
 8003e80:	4613      	mov	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	e080      	b.n	8003f8e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d107      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x560>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	0e9b      	lsrs	r3, r3, #26
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	069b      	lsls	r3, r3, #26
 8003ea2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ea6:	e015      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x58c>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb0:	fa93 f3a3 	rbit	r3, r3
 8003eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003ec0:	2320      	movs	r3, #32
 8003ec2:	e003      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec6:	fab3 f383 	clz	r3, r3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	3301      	adds	r3, #1
 8003ece:	069b      	lsls	r3, r3, #26
 8003ed0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d109      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x5ac>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	0e9b      	lsrs	r3, r3, #26
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2101      	movs	r1, #1
 8003eee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef2:	e017      	b.n	8003f24 <HAL_ADC_ConfigChannel+0x5dc>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	fa93 f3a3 	rbit	r3, r3
 8003f00:	61fb      	str	r3, [r7, #28]
  return result;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003f0c:	2320      	movs	r3, #32
 8003f0e:	e003      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	fab3 f383 	clz	r3, r3
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	3301      	adds	r3, #1
 8003f1a:	f003 031f 	and.w	r3, r3, #31
 8003f1e:	2101      	movs	r1, #1
 8003f20:	fa01 f303 	lsl.w	r3, r1, r3
 8003f24:	ea42 0103 	orr.w	r1, r2, r3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10d      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x608>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	0e9b      	lsrs	r3, r3, #26
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	f003 021f 	and.w	r2, r3, #31
 8003f40:	4613      	mov	r3, r2
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	4413      	add	r3, r2
 8003f46:	3b1e      	subs	r3, #30
 8003f48:	051b      	lsls	r3, r3, #20
 8003f4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f4e:	e01d      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x644>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	fa93 f3a3 	rbit	r3, r3
 8003f5c:	613b      	str	r3, [r7, #16]
  return result;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d103      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003f68:	2320      	movs	r3, #32
 8003f6a:	e005      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x630>
 8003f6c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	fab3 f383 	clz	r3, r3
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	3301      	adds	r3, #1
 8003f7a:	f003 021f 	and.w	r2, r3, #31
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	3b1e      	subs	r3, #30
 8003f86:	051b      	lsls	r3, r3, #20
 8003f88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f8c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f92:	4619      	mov	r1, r3
 8003f94:	f7ff fab5 	bl	8003502 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	4b45      	ldr	r3, [pc, #276]	@ (80040b4 <HAL_ADC_ConfigChannel+0x76c>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d07c      	beq.n	800409e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fa4:	4844      	ldr	r0, [pc, #272]	@ (80040b8 <HAL_ADC_ConfigChannel+0x770>)
 8003fa6:	f7ff fa1d 	bl	80033e4 <LL_ADC_GetCommonPathInternalCh>
 8003faa:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fae:	4843      	ldr	r0, [pc, #268]	@ (80040bc <HAL_ADC_ConfigChannel+0x774>)
 8003fb0:	f7ff fb44 	bl	800363c <LL_ADC_IsEnabled>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d15e      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a40      	ldr	r2, [pc, #256]	@ (80040c0 <HAL_ADC_ConfigChannel+0x778>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d127      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x6cc>
 8003fc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d121      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a39      	ldr	r2, [pc, #228]	@ (80040bc <HAL_ADC_ConfigChannel+0x774>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d161      	bne.n	800409e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003fda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fde:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4834      	ldr	r0, [pc, #208]	@ (80040b8 <HAL_ADC_ConfigChannel+0x770>)
 8003fe6:	f7ff f9ea 	bl	80033be <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fea:	4b36      	ldr	r3, [pc, #216]	@ (80040c4 <HAL_ADC_ConfigChannel+0x77c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	099b      	lsrs	r3, r3, #6
 8003ff0:	4a35      	ldr	r2, [pc, #212]	@ (80040c8 <HAL_ADC_ConfigChannel+0x780>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	099b      	lsrs	r3, r3, #6
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004004:	e002      	b.n	800400c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3b01      	subs	r3, #1
 800400a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f9      	bne.n	8004006 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004012:	e044      	b.n	800409e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2c      	ldr	r2, [pc, #176]	@ (80040cc <HAL_ADC_ConfigChannel+0x784>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d113      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x6fe>
 800401e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004022:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a23      	ldr	r2, [pc, #140]	@ (80040bc <HAL_ADC_ConfigChannel+0x774>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d134      	bne.n	800409e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004038:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800403c:	4619      	mov	r1, r3
 800403e:	481e      	ldr	r0, [pc, #120]	@ (80040b8 <HAL_ADC_ConfigChannel+0x770>)
 8004040:	f7ff f9bd 	bl	80033be <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004044:	e02b      	b.n	800409e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a21      	ldr	r2, [pc, #132]	@ (80040d0 <HAL_ADC_ConfigChannel+0x788>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d126      	bne.n	800409e <HAL_ADC_ConfigChannel+0x756>
 8004050:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004054:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d120      	bne.n	800409e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a16      	ldr	r2, [pc, #88]	@ (80040bc <HAL_ADC_ConfigChannel+0x774>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d11b      	bne.n	800409e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004066:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800406a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800406e:	4619      	mov	r1, r3
 8004070:	4811      	ldr	r0, [pc, #68]	@ (80040b8 <HAL_ADC_ConfigChannel+0x770>)
 8004072:	f7ff f9a4 	bl	80033be <LL_ADC_SetCommonPathInternalCh>
 8004076:	e012      	b.n	800409e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407c:	f043 0220 	orr.w	r2, r3, #32
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800408a:	e008      	b.n	800409e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004090:	f043 0220 	orr.w	r2, r3, #32
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80040a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	37d8      	adds	r7, #216	@ 0xd8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	80080000 	.word	0x80080000
 80040b8:	50040300 	.word	0x50040300
 80040bc:	50040000 	.word	0x50040000
 80040c0:	c7520000 	.word	0xc7520000
 80040c4:	20000008 	.word	0x20000008
 80040c8:	053e2d63 	.word	0x053e2d63
 80040cc:	cb840000 	.word	0xcb840000
 80040d0:	80000001 	.word	0x80000001

080040d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004118 <__NVIC_SetPriorityGrouping+0x44>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040f0:	4013      	ands	r3, r2
 80040f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004106:	4a04      	ldr	r2, [pc, #16]	@ (8004118 <__NVIC_SetPriorityGrouping+0x44>)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	60d3      	str	r3, [r2, #12]
}
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	e000ed00 	.word	0xe000ed00

0800411c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004120:	4b04      	ldr	r3, [pc, #16]	@ (8004134 <__NVIC_GetPriorityGrouping+0x18>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	0a1b      	lsrs	r3, r3, #8
 8004126:	f003 0307 	and.w	r3, r3, #7
}
 800412a:	4618      	mov	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	e000ed00 	.word	0xe000ed00

08004138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004146:	2b00      	cmp	r3, #0
 8004148:	db0b      	blt.n	8004162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	f003 021f 	and.w	r2, r3, #31
 8004150:	4907      	ldr	r1, [pc, #28]	@ (8004170 <__NVIC_EnableIRQ+0x38>)
 8004152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	2001      	movs	r0, #1
 800415a:	fa00 f202 	lsl.w	r2, r0, r2
 800415e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	e000e100 	.word	0xe000e100

08004174 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	2b00      	cmp	r3, #0
 8004184:	db0c      	blt.n	80041a0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	f003 021f 	and.w	r2, r3, #31
 800418c:	4907      	ldr	r1, [pc, #28]	@ (80041ac <__NVIC_SetPendingIRQ+0x38>)
 800418e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	2001      	movs	r0, #1
 8004196:	fa00 f202 	lsl.w	r2, r0, r2
 800419a:	3340      	adds	r3, #64	@ 0x40
 800419c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	e000e100 	.word	0xe000e100

080041b0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	db0c      	blt.n	80041dc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	f003 021f 	and.w	r2, r3, #31
 80041c8:	4907      	ldr	r1, [pc, #28]	@ (80041e8 <__NVIC_ClearPendingIRQ+0x38>)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2001      	movs	r0, #1
 80041d2:	fa00 f202 	lsl.w	r2, r0, r2
 80041d6:	3360      	adds	r3, #96	@ 0x60
 80041d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	e000e100 	.word	0xe000e100

080041ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	6039      	str	r1, [r7, #0]
 80041f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	db0a      	blt.n	8004216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	490c      	ldr	r1, [pc, #48]	@ (8004238 <__NVIC_SetPriority+0x4c>)
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	0112      	lsls	r2, r2, #4
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	440b      	add	r3, r1
 8004210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004214:	e00a      	b.n	800422c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4908      	ldr	r1, [pc, #32]	@ (800423c <__NVIC_SetPriority+0x50>)
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	3b04      	subs	r3, #4
 8004224:	0112      	lsls	r2, r2, #4
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	440b      	add	r3, r1
 800422a:	761a      	strb	r2, [r3, #24]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	e000e100 	.word	0xe000e100
 800423c:	e000ed00 	.word	0xe000ed00

08004240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004240:	b480      	push	{r7}
 8004242:	b089      	sub	sp, #36	@ 0x24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f1c3 0307 	rsb	r3, r3, #7
 800425a:	2b04      	cmp	r3, #4
 800425c:	bf28      	it	cs
 800425e:	2304      	movcs	r3, #4
 8004260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3304      	adds	r3, #4
 8004266:	2b06      	cmp	r3, #6
 8004268:	d902      	bls.n	8004270 <NVIC_EncodePriority+0x30>
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3b03      	subs	r3, #3
 800426e:	e000      	b.n	8004272 <NVIC_EncodePriority+0x32>
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004274:	f04f 32ff 	mov.w	r2, #4294967295
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	401a      	ands	r2, r3
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004288:	f04f 31ff 	mov.w	r1, #4294967295
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	fa01 f303 	lsl.w	r3, r1, r3
 8004292:	43d9      	mvns	r1, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004298:	4313      	orrs	r3, r2
         );
}
 800429a:	4618      	mov	r0, r3
 800429c:	3724      	adds	r7, #36	@ 0x24
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042b8:	d301      	bcc.n	80042be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ba:	2301      	movs	r3, #1
 80042bc:	e00f      	b.n	80042de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042be:	4a0a      	ldr	r2, [pc, #40]	@ (80042e8 <SysTick_Config+0x40>)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042c6:	210f      	movs	r1, #15
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295
 80042cc:	f7ff ff8e 	bl	80041ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042d0:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <SysTick_Config+0x40>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042d6:	4b04      	ldr	r3, [pc, #16]	@ (80042e8 <SysTick_Config+0x40>)
 80042d8:	2207      	movs	r2, #7
 80042da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	e000e010 	.word	0xe000e010

080042ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff feed 	bl	80040d4 <__NVIC_SetPriorityGrouping>
}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b086      	sub	sp, #24
 8004306:	af00      	add	r7, sp, #0
 8004308:	4603      	mov	r3, r0
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004310:	f7ff ff04 	bl	800411c <__NVIC_GetPriorityGrouping>
 8004314:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	6978      	ldr	r0, [r7, #20]
 800431c:	f7ff ff90 	bl	8004240 <NVIC_EncodePriority>
 8004320:	4602      	mov	r2, r0
 8004322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004326:	4611      	mov	r1, r2
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff ff5f 	bl	80041ec <__NVIC_SetPriority>
}
 800432e:	bf00      	nop
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	4603      	mov	r3, r0
 800433e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fef7 	bl	8004138 <__NVIC_EnableIRQ>
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff ffa4 	bl	80042a8 <SysTick_Config>
 8004360:	4603      	mov	r3, r0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	4603      	mov	r3, r0
 8004372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fefb 	bl	8004174 <__NVIC_SetPendingIRQ>
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	4603      	mov	r3, r0
 800438e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff ff0b 	bl	80041b0 <__NVIC_ClearPendingIRQ>
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e054      	b.n	8004460 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	7f5b      	ldrb	r3, [r3, #29]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d105      	bne.n	80043cc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fe fa80 	bl	80028cc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	791b      	ldrb	r3, [r3, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10c      	bne.n	80043f4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a22      	ldr	r2, [pc, #136]	@ (8004468 <HAL_CRC_Init+0xc4>)
 80043e0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0218 	bic.w	r2, r2, #24
 80043f0:	609a      	str	r2, [r3, #8]
 80043f2:	e00c      	b.n	800440e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6899      	ldr	r1, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	461a      	mov	r2, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f834 	bl	800446c <HAL_CRCEx_Polynomial_Set>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e028      	b.n	8004460 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	795b      	ldrb	r3, [r3, #5]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d105      	bne.n	8004422 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f04f 32ff 	mov.w	r2, #4294967295
 800441e:	611a      	str	r2, [r3, #16]
 8004420:	e004      	b.n	800442c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6912      	ldr	r2, [r2, #16]
 800442a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695a      	ldr	r2, [r3, #20]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699a      	ldr	r2, [r3, #24]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	04c11db7 	.word	0x04c11db7

0800446c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800447c:	231f      	movs	r3, #31
 800447e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d102      	bne.n	8004490 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	75fb      	strb	r3, [r7, #23]
 800448e:	e063      	b.n	8004558 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004490:	bf00      	nop
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1e5a      	subs	r2, r3, #1
 8004496:	613a      	str	r2, [r7, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <HAL_CRCEx_Polynomial_Set+0x44>
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b18      	cmp	r3, #24
 80044b4:	d846      	bhi.n	8004544 <HAL_CRCEx_Polynomial_Set+0xd8>
 80044b6:	a201      	add	r2, pc, #4	@ (adr r2, 80044bc <HAL_CRCEx_Polynomial_Set+0x50>)
 80044b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044bc:	0800454b 	.word	0x0800454b
 80044c0:	08004545 	.word	0x08004545
 80044c4:	08004545 	.word	0x08004545
 80044c8:	08004545 	.word	0x08004545
 80044cc:	08004545 	.word	0x08004545
 80044d0:	08004545 	.word	0x08004545
 80044d4:	08004545 	.word	0x08004545
 80044d8:	08004545 	.word	0x08004545
 80044dc:	08004539 	.word	0x08004539
 80044e0:	08004545 	.word	0x08004545
 80044e4:	08004545 	.word	0x08004545
 80044e8:	08004545 	.word	0x08004545
 80044ec:	08004545 	.word	0x08004545
 80044f0:	08004545 	.word	0x08004545
 80044f4:	08004545 	.word	0x08004545
 80044f8:	08004545 	.word	0x08004545
 80044fc:	0800452d 	.word	0x0800452d
 8004500:	08004545 	.word	0x08004545
 8004504:	08004545 	.word	0x08004545
 8004508:	08004545 	.word	0x08004545
 800450c:	08004545 	.word	0x08004545
 8004510:	08004545 	.word	0x08004545
 8004514:	08004545 	.word	0x08004545
 8004518:	08004545 	.word	0x08004545
 800451c:	08004521 	.word	0x08004521
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	2b06      	cmp	r3, #6
 8004524:	d913      	bls.n	800454e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800452a:	e010      	b.n	800454e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b07      	cmp	r3, #7
 8004530:	d90f      	bls.n	8004552 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004536:	e00c      	b.n	8004552 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	2b0f      	cmp	r3, #15
 800453c:	d90b      	bls.n	8004556 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004542:	e008      	b.n	8004556 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	75fb      	strb	r3, [r7, #23]
        break;
 8004548:	e006      	b.n	8004558 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800454a:	bf00      	nop
 800454c:	e004      	b.n	8004558 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800454e:	bf00      	nop
 8004550:	e002      	b.n	8004558 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004552:	bf00      	nop
 8004554:	e000      	b.n	8004558 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004556:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004558:	7dfb      	ldrb	r3, [r7, #23]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10d      	bne.n	800457a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f023 0118 	bic.w	r1, r3, #24
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	430a      	orrs	r2, r1
 8004578:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800457a:	7dfb      	ldrb	r3, [r7, #23]
}
 800457c:	4618      	mov	r0, r3
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e08e      	b.n	80046b8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	4b47      	ldr	r3, [pc, #284]	@ (80046c0 <HAL_DMA_Init+0x138>)
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d80f      	bhi.n	80045c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	4b45      	ldr	r3, [pc, #276]	@ (80046c4 <HAL_DMA_Init+0x13c>)
 80045ae:	4413      	add	r3, r2
 80045b0:	4a45      	ldr	r2, [pc, #276]	@ (80046c8 <HAL_DMA_Init+0x140>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	091b      	lsrs	r3, r3, #4
 80045b8:	009a      	lsls	r2, r3, #2
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a42      	ldr	r2, [pc, #264]	@ (80046cc <HAL_DMA_Init+0x144>)
 80045c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80045c4:	e00e      	b.n	80045e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	4b40      	ldr	r3, [pc, #256]	@ (80046d0 <HAL_DMA_Init+0x148>)
 80045ce:	4413      	add	r3, r2
 80045d0:	4a3d      	ldr	r2, [pc, #244]	@ (80046c8 <HAL_DMA_Init+0x140>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	091b      	lsrs	r3, r3, #4
 80045d8:	009a      	lsls	r2, r3, #2
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a3c      	ldr	r2, [pc, #240]	@ (80046d4 <HAL_DMA_Init+0x14c>)
 80045e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80045fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004608:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004614:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004620:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fa74 	bl	8004b24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004644:	d102      	bne.n	800464c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004654:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004658:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004662:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d010      	beq.n	800468e <HAL_DMA_Init+0x106>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b04      	cmp	r3, #4
 8004672:	d80c      	bhi.n	800468e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fa93 	bl	8004ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800468a:	605a      	str	r2, [r3, #4]
 800468c:	e008      	b.n	80046a0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40020407 	.word	0x40020407
 80046c4:	bffdfff8 	.word	0xbffdfff8
 80046c8:	cccccccd 	.word	0xcccccccd
 80046cc:	40020000 	.word	0x40020000
 80046d0:	bffdfbf8 	.word	0xbffdfbf8
 80046d4:	40020400 	.word	0x40020400

080046d8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_DMA_Start_IT+0x20>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e066      	b.n	80047c6 <HAL_DMA_Start_IT+0xee>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b01      	cmp	r3, #1
 800470a:	d155      	bne.n	80047b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0201 	bic.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f9b9 	bl	8004aa8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473a:	2b00      	cmp	r3, #0
 800473c:	d008      	beq.n	8004750 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 020e 	orr.w	r2, r2, #14
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e00f      	b.n	8004770 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0204 	bic.w	r2, r2, #4
 800475e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 020a 	orr.w	r2, r2, #10
 800476e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004788:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800478c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004792:	2b00      	cmp	r3, #0
 8004794:	d007      	beq.n	80047a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e005      	b.n	80047c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
 80047c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e04f      	b.n	8004880 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d008      	beq.n	80047fe <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2204      	movs	r2, #4
 80047f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e040      	b.n	8004880 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 020e 	bic.w	r2, r2, #14
 800480c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004818:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800481c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004832:	f003 021c 	and.w	r2, r3, #28
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	2101      	movs	r1, #1
 800483c:	fa01 f202 	lsl.w	r2, r1, r2
 8004840:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800484a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00c      	beq.n	800486e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004862:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800486c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d005      	beq.n	80048b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2204      	movs	r2, #4
 80048a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
 80048ae:	e047      	b.n	8004940 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 020e 	bic.w	r2, r2, #14
 80048be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0201 	bic.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e4:	f003 021c 	and.w	r2, r3, #28
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ec:	2101      	movs	r1, #1
 80048ee:	fa01 f202 	lsl.w	r2, r1, r2
 80048f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00c      	beq.n	8004920 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004910:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004914:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800491e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	4798      	blx	r3
    }
  }
  return status;
 8004940:	7bfb      	ldrb	r3, [r7, #15]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	f003 031c 	and.w	r3, r3, #28
 800496a:	2204      	movs	r2, #4
 800496c:	409a      	lsls	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4013      	ands	r3, r2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d026      	beq.n	80049c4 <HAL_DMA_IRQHandler+0x7a>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d021      	beq.n	80049c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d107      	bne.n	800499e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0204 	bic.w	r2, r2, #4
 800499c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a2:	f003 021c 	and.w	r2, r3, #28
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	2104      	movs	r1, #4
 80049ac:	fa01 f202 	lsl.w	r2, r1, r2
 80049b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d071      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80049c2:	e06c      	b.n	8004a9e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c8:	f003 031c 	and.w	r3, r3, #28
 80049cc:	2202      	movs	r2, #2
 80049ce:	409a      	lsls	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d02e      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xec>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d029      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10b      	bne.n	8004a08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 020a 	bic.w	r2, r2, #10
 80049fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0c:	f003 021c 	and.w	r2, r3, #28
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a14:	2102      	movs	r1, #2
 8004a16:	fa01 f202 	lsl.w	r2, r1, r2
 8004a1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d038      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a34:	e033      	b.n	8004a9e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3a:	f003 031c 	and.w	r3, r3, #28
 8004a3e:	2208      	movs	r2, #8
 8004a40:	409a      	lsls	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d02a      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0x156>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d025      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 020e 	bic.w	r2, r2, #14
 8004a62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a68:	f003 021c 	and.w	r2, r3, #28
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a70:	2101      	movs	r1, #1
 8004a72:	fa01 f202 	lsl.w	r2, r1, r2
 8004a76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d004      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
}
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004abe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d004      	beq.n	8004ad2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ad0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad6:	f003 021c 	and.w	r2, r3, #28
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ade:	2101      	movs	r1, #1
 8004ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b10      	cmp	r3, #16
 8004af4:	d108      	bne.n	8004b08 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b06:	e007      	b.n	8004b18 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	60da      	str	r2, [r3, #12]
}
 8004b18:	bf00      	nop
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	4b17      	ldr	r3, [pc, #92]	@ (8004b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d80a      	bhi.n	8004b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3c:	089b      	lsrs	r3, r3, #2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b44:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6493      	str	r3, [r2, #72]	@ 0x48
 8004b4c:	e007      	b.n	8004b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b52:	089b      	lsrs	r3, r3, #2
 8004b54:	009a      	lsls	r2, r3, #2
 8004b56:	4b0f      	ldr	r3, [pc, #60]	@ (8004b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004b58:	4413      	add	r3, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	3b08      	subs	r3, #8
 8004b66:	4a0c      	ldr	r2, [pc, #48]	@ (8004b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004b68:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6c:	091b      	lsrs	r3, r3, #4
 8004b6e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a0a      	ldr	r2, [pc, #40]	@ (8004b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004b74:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f003 031f 	and.w	r3, r3, #31
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b84:	bf00      	nop
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	40020407 	.word	0x40020407
 8004b94:	4002081c 	.word	0x4002081c
 8004b98:	cccccccd 	.word	0xcccccccd
 8004b9c:	40020880 	.word	0x40020880

08004ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	461a      	mov	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a09      	ldr	r2, [pc, #36]	@ (8004be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004bc4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2201      	movs	r2, #1
 8004bd0:	409a      	lsls	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	1000823f 	.word	0x1000823f
 8004be8:	40020940 	.word	0x40020940

08004bec <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bfa:	e14c      	b.n	8004e96 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	2101      	movs	r1, #1
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	fa01 f303 	lsl.w	r3, r1, r3
 8004c08:	4013      	ands	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 813e 	beq.w	8004e90 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d005      	beq.n	8004c2c <HAL_GPIO_Init+0x40>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d130      	bne.n	8004c8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	2203      	movs	r2, #3
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c62:	2201      	movs	r2, #1
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	091b      	lsrs	r3, r3, #4
 8004c78:	f003 0201 	and.w	r2, r3, #1
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d017      	beq.n	8004cca <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d123      	bne.n	8004d1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	08da      	lsrs	r2, r3, #3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3208      	adds	r2, #8
 8004cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	220f      	movs	r2, #15
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	691a      	ldr	r2, [r3, #16]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	08da      	lsrs	r2, r3, #3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3208      	adds	r2, #8
 8004d18:	6939      	ldr	r1, [r7, #16]
 8004d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	2203      	movs	r2, #3
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4013      	ands	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f003 0203 	and.w	r2, r3, #3
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 8098 	beq.w	8004e90 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004d60:	4a54      	ldr	r2, [pc, #336]	@ (8004eb4 <HAL_GPIO_Init+0x2c8>)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	089b      	lsrs	r3, r3, #2
 8004d66:	3302      	adds	r3, #2
 8004d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f003 0303 	and.w	r3, r3, #3
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	220f      	movs	r2, #15
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4013      	ands	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004d8a:	d019      	beq.n	8004dc0 <HAL_GPIO_Init+0x1d4>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a4a      	ldr	r2, [pc, #296]	@ (8004eb8 <HAL_GPIO_Init+0x2cc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d013      	beq.n	8004dbc <HAL_GPIO_Init+0x1d0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a49      	ldr	r2, [pc, #292]	@ (8004ebc <HAL_GPIO_Init+0x2d0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00d      	beq.n	8004db8 <HAL_GPIO_Init+0x1cc>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a48      	ldr	r2, [pc, #288]	@ (8004ec0 <HAL_GPIO_Init+0x2d4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d007      	beq.n	8004db4 <HAL_GPIO_Init+0x1c8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a47      	ldr	r2, [pc, #284]	@ (8004ec4 <HAL_GPIO_Init+0x2d8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d101      	bne.n	8004db0 <HAL_GPIO_Init+0x1c4>
 8004dac:	2304      	movs	r3, #4
 8004dae:	e008      	b.n	8004dc2 <HAL_GPIO_Init+0x1d6>
 8004db0:	2307      	movs	r3, #7
 8004db2:	e006      	b.n	8004dc2 <HAL_GPIO_Init+0x1d6>
 8004db4:	2303      	movs	r3, #3
 8004db6:	e004      	b.n	8004dc2 <HAL_GPIO_Init+0x1d6>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e002      	b.n	8004dc2 <HAL_GPIO_Init+0x1d6>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <HAL_GPIO_Init+0x1d6>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	f002 0203 	and.w	r2, r2, #3
 8004dc8:	0092      	lsls	r2, r2, #2
 8004dca:	4093      	lsls	r3, r2
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004dd2:	4938      	ldr	r1, [pc, #224]	@ (8004eb4 <HAL_GPIO_Init+0x2c8>)
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	089b      	lsrs	r3, r3, #2
 8004dd8:	3302      	adds	r3, #2
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004de0:	4b39      	ldr	r3, [pc, #228]	@ (8004ec8 <HAL_GPIO_Init+0x2dc>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	43db      	mvns	r3, r3
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4013      	ands	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e04:	4a30      	ldr	r2, [pc, #192]	@ (8004ec8 <HAL_GPIO_Init+0x2dc>)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ec8 <HAL_GPIO_Init+0x2dc>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	43db      	mvns	r3, r3
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4013      	ands	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e2e:	4a26      	ldr	r2, [pc, #152]	@ (8004ec8 <HAL_GPIO_Init+0x2dc>)
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e34:	4b24      	ldr	r3, [pc, #144]	@ (8004ec8 <HAL_GPIO_Init+0x2dc>)
 8004e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4013      	ands	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec8 <HAL_GPIO_Init+0x2dc>)
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8004e62:	4b19      	ldr	r3, [pc, #100]	@ (8004ec8 <HAL_GPIO_Init+0x2dc>)
 8004e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4013      	ands	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e88:	4a0f      	ldr	r2, [pc, #60]	@ (8004ec8 <HAL_GPIO_Init+0x2dc>)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	3301      	adds	r3, #1
 8004e94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f47f aeab 	bne.w	8004bfc <HAL_GPIO_Init+0x10>
  }
}
 8004ea6:	bf00      	nop
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40010000 	.word	0x40010000
 8004eb8:	48000400 	.word	0x48000400
 8004ebc:	48000800 	.word	0x48000800
 8004ec0:	48000c00 	.word	0x48000c00
 8004ec4:	48001000 	.word	0x48001000
 8004ec8:	58000800 	.word	0x58000800

08004ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	807b      	strh	r3, [r7, #2]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004edc:	787b      	ldrb	r3, [r7, #1]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ee2:	887a      	ldrh	r2, [r7, #2]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ee8:	e002      	b.n	8004ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004eea:	887a      	ldrh	r2, [r7, #2]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004f02:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <HAL_HSEM_IRQHandler+0x30>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004f08:	4b08      	ldr	r3, [pc, #32]	@ (8004f2c <HAL_HSEM_IRQHandler+0x30>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	4906      	ldr	r1, [pc, #24]	@ (8004f2c <HAL_HSEM_IRQHandler+0x30>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004f16:	4a05      	ldr	r2, [pc, #20]	@ (8004f2c <HAL_HSEM_IRQHandler+0x30>)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f807 	bl	8004f30 <HAL_HSEM_FreeCallback>
}
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	58001500 	.word	0x58001500

08004f30 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e08d      	b.n	8005072 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fd fcc2 	bl	80028f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2224      	movs	r2, #36	@ 0x24
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0201 	bic.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fa4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d107      	bne.n	8004fbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	e006      	b.n	8004fcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004fca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d108      	bne.n	8004fe6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fe2:	605a      	str	r2, [r3, #4]
 8004fe4:	e007      	b.n	8004ff6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ff4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005004:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005008:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005018:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69d9      	ldr	r1, [r3, #28]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1a      	ldr	r2, [r3, #32]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b20      	cmp	r3, #32
 800508e:	d138      	bne.n	8005102 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800509a:	2302      	movs	r3, #2
 800509c:	e032      	b.n	8005104 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2224      	movs	r2, #36	@ 0x24
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0201 	bic.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6819      	ldr	r1, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0201 	orr.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e000      	b.n	8005104 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005102:	2302      	movs	r3, #2
  }
}
 8005104:	4618      	mov	r0, r3
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b20      	cmp	r3, #32
 8005124:	d139      	bne.n	800519a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005130:	2302      	movs	r3, #2
 8005132:	e033      	b.n	800519c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2224      	movs	r2, #36	@ 0x24
 8005140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0201 	bic.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005162:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0201 	orr.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	e000      	b.n	800519c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800519a:	2302      	movs	r3, #2
  }
}
 800519c:	4618      	mov	r0, r3
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01e      	beq.n	80051f8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80051ba:	4b13      	ldr	r3, [pc, #76]	@ (8005208 <HAL_IPCC_Init+0x60>)
 80051bc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d102      	bne.n	80051d0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fd fc36 	bl	8002a3c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80051d0:	68b8      	ldr	r0, [r7, #8]
 80051d2:	f000 f85b 	bl	800528c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f82c 	bl	8005240 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80051f6:	e001      	b.n	80051fc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	58000c00 	.word	0x58000c00

0800520c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	4613      	mov	r3, r2
 8005218:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800521a:	bf00      	nop
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005226:	b480      	push	{r7}
 8005228:	b085      	sub	sp, #20
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	4613      	mov	r3, r2
 8005232:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	e00f      	b.n	800526e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	4a0b      	ldr	r2, [pc, #44]	@ (8005284 <IPCC_SetDefaultCallbacks+0x44>)
 8005258:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3306      	adds	r3, #6
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	4a08      	ldr	r2, [pc, #32]	@ (8005288 <IPCC_SetDefaultCallbacks+0x48>)
 8005266:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3301      	adds	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b05      	cmp	r3, #5
 8005272:	d9ec      	bls.n	800524e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	0800520d 	.word	0x0800520d
 8005288:	08005227 	.word	0x08005227

0800528c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80052a0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	223f      	movs	r2, #63	@ 0x3f
 80052a6:	609a      	str	r2, [r3, #8]
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e08f      	b.n	80053e6 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d106      	bne.n	80052e6 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7fd fbcf 	bl	8002a84 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2202      	movs	r2, #2
 80052ea:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d004      	beq.n	8005308 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005302:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005306:	d103      	bne.n	8005310 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 031e 	bic.w	r3, r3, #30
 800530e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005318:	4293      	cmp	r3, r2
 800531a:	d005      	beq.n	8005328 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005322:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005326:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4b31      	ldr	r3, [pc, #196]	@ (80053f0 <HAL_LPTIM_Init+0x13c>)
 800532c:	4013      	ands	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005338:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800533e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8005344:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 800534a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d107      	bne.n	800536a <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005362:	4313      	orrs	r3, r2
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d004      	beq.n	800537c <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005376:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800537a:	d107      	bne.n	800538c <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005384:	4313      	orrs	r3, r2
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005394:	4293      	cmp	r3, r2
 8005396:	d00a      	beq.n	80053ae <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80053a0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80053a6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a0e      	ldr	r2, [pc, #56]	@ (80053f4 <HAL_LPTIM_Init+0x140>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d108      	bne.n	80053d2 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	621a      	str	r2, [r3, #32]
 80053d0:	e004      	b.n	80053dc <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053da:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	ff19f1fe 	.word	0xff19f1fe
 80053f4:	40007c00 	.word	0x40007c00

080053f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e0c0      	b.n	800558c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fd fd5a 	bl	8002ed8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2203      	movs	r2, #3
 8005428:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f004 fc65 	bl	8009d00 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005436:	2300      	movs	r3, #0
 8005438:	73fb      	strb	r3, [r7, #15]
 800543a:	e03e      	b.n	80054ba <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800543c:	7bfa      	ldrb	r2, [r7, #15]
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	440b      	add	r3, r1
 800544a:	3311      	adds	r3, #17
 800544c:	2201      	movs	r2, #1
 800544e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005450:	7bfa      	ldrb	r2, [r7, #15]
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	440b      	add	r3, r1
 800545e:	3310      	adds	r3, #16
 8005460:	7bfa      	ldrb	r2, [r7, #15]
 8005462:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005464:	7bfa      	ldrb	r2, [r7, #15]
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	4613      	mov	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	440b      	add	r3, r1
 8005472:	3313      	adds	r3, #19
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005478:	7bfa      	ldrb	r2, [r7, #15]
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	440b      	add	r3, r1
 8005486:	3320      	adds	r3, #32
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800548c:	7bfa      	ldrb	r2, [r7, #15]
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	4613      	mov	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	440b      	add	r3, r1
 800549a:	3324      	adds	r3, #36	@ 0x24
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	440b      	add	r3, r1
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	3301      	adds	r3, #1
 80054b8:	73fb      	strb	r3, [r7, #15]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	791b      	ldrb	r3, [r3, #4]
 80054be:	7bfa      	ldrb	r2, [r7, #15]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d3bb      	bcc.n	800543c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054c4:	2300      	movs	r3, #0
 80054c6:	73fb      	strb	r3, [r7, #15]
 80054c8:	e044      	b.n	8005554 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80054ca:	7bfa      	ldrb	r2, [r7, #15]
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	440b      	add	r3, r1
 80054d8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80054e0:	7bfa      	ldrb	r2, [r7, #15]
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	440b      	add	r3, r1
 80054ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80054f2:	7bfa      	ldrb	r2, [r7, #15]
 80054f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054f6:	7bfa      	ldrb	r2, [r7, #15]
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	440b      	add	r3, r1
 8005504:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005508:	2200      	movs	r2, #0
 800550a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800550c:	7bfa      	ldrb	r2, [r7, #15]
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	4613      	mov	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	440b      	add	r3, r1
 800551a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005522:	7bfa      	ldrb	r2, [r7, #15]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	440b      	add	r3, r1
 8005530:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005538:	7bfa      	ldrb	r2, [r7, #15]
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	440b      	add	r3, r1
 8005546:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	3301      	adds	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	791b      	ldrb	r3, [r3, #4]
 8005558:	7bfa      	ldrb	r2, [r7, #15]
 800555a:	429a      	cmp	r2, r3
 800555c:	d3b5      	bcc.n	80054ca <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3304      	adds	r3, #4
 8005566:	e893 0006 	ldmia.w	r3, {r1, r2}
 800556a:	f004 fbe4 	bl	8009d36 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	7a9b      	ldrb	r3, [r3, #10]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d102      	bne.n	800558a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f805 	bl	8005594 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f043 0301 	orr.w	r3, r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	f043 0302 	orr.w	r3, r3, #2
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055ec:	4b05      	ldr	r3, [pc, #20]	@ (8005604 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a04      	ldr	r2, [pc, #16]	@ (8005604 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80055f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055f6:	6013      	str	r3, [r2, #0]
}
 80055f8:	bf00      	nop
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	58000400 	.word	0x58000400

08005608 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800560c:	4b04      	ldr	r3, [pc, #16]	@ (8005620 <HAL_PWREx_GetVoltageRange+0x18>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005614:	4618      	mov	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	58000400 	.word	0x58000400

08005624 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af02      	add	r7, sp, #8
 800562a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800562c:	f7fd fe9c 	bl	8003368 <HAL_GetTick>
 8005630:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e063      	b.n	8005704 <HAL_QSPI_Init+0xe0>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10b      	bne.n	8005660 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7fd fa5b 	bl	8002b0c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005656:	f241 3188 	movw	r1, #5000	@ 0x1388
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f858 	bl	8005710 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	3b01      	subs	r3, #1
 8005670:	021a      	lsls	r2, r3, #8
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	2120      	movs	r1, #32
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f850 	bl	800572c <QSPI_WaitFlagStateUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005690:	7afb      	ldrb	r3, [r7, #11]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d131      	bne.n	80056fa <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80056a0:	f023 0310 	bic.w	r3, r3, #16
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6852      	ldr	r2, [r2, #4]
 80056a8:	0611      	lsls	r1, r2, #24
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	68d2      	ldr	r2, [r2, #12]
 80056ae:	4311      	orrs	r1, r2
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6812      	ldr	r2, [r2, #0]
 80056b4:	430b      	orrs	r3, r1
 80056b6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	4b13      	ldr	r3, [pc, #76]	@ (800570c <HAL_QSPI_Init+0xe8>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6912      	ldr	r2, [r2, #16]
 80056c6:	0411      	lsls	r1, r2, #16
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6952      	ldr	r2, [r2, #20]
 80056cc:	4311      	orrs	r1, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6992      	ldr	r2, [r2, #24]
 80056d2:	4311      	orrs	r1, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6812      	ldr	r2, [r2, #0]
 80056d8:	430b      	orrs	r3, r1
 80056da:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8005702:	7afb      	ldrb	r3, [r7, #11]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	ffe0f8fe 	.word	0xffe0f8fe

08005710 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	4613      	mov	r3, r2
 800573a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800573c:	e01a      	b.n	8005774 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005744:	d016      	beq.n	8005774 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005746:	f7fd fe0f 	bl	8003368 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	429a      	cmp	r2, r3
 8005754:	d302      	bcc.n	800575c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2204      	movs	r2, #4
 8005760:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005768:	f043 0201 	orr.w	r2, r3, #1
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e00e      	b.n	8005792 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	4013      	ands	r3, r2
 800577e:	2b00      	cmp	r3, #0
 8005780:	bf14      	ite	ne
 8005782:	2301      	movne	r3, #1
 8005784:	2300      	moveq	r3, #0
 8005786:	b2db      	uxtb	r3, r3
 8005788:	461a      	mov	r2, r3
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	429a      	cmp	r2, r3
 800578e:	d1d6      	bne.n	800573e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <LL_RCC_HSE_IsEnabledDiv2>:
{
 800579a:	b480      	push	{r7}
 800579c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800579e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057ac:	d101      	bne.n	80057b2 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <LL_RCC_HSE_Enable>:
{
 80057be:	b480      	push	{r7}
 80057c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80057c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d0:	6013      	str	r3, [r2, #0]
}
 80057d2:	bf00      	nop
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <LL_RCC_HSE_Disable>:
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80057e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ee:	6013      	str	r3, [r2, #0]
}
 80057f0:	bf00      	nop
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <LL_RCC_HSE_IsReady>:
{
 80057fa:	b480      	push	{r7}
 80057fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80057fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005808:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800580c:	d101      	bne.n	8005812 <LL_RCC_HSE_IsReady+0x18>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <LL_RCC_HSE_IsReady+0x1a>
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <LL_RCC_HSI_Enable>:
{
 800581e:	b480      	push	{r7}
 8005820:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800582c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005830:	6013      	str	r3, [r2, #0]
}
 8005832:	bf00      	nop
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <LL_RCC_HSI_Disable>:
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800584a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800584e:	6013      	str	r3, [r2, #0]
}
 8005850:	bf00      	nop
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <LL_RCC_HSI_IsReady>:
{
 800585a:	b480      	push	{r7}
 800585c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800585e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800586c:	d101      	bne.n	8005872 <LL_RCC_HSI_IsReady+0x18>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <LL_RCC_HSI_IsReady+0x1a>
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <LL_RCC_HSI_SetCalibTrimming>:
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	061b      	lsls	r3, r3, #24
 8005894:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005898:	4313      	orrs	r3, r2
 800589a:	604b      	str	r3, [r1, #4]
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <LL_RCC_HSI48_Enable>:
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80058ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80058c0:	bf00      	nop
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <LL_RCC_HSI48_Disable>:
{
 80058ca:	b480      	push	{r7}
 80058cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80058ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058da:	f023 0301 	bic.w	r3, r3, #1
 80058de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80058e2:	bf00      	nop
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <LL_RCC_HSI48_IsReady>:
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80058f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d101      	bne.n	8005904 <LL_RCC_HSI48_IsReady+0x18>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <LL_RCC_HSI48_IsReady+0x1a>
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <LL_RCC_LSE_Enable>:
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005920:	f043 0301 	orr.w	r3, r3, #1
 8005924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <LL_RCC_LSE_Disable>:
{
 8005932:	b480      	push	{r7}
 8005934:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800593e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005942:	f023 0301 	bic.w	r3, r3, #1
 8005946:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800594a:	bf00      	nop
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <LL_RCC_LSE_EnableBypass>:
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800595c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005960:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005964:	f043 0304 	orr.w	r3, r3, #4
 8005968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800596c:	bf00      	nop
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <LL_RCC_LSE_DisableBypass>:
{
 8005976:	b480      	push	{r7}
 8005978:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800597a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800597e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005982:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005986:	f023 0304 	bic.w	r3, r3, #4
 800598a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800598e:	bf00      	nop
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <LL_RCC_LSE_IsReady>:
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800599c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d101      	bne.n	80059b0 <LL_RCC_LSE_IsReady+0x18>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <LL_RCC_LSE_IsReady+0x1a>
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <LL_RCC_LSI1_Enable>:
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80059c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059cc:	f043 0301 	orr.w	r3, r3, #1
 80059d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80059d4:	bf00      	nop
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <LL_RCC_LSI1_Disable>:
{
 80059de:	b480      	push	{r7}
 80059e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80059e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059ee:	f023 0301 	bic.w	r3, r3, #1
 80059f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80059f6:	bf00      	nop
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <LL_RCC_LSI1_IsReady>:
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d101      	bne.n	8005a18 <LL_RCC_LSI1_IsReady+0x18>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <LL_RCC_LSI1_IsReady+0x1a>
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <LL_RCC_LSI2_Enable>:
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a34:	f043 0304 	orr.w	r3, r3, #4
 8005a38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005a3c:	bf00      	nop
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <LL_RCC_LSI2_Disable>:
{
 8005a46:	b480      	push	{r7}
 8005a48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a56:	f023 0304 	bic.w	r3, r3, #4
 8005a5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005a5e:	bf00      	nop
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <LL_RCC_LSI2_IsReady>:
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005a6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d101      	bne.n	8005a80 <LL_RCC_LSI2_IsReady+0x18>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <LL_RCC_LSI2_IsReady+0x1a>
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <LL_RCC_LSI2_SetTrimming>:
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a9c:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <LL_RCC_MSI_Enable>:
{
 8005aba:	b480      	push	{r7}
 8005abc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ac8:	f043 0301 	orr.w	r3, r3, #1
 8005acc:	6013      	str	r3, [r2, #0]
}
 8005ace:	bf00      	nop
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <LL_RCC_MSI_Disable>:
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ae6:	f023 0301 	bic.w	r3, r3, #1
 8005aea:	6013      	str	r3, [r2, #0]
}
 8005aec:	bf00      	nop
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <LL_RCC_MSI_IsReady>:
{
 8005af6:	b480      	push	{r7}
 8005af8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d101      	bne.n	8005b0c <LL_RCC_MSI_IsReady+0x16>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <LL_RCC_MSI_IsReady+0x18>
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <LL_RCC_MSI_SetRange>:
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	600b      	str	r3, [r1, #0]
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <LL_RCC_MSI_GetRange>:
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b50:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2bb0      	cmp	r3, #176	@ 0xb0
 8005b56:	d901      	bls.n	8005b5c <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005b58:	23b0      	movs	r3, #176	@ 0xb0
 8005b5a:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005b5c:	687b      	ldr	r3, [r7, #4]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <LL_RCC_MSI_SetCalibTrimming>:
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	021b      	lsls	r3, r3, #8
 8005b80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b84:	4313      	orrs	r3, r2
 8005b86:	604b      	str	r3, [r1, #4]
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <LL_RCC_SetSysClkSource>:
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f023 0203 	bic.w	r2, r3, #3
 8005ba6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	608b      	str	r3, [r1, #8]
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <LL_RCC_GetSysClkSource>:
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 030c 	and.w	r3, r3, #12
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <LL_RCC_SetAHBPrescaler>:
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005be6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	608b      	str	r3, [r1, #8]
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <LL_C2_RCC_SetAHBPrescaler>:
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c08:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <LL_RCC_SetAHB4Prescaler>:
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c34:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005c38:	f023 020f 	bic.w	r2, r3, #15
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	091b      	lsrs	r3, r3, #4
 8005c40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c44:	4313      	orrs	r3, r2
 8005c46:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <LL_RCC_SetAPB1Prescaler>:
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005c5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	608b      	str	r3, [r1, #8]
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <LL_RCC_SetAPB2Prescaler>:
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	608b      	str	r3, [r1, #8]
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <LL_RCC_GetAHBPrescaler>:
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005caa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <LL_RCC_GetAHB4Prescaler>:
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <LL_RCC_GetAPB1Prescaler>:
{
 8005cda:	b480      	push	{r7}
 8005cdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <LL_RCC_GetAPB2Prescaler>:
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d1c:	6013      	str	r3, [r2, #0]
}
 8005d1e:	bf00      	nop
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d3a:	6013      	str	r3, [r2, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005d46:	b480      	push	{r7}
 8005d48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d58:	d101      	bne.n	8005d5e <LL_RCC_PLL_IsReady+0x18>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <LL_RCC_PLL_IsReady+0x1a>
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	0a1b      	lsrs	r3, r3, #8
 8005d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f003 0303 	and.w	r3, r3, #3
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dde:	d101      	bne.n	8005de4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005de0:	2301      	movs	r3, #1
 8005de2:	e000      	b.n	8005de6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005df0:	b480      	push	{r7}
 8005df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005df8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e04:	d101      	bne.n	8005e0a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005e16:	b480      	push	{r7}
 8005e18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e2a:	d101      	bne.n	8005e30 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e000      	b.n	8005e32 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005e40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e4e:	d101      	bne.n	8005e54 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e000      	b.n	8005e56 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e72:	d101      	bne.n	8005e78 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e84:	b590      	push	{r4, r7, lr}
 8005e86:	b08d      	sub	sp, #52	@ 0x34
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e363      	b.n	800655e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 808d 	beq.w	8005fbe <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ea4:	f7ff fe8a 	bl	8005bbc <LL_RCC_GetSysClkSource>
 8005ea8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005eaa:	f7ff ff83 	bl	8005db4 <LL_RCC_PLL_GetMainSource>
 8005eae:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d005      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x3e>
 8005eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb8:	2b0c      	cmp	r3, #12
 8005eba:	d147      	bne.n	8005f4c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d144      	bne.n	8005f4c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e347      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005ed2:	f7ff fe35 	bl	8005b40 <LL_RCC_MSI_GetRange>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	d914      	bls.n	8005f06 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 fd2f 	bl	8006944 <RCC_SetFlashLatencyFromMSIRange>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e336      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff fe0f 	bl	8005b18 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff fe33 	bl	8005b6a <LL_RCC_MSI_SetCalibTrimming>
 8005f04:	e013      	b.n	8005f2e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7ff fe04 	bl	8005b18 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7ff fe28 	bl	8005b6a <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fd10 	bl	8006944 <RCC_SetFlashLatencyFromMSIRange>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e317      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f2e:	f000 fcc9 	bl	80068c4 <HAL_RCC_GetHCLKFreq>
 8005f32:	4603      	mov	r3, r0
 8005f34:	4aa4      	ldr	r2, [pc, #656]	@ (80061c8 <HAL_RCC_OscConfig+0x344>)
 8005f36:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f38:	4ba4      	ldr	r3, [pc, #656]	@ (80061cc <HAL_RCC_OscConfig+0x348>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fd f9c5 	bl	80032cc <HAL_InitTick>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d039      	beq.n	8005fbc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e308      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d01e      	beq.n	8005f92 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f54:	f7ff fdb1 	bl	8005aba <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f58:	f7fd fa06 	bl	8003368 <HAL_GetTick>
 8005f5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f60:	f7fd fa02 	bl	8003368 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e2f5      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005f72:	f7ff fdc0 	bl	8005af6 <LL_RCC_MSI_IsReady>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0f1      	beq.n	8005f60 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff fdc9 	bl	8005b18 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fded 	bl	8005b6a <LL_RCC_MSI_SetCalibTrimming>
 8005f90:	e015      	b.n	8005fbe <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f92:	f7ff fda1 	bl	8005ad8 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f96:	f7fd f9e7 	bl	8003368 <HAL_GetTick>
 8005f9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f9e:	f7fd f9e3 	bl	8003368 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e2d6      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005fb0:	f7ff fda1 	bl	8005af6 <LL_RCC_MSI_IsReady>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f1      	bne.n	8005f9e <HAL_RCC_OscConfig+0x11a>
 8005fba:	e000      	b.n	8005fbe <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005fbc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d047      	beq.n	800605a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fca:	f7ff fdf7 	bl	8005bbc <LL_RCC_GetSysClkSource>
 8005fce:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fd0:	f7ff fef0 	bl	8005db4 <LL_RCC_PLL_GetMainSource>
 8005fd4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d005      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x164>
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	2b0c      	cmp	r3, #12
 8005fe0:	d108      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d105      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d134      	bne.n	800605a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e2b4      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ffc:	d102      	bne.n	8006004 <HAL_RCC_OscConfig+0x180>
 8005ffe:	f7ff fbde 	bl	80057be <LL_RCC_HSE_Enable>
 8006002:	e001      	b.n	8006008 <HAL_RCC_OscConfig+0x184>
 8006004:	f7ff fbea 	bl	80057dc <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d012      	beq.n	8006036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006010:	f7fd f9aa 	bl	8003368 <HAL_GetTick>
 8006014:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006016:	e008      	b.n	800602a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006018:	f7fd f9a6 	bl	8003368 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b64      	cmp	r3, #100	@ 0x64
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e299      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800602a:	f7ff fbe6 	bl	80057fa <LL_RCC_HSE_IsReady>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0f1      	beq.n	8006018 <HAL_RCC_OscConfig+0x194>
 8006034:	e011      	b.n	800605a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006036:	f7fd f997 	bl	8003368 <HAL_GetTick>
 800603a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800603c:	e008      	b.n	8006050 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800603e:	f7fd f993 	bl	8003368 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b64      	cmp	r3, #100	@ 0x64
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e286      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006050:	f7ff fbd3 	bl	80057fa <LL_RCC_HSE_IsReady>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1f1      	bne.n	800603e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d04c      	beq.n	8006100 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006066:	f7ff fda9 	bl	8005bbc <LL_RCC_GetSysClkSource>
 800606a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800606c:	f7ff fea2 	bl	8005db4 <LL_RCC_PLL_GetMainSource>
 8006070:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b04      	cmp	r3, #4
 8006076:	d005      	beq.n	8006084 <HAL_RCC_OscConfig+0x200>
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	2b0c      	cmp	r3, #12
 800607c:	d10e      	bne.n	800609c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d10b      	bne.n	800609c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e266      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff fbf2 	bl	800587e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800609a:	e031      	b.n	8006100 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d019      	beq.n	80060d8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060a4:	f7ff fbbb 	bl	800581e <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a8:	f7fd f95e 	bl	8003368 <HAL_GetTick>
 80060ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060b0:	f7fd f95a 	bl	8003368 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e24d      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80060c2:	f7ff fbca 	bl	800585a <LL_RCC_HSI_IsReady>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0f1      	beq.n	80060b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff fbd4 	bl	800587e <LL_RCC_HSI_SetCalibTrimming>
 80060d6:	e013      	b.n	8006100 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060d8:	f7ff fbb0 	bl	800583c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060dc:	f7fd f944 	bl	8003368 <HAL_GetTick>
 80060e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060e4:	f7fd f940 	bl	8003368 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e233      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80060f6:	f7ff fbb0 	bl	800585a <LL_RCC_HSI_IsReady>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1f1      	bne.n	80060e4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d106      	bne.n	800611a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 80a3 	beq.w	8006260 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d076      	beq.n	8006210 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	2b00      	cmp	r3, #0
 800612c:	d046      	beq.n	80061bc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800612e:	f7ff fc67 	bl	8005a00 <LL_RCC_LSI1_IsReady>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d113      	bne.n	8006160 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006138:	f7ff fc40 	bl	80059bc <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800613c:	f7fd f914 	bl	8003368 <HAL_GetTick>
 8006140:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006142:	e008      	b.n	8006156 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006144:	f7fd f910 	bl	8003368 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e203      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006156:	f7ff fc53 	bl	8005a00 <LL_RCC_LSI1_IsReady>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0f1      	beq.n	8006144 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006160:	f7ff fc60 	bl	8005a24 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006164:	f7fd f900 	bl	8003368 <HAL_GetTick>
 8006168:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800616c:	f7fd f8fc 	bl	8003368 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b03      	cmp	r3, #3
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e1ef      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800617e:	f7ff fc73 	bl	8005a68 <LL_RCC_LSI2_IsReady>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f1      	beq.n	800616c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff fc7d 	bl	8005a8c <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006192:	f7ff fc24 	bl	80059de <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006196:	f7fd f8e7 	bl	8003368 <HAL_GetTick>
 800619a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800619c:	e008      	b.n	80061b0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800619e:	f7fd f8e3 	bl	8003368 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e1d6      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80061b0:	f7ff fc26 	bl	8005a00 <LL_RCC_LSI1_IsReady>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f1      	bne.n	800619e <HAL_RCC_OscConfig+0x31a>
 80061ba:	e051      	b.n	8006260 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80061bc:	f7ff fbfe 	bl	80059bc <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c0:	f7fd f8d2 	bl	8003368 <HAL_GetTick>
 80061c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80061c6:	e00c      	b.n	80061e2 <HAL_RCC_OscConfig+0x35e>
 80061c8:	20000008 	.word	0x20000008
 80061cc:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80061d0:	f7fd f8ca 	bl	8003368 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e1bd      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80061e2:	f7ff fc0d 	bl	8005a00 <LL_RCC_LSI1_IsReady>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0f1      	beq.n	80061d0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80061ec:	f7ff fc2b 	bl	8005a46 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80061f0:	e008      	b.n	8006204 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80061f2:	f7fd f8b9 	bl	8003368 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d901      	bls.n	8006204 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e1ac      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006204:	f7ff fc30 	bl	8005a68 <LL_RCC_LSI2_IsReady>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f1      	bne.n	80061f2 <HAL_RCC_OscConfig+0x36e>
 800620e:	e027      	b.n	8006260 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006210:	f7ff fc19 	bl	8005a46 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006214:	f7fd f8a8 	bl	8003368 <HAL_GetTick>
 8006218:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800621c:	f7fd f8a4 	bl	8003368 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b03      	cmp	r3, #3
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e197      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800622e:	f7ff fc1b 	bl	8005a68 <LL_RCC_LSI2_IsReady>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1f1      	bne.n	800621c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006238:	f7ff fbd1 	bl	80059de <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623c:	f7fd f894 	bl	8003368 <HAL_GetTick>
 8006240:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006244:	f7fd f890 	bl	8003368 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e183      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006256:	f7ff fbd3 	bl	8005a00 <LL_RCC_LSI1_IsReady>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1f1      	bne.n	8006244 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d05b      	beq.n	8006324 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800626c:	4ba7      	ldr	r3, [pc, #668]	@ (800650c <HAL_RCC_OscConfig+0x688>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006274:	2b00      	cmp	r3, #0
 8006276:	d114      	bne.n	80062a2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006278:	f7ff f9b6 	bl	80055e8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800627c:	f7fd f874 	bl	8003368 <HAL_GetTick>
 8006280:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006284:	f7fd f870 	bl	8003368 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e163      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006296:	4b9d      	ldr	r3, [pc, #628]	@ (800650c <HAL_RCC_OscConfig+0x688>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0f0      	beq.n	8006284 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d102      	bne.n	80062b0 <HAL_RCC_OscConfig+0x42c>
 80062aa:	f7ff fb31 	bl	8005910 <LL_RCC_LSE_Enable>
 80062ae:	e00c      	b.n	80062ca <HAL_RCC_OscConfig+0x446>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	2b05      	cmp	r3, #5
 80062b6:	d104      	bne.n	80062c2 <HAL_RCC_OscConfig+0x43e>
 80062b8:	f7ff fb4c 	bl	8005954 <LL_RCC_LSE_EnableBypass>
 80062bc:	f7ff fb28 	bl	8005910 <LL_RCC_LSE_Enable>
 80062c0:	e003      	b.n	80062ca <HAL_RCC_OscConfig+0x446>
 80062c2:	f7ff fb36 	bl	8005932 <LL_RCC_LSE_Disable>
 80062c6:	f7ff fb56 	bl	8005976 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d014      	beq.n	80062fc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d2:	f7fd f849 	bl	8003368 <HAL_GetTick>
 80062d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80062d8:	e00a      	b.n	80062f0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062da:	f7fd f845 	bl	8003368 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e136      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80062f0:	f7ff fb52 	bl	8005998 <LL_RCC_LSE_IsReady>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0ef      	beq.n	80062da <HAL_RCC_OscConfig+0x456>
 80062fa:	e013      	b.n	8006324 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062fc:	f7fd f834 	bl	8003368 <HAL_GetTick>
 8006300:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006302:	e00a      	b.n	800631a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006304:	f7fd f830 	bl	8003368 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006312:	4293      	cmp	r3, r2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e121      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800631a:	f7ff fb3d 	bl	8005998 <LL_RCC_LSE_IsReady>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1ef      	bne.n	8006304 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800632c:	2b00      	cmp	r3, #0
 800632e:	d02c      	beq.n	800638a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006334:	2b00      	cmp	r3, #0
 8006336:	d014      	beq.n	8006362 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006338:	f7ff fab6 	bl	80058a8 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800633c:	f7fd f814 	bl	8003368 <HAL_GetTick>
 8006340:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006344:	f7fd f810 	bl	8003368 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e103      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006356:	f7ff fac9 	bl	80058ec <LL_RCC_HSI48_IsReady>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0f1      	beq.n	8006344 <HAL_RCC_OscConfig+0x4c0>
 8006360:	e013      	b.n	800638a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006362:	f7ff fab2 	bl	80058ca <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006366:	f7fc ffff 	bl	8003368 <HAL_GetTick>
 800636a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800636c:	e008      	b.n	8006380 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800636e:	f7fc fffb 	bl	8003368 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d901      	bls.n	8006380 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e0ee      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006380:	f7ff fab4 	bl	80058ec <LL_RCC_HSI48_IsReady>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f1      	bne.n	800636e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 80e4 	beq.w	800655c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006394:	f7ff fc12 	bl	8005bbc <LL_RCC_GetSysClkSource>
 8006398:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800639a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	f040 80b4 	bne.w	8006514 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f003 0203 	and.w	r2, r3, #3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d123      	bne.n	8006402 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d11c      	bne.n	8006402 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	0a1b      	lsrs	r3, r3, #8
 80063cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d114      	bne.n	8006402 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d10d      	bne.n	8006402 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d106      	bne.n	8006402 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80063fe:	429a      	cmp	r2, r3
 8006400:	d05d      	beq.n	80064be <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b0c      	cmp	r3, #12
 8006406:	d058      	beq.n	80064ba <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e0a1      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800641a:	f7ff fc85 	bl	8005d28 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800641e:	f7fc ffa3 	bl	8003368 <HAL_GetTick>
 8006422:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006424:	e008      	b.n	8006438 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006426:	f7fc ff9f 	bl	8003368 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e092      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006438:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1ef      	bne.n	8006426 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006446:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	4b30      	ldr	r3, [pc, #192]	@ (8006510 <HAL_RCC_OscConfig+0x68c>)
 800644e:	4013      	ands	r3, r2
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006458:	4311      	orrs	r1, r2
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800645e:	0212      	lsls	r2, r2, #8
 8006460:	4311      	orrs	r1, r2
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006466:	4311      	orrs	r1, r2
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800646c:	4311      	orrs	r1, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006472:	430a      	orrs	r2, r1
 8006474:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006478:	4313      	orrs	r3, r2
 800647a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800647c:	f7ff fc45 	bl	8005d0a <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800648a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800648e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006490:	f7fc ff6a 	bl	8003368 <HAL_GetTick>
 8006494:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006498:	f7fc ff66 	bl	8003368 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e059      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d0ef      	beq.n	8006498 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064b8:	e050      	b.n	800655c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e04f      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d147      	bne.n	800655c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80064cc:	f7ff fc1d 	bl	8005d0a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064e0:	f7fc ff42 	bl	8003368 <HAL_GetTick>
 80064e4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064e8:	f7fc ff3e 	bl	8003368 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e031      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0ef      	beq.n	80064e8 <HAL_RCC_OscConfig+0x664>
 8006508:	e028      	b.n	800655c <HAL_RCC_OscConfig+0x6d8>
 800650a:	bf00      	nop
 800650c:	58000400 	.word	0x58000400
 8006510:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	2b0c      	cmp	r3, #12
 8006518:	d01e      	beq.n	8006558 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800651a:	f7ff fc05 	bl	8005d28 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651e:	f7fc ff23 	bl	8003368 <HAL_GetTick>
 8006522:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006524:	e008      	b.n	8006538 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006526:	f7fc ff1f 	bl	8003368 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d901      	bls.n	8006538 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e012      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1ef      	bne.n	8006526 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006550:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <HAL_RCC_OscConfig+0x6e4>)
 8006552:	4013      	ands	r3, r2
 8006554:	60cb      	str	r3, [r1, #12]
 8006556:	e001      	b.n	800655c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e000      	b.n	800655e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3734      	adds	r7, #52	@ 0x34
 8006562:	46bd      	mov	sp, r7
 8006564:	bd90      	pop	{r4, r7, pc}
 8006566:	bf00      	nop
 8006568:	eefefffc 	.word	0xeefefffc

0800656c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e12d      	b.n	80067dc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006580:	4b98      	ldr	r3, [pc, #608]	@ (80067e4 <HAL_RCC_ClockConfig+0x278>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d91b      	bls.n	80065c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800658e:	4b95      	ldr	r3, [pc, #596]	@ (80067e4 <HAL_RCC_ClockConfig+0x278>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f023 0207 	bic.w	r2, r3, #7
 8006596:	4993      	ldr	r1, [pc, #588]	@ (80067e4 <HAL_RCC_ClockConfig+0x278>)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	4313      	orrs	r3, r2
 800659c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800659e:	f7fc fee3 	bl	8003368 <HAL_GetTick>
 80065a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a4:	e008      	b.n	80065b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80065a6:	f7fc fedf 	bl	8003368 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d901      	bls.n	80065b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e111      	b.n	80067dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065b8:	4b8a      	ldr	r3, [pc, #552]	@ (80067e4 <HAL_RCC_ClockConfig+0x278>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d1ef      	bne.n	80065a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d016      	beq.n	8006600 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff fafc 	bl	8005bd4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065dc:	f7fc fec4 	bl	8003368 <HAL_GetTick>
 80065e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065e4:	f7fc fec0 	bl	8003368 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e0f2      	b.n	80067dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80065f6:	f7ff fbe9 	bl	8005dcc <LL_RCC_IsActiveFlag_HPRE>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0f1      	beq.n	80065e4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0320 	and.w	r3, r3, #32
 8006608:	2b00      	cmp	r3, #0
 800660a:	d016      	beq.n	800663a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff faf3 	bl	8005bfc <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006616:	f7fc fea7 	bl	8003368 <HAL_GetTick>
 800661a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800661c:	e008      	b.n	8006630 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800661e:	f7fc fea3 	bl	8003368 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e0d5      	b.n	80067dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006630:	f7ff fbde 	bl	8005df0 <LL_RCC_IsActiveFlag_C2HPRE>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0f1      	beq.n	800661e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d016      	beq.n	8006674 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff faec 	bl	8005c28 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006650:	f7fc fe8a 	bl	8003368 <HAL_GetTick>
 8006654:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006656:	e008      	b.n	800666a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006658:	f7fc fe86 	bl	8003368 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e0b8      	b.n	80067dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800666a:	f7ff fbd4 	bl	8005e16 <LL_RCC_IsActiveFlag_SHDHPRE>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0f1      	beq.n	8006658 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	d016      	beq.n	80066ae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	4618      	mov	r0, r3
 8006686:	f7ff fae6 	bl	8005c56 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800668a:	f7fc fe6d 	bl	8003368 <HAL_GetTick>
 800668e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006690:	e008      	b.n	80066a4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006692:	f7fc fe69 	bl	8003368 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e09b      	b.n	80067dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80066a4:	f7ff fbca 	bl	8005e3c <LL_RCC_IsActiveFlag_PPRE1>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0f1      	beq.n	8006692 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0308 	and.w	r3, r3, #8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d017      	beq.n	80066ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff fadc 	bl	8005c7e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80066c6:	f7fc fe4f 	bl	8003368 <HAL_GetTick>
 80066ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80066cc:	e008      	b.n	80066e0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80066ce:	f7fc fe4b 	bl	8003368 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d901      	bls.n	80066e0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e07d      	b.n	80067dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80066e0:	f7ff fbbe 	bl	8005e60 <LL_RCC_IsActiveFlag_PPRE2>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0f1      	beq.n	80066ce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d043      	beq.n	800677e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d106      	bne.n	800670c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80066fe:	f7ff f87c 	bl	80057fa <LL_RCC_HSE_IsReady>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d11e      	bne.n	8006746 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e067      	b.n	80067dc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b03      	cmp	r3, #3
 8006712:	d106      	bne.n	8006722 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006714:	f7ff fb17 	bl	8005d46 <LL_RCC_PLL_IsReady>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d113      	bne.n	8006746 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e05c      	b.n	80067dc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800672a:	f7ff f9e4 	bl	8005af6 <LL_RCC_MSI_IsReady>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d108      	bne.n	8006746 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e051      	b.n	80067dc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006738:	f7ff f88f 	bl	800585a <LL_RCC_HSI_IsReady>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e04a      	b.n	80067dc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff fa22 	bl	8005b94 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006750:	f7fc fe0a 	bl	8003368 <HAL_GetTick>
 8006754:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006756:	e00a      	b.n	800676e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006758:	f7fc fe06 	bl	8003368 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006766:	4293      	cmp	r3, r2
 8006768:	d901      	bls.n	800676e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e036      	b.n	80067dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800676e:	f7ff fa25 	bl	8005bbc <LL_RCC_GetSysClkSource>
 8006772:	4602      	mov	r2, r0
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	429a      	cmp	r2, r3
 800677c:	d1ec      	bne.n	8006758 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800677e:	4b19      	ldr	r3, [pc, #100]	@ (80067e4 <HAL_RCC_ClockConfig+0x278>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d21b      	bcs.n	80067c4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800678c:	4b15      	ldr	r3, [pc, #84]	@ (80067e4 <HAL_RCC_ClockConfig+0x278>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f023 0207 	bic.w	r2, r3, #7
 8006794:	4913      	ldr	r1, [pc, #76]	@ (80067e4 <HAL_RCC_ClockConfig+0x278>)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	4313      	orrs	r3, r2
 800679a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800679c:	f7fc fde4 	bl	8003368 <HAL_GetTick>
 80067a0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a2:	e008      	b.n	80067b6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80067a4:	f7fc fde0 	bl	8003368 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e012      	b.n	80067dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b6:	4b0b      	ldr	r3, [pc, #44]	@ (80067e4 <HAL_RCC_ClockConfig+0x278>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d1ef      	bne.n	80067a4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80067c4:	f000 f87e 	bl	80068c4 <HAL_RCC_GetHCLKFreq>
 80067c8:	4603      	mov	r3, r0
 80067ca:	4a07      	ldr	r2, [pc, #28]	@ (80067e8 <HAL_RCC_ClockConfig+0x27c>)
 80067cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80067ce:	f7fc fdd7 	bl	8003380 <HAL_GetTickPrio>
 80067d2:	4603      	mov	r3, r0
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7fc fd79 	bl	80032cc <HAL_InitTick>
 80067da:	4603      	mov	r3, r0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	58004000 	.word	0x58004000
 80067e8:	20000008 	.word	0x20000008

080067ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067ec:	b590      	push	{r4, r7, lr}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067f2:	f7ff f9e3 	bl	8005bbc <LL_RCC_GetSysClkSource>
 80067f6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80067fe:	f7ff f99f 	bl	8005b40 <LL_RCC_MSI_GetRange>
 8006802:	4603      	mov	r3, r0
 8006804:	091b      	lsrs	r3, r3, #4
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	4a2b      	ldr	r2, [pc, #172]	@ (80068b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800680c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	e04b      	b.n	80068ac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b04      	cmp	r3, #4
 8006818:	d102      	bne.n	8006820 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800681a:	4b28      	ldr	r3, [pc, #160]	@ (80068bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	e045      	b.n	80068ac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b08      	cmp	r3, #8
 8006824:	d10a      	bne.n	800683c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006826:	f7fe ffb8 	bl	800579a <LL_RCC_HSE_IsEnabledDiv2>
 800682a:	4603      	mov	r3, r0
 800682c:	2b01      	cmp	r3, #1
 800682e:	d102      	bne.n	8006836 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006830:	4b22      	ldr	r3, [pc, #136]	@ (80068bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e03a      	b.n	80068ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006836:	4b22      	ldr	r3, [pc, #136]	@ (80068c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	e037      	b.n	80068ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800683c:	f7ff faba 	bl	8005db4 <LL_RCC_PLL_GetMainSource>
 8006840:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b02      	cmp	r3, #2
 8006846:	d003      	beq.n	8006850 <HAL_RCC_GetSysClockFreq+0x64>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2b03      	cmp	r3, #3
 800684c:	d003      	beq.n	8006856 <HAL_RCC_GetSysClockFreq+0x6a>
 800684e:	e00d      	b.n	800686c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006850:	4b1a      	ldr	r3, [pc, #104]	@ (80068bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006852:	60bb      	str	r3, [r7, #8]
        break;
 8006854:	e015      	b.n	8006882 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006856:	f7fe ffa0 	bl	800579a <LL_RCC_HSE_IsEnabledDiv2>
 800685a:	4603      	mov	r3, r0
 800685c:	2b01      	cmp	r3, #1
 800685e:	d102      	bne.n	8006866 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006860:	4b16      	ldr	r3, [pc, #88]	@ (80068bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006862:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006864:	e00d      	b.n	8006882 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006866:	4b16      	ldr	r3, [pc, #88]	@ (80068c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006868:	60bb      	str	r3, [r7, #8]
        break;
 800686a:	e00a      	b.n	8006882 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800686c:	f7ff f968 	bl	8005b40 <LL_RCC_MSI_GetRange>
 8006870:	4603      	mov	r3, r0
 8006872:	091b      	lsrs	r3, r3, #4
 8006874:	f003 030f 	and.w	r3, r3, #15
 8006878:	4a0f      	ldr	r2, [pc, #60]	@ (80068b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800687a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800687e:	60bb      	str	r3, [r7, #8]
        break;
 8006880:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006882:	f7ff fa72 	bl	8005d6a <LL_RCC_PLL_GetN>
 8006886:	4602      	mov	r2, r0
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	fb03 f402 	mul.w	r4, r3, r2
 800688e:	f7ff fa85 	bl	8005d9c <LL_RCC_PLL_GetDivider>
 8006892:	4603      	mov	r3, r0
 8006894:	091b      	lsrs	r3, r3, #4
 8006896:	3301      	adds	r3, #1
 8006898:	fbb4 f4f3 	udiv	r4, r4, r3
 800689c:	f7ff fa72 	bl	8005d84 <LL_RCC_PLL_GetR>
 80068a0:	4603      	mov	r3, r0
 80068a2:	0f5b      	lsrs	r3, r3, #29
 80068a4:	3301      	adds	r3, #1
 80068a6:	fbb4 f3f3 	udiv	r3, r4, r3
 80068aa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80068ac:	68fb      	ldr	r3, [r7, #12]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd90      	pop	{r4, r7, pc}
 80068b6:	bf00      	nop
 80068b8:	08011d38 	.word	0x08011d38
 80068bc:	00f42400 	.word	0x00f42400
 80068c0:	01e84800 	.word	0x01e84800

080068c4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068c4:	b598      	push	{r3, r4, r7, lr}
 80068c6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80068c8:	f7ff ff90 	bl	80067ec <HAL_RCC_GetSysClockFreq>
 80068cc:	4604      	mov	r4, r0
 80068ce:	f7ff f9ea 	bl	8005ca6 <LL_RCC_GetAHBPrescaler>
 80068d2:	4603      	mov	r3, r0
 80068d4:	091b      	lsrs	r3, r3, #4
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	4a03      	ldr	r2, [pc, #12]	@ (80068e8 <HAL_RCC_GetHCLKFreq+0x24>)
 80068dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	bd98      	pop	{r3, r4, r7, pc}
 80068e8:	08011cd8 	.word	0x08011cd8

080068ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068ec:	b598      	push	{r3, r4, r7, lr}
 80068ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80068f0:	f7ff ffe8 	bl	80068c4 <HAL_RCC_GetHCLKFreq>
 80068f4:	4604      	mov	r4, r0
 80068f6:	f7ff f9f0 	bl	8005cda <LL_RCC_GetAPB1Prescaler>
 80068fa:	4603      	mov	r3, r0
 80068fc:	0a1b      	lsrs	r3, r3, #8
 80068fe:	f003 0307 	and.w	r3, r3, #7
 8006902:	4a04      	ldr	r2, [pc, #16]	@ (8006914 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006908:	f003 031f 	and.w	r3, r3, #31
 800690c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006910:	4618      	mov	r0, r3
 8006912:	bd98      	pop	{r3, r4, r7, pc}
 8006914:	08011d18 	.word	0x08011d18

08006918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006918:	b598      	push	{r3, r4, r7, lr}
 800691a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800691c:	f7ff ffd2 	bl	80068c4 <HAL_RCC_GetHCLKFreq>
 8006920:	4604      	mov	r4, r0
 8006922:	f7ff f9e6 	bl	8005cf2 <LL_RCC_GetAPB2Prescaler>
 8006926:	4603      	mov	r3, r0
 8006928:	0adb      	lsrs	r3, r3, #11
 800692a:	f003 0307 	and.w	r3, r3, #7
 800692e:	4a04      	ldr	r2, [pc, #16]	@ (8006940 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006934:	f003 031f 	and.w	r3, r3, #31
 8006938:	fa24 f303 	lsr.w	r3, r4, r3
}
 800693c:	4618      	mov	r0, r3
 800693e:	bd98      	pop	{r3, r4, r7, pc}
 8006940:	08011d18 	.word	0x08011d18

08006944 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006944:	b590      	push	{r4, r7, lr}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2bb0      	cmp	r3, #176	@ 0xb0
 8006950:	d903      	bls.n	800695a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006952:	4b15      	ldr	r3, [pc, #84]	@ (80069a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	e007      	b.n	800696a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	091b      	lsrs	r3, r3, #4
 800695e:	f003 030f 	and.w	r3, r3, #15
 8006962:	4a11      	ldr	r2, [pc, #68]	@ (80069a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006968:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800696a:	f7ff f9a8 	bl	8005cbe <LL_RCC_GetAHB4Prescaler>
 800696e:	4603      	mov	r3, r0
 8006970:	091b      	lsrs	r3, r3, #4
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	4a0d      	ldr	r2, [pc, #52]	@ (80069ac <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006982:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	4a0a      	ldr	r2, [pc, #40]	@ (80069b0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006988:	fba2 2303 	umull	r2, r3, r2, r3
 800698c:	0c9c      	lsrs	r4, r3, #18
 800698e:	f7fe fe3b 	bl	8005608 <HAL_PWREx_GetVoltageRange>
 8006992:	4603      	mov	r3, r0
 8006994:	4619      	mov	r1, r3
 8006996:	4620      	mov	r0, r4
 8006998:	f000 f80c 	bl	80069b4 <RCC_SetFlashLatency>
 800699c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd90      	pop	{r4, r7, pc}
 80069a6:	bf00      	nop
 80069a8:	08011d38 	.word	0x08011d38
 80069ac:	08011cd8 	.word	0x08011cd8
 80069b0:	431bde83 	.word	0x431bde83

080069b4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80069b4:	b590      	push	{r4, r7, lr}
 80069b6:	b093      	sub	sp, #76	@ 0x4c
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80069be:	4b37      	ldr	r3, [pc, #220]	@ (8006a9c <RCC_SetFlashLatency+0xe8>)
 80069c0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80069c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80069ca:	4a35      	ldr	r2, [pc, #212]	@ (8006aa0 <RCC_SetFlashLatency+0xec>)
 80069cc:	f107 031c 	add.w	r3, r7, #28
 80069d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80069d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80069d6:	4b33      	ldr	r3, [pc, #204]	@ (8006aa4 <RCC_SetFlashLatency+0xf0>)
 80069d8:	f107 040c 	add.w	r4, r7, #12
 80069dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80069e2:	2300      	movs	r3, #0
 80069e4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ec:	d11a      	bne.n	8006a24 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80069ee:	2300      	movs	r3, #0
 80069f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069f2:	e013      	b.n	8006a1c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80069f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	3348      	adds	r3, #72	@ 0x48
 80069fa:	443b      	add	r3, r7
 80069fc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d807      	bhi.n	8006a16 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	3348      	adds	r3, #72	@ 0x48
 8006a0c:	443b      	add	r3, r7
 8006a0e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006a12:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006a14:	e020      	b.n	8006a58 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a18:	3301      	adds	r3, #1
 8006a1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d9e8      	bls.n	80069f4 <RCC_SetFlashLatency+0x40>
 8006a22:	e019      	b.n	8006a58 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006a24:	2300      	movs	r3, #0
 8006a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a28:	e013      	b.n	8006a52 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	3348      	adds	r3, #72	@ 0x48
 8006a30:	443b      	add	r3, r7
 8006a32:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d807      	bhi.n	8006a4c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	3348      	adds	r3, #72	@ 0x48
 8006a42:	443b      	add	r3, r7
 8006a44:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006a48:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006a4a:	e005      	b.n	8006a58 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a4e:	3301      	adds	r3, #1
 8006a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d9e8      	bls.n	8006a2a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006a58:	4b13      	ldr	r3, [pc, #76]	@ (8006aa8 <RCC_SetFlashLatency+0xf4>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f023 0207 	bic.w	r2, r3, #7
 8006a60:	4911      	ldr	r1, [pc, #68]	@ (8006aa8 <RCC_SetFlashLatency+0xf4>)
 8006a62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a64:	4313      	orrs	r3, r2
 8006a66:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a68:	f7fc fc7e 	bl	8003368 <HAL_GetTick>
 8006a6c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006a6e:	e008      	b.n	8006a82 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006a70:	f7fc fc7a 	bl	8003368 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d901      	bls.n	8006a82 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e007      	b.n	8006a92 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006a82:	4b09      	ldr	r3, [pc, #36]	@ (8006aa8 <RCC_SetFlashLatency+0xf4>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d1ef      	bne.n	8006a70 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	374c      	adds	r7, #76	@ 0x4c
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd90      	pop	{r4, r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	08010ec8 	.word	0x08010ec8
 8006aa0:	08010ed8 	.word	0x08010ed8
 8006aa4:	08010ee4 	.word	0x08010ee4
 8006aa8:	58004000 	.word	0x58004000

08006aac <LL_RCC_LSE_IsEnabled>:
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <LL_RCC_LSE_IsEnabled+0x18>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <LL_RCC_LSE_IsEnabled+0x1a>
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <LL_RCC_LSE_IsReady>:
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d101      	bne.n	8006ae8 <LL_RCC_LSE_IsReady+0x18>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e000      	b.n	8006aea <LL_RCC_LSE_IsReady+0x1a>
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <LL_RCC_MSI_EnablePLLMode>:
{
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8006af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b02:	f043 0304 	orr.w	r3, r3, #4
 8006b06:	6013      	str	r3, [r2, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <LL_RCC_SetRFWKPClockSource>:
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006b32:	bf00      	nop
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <LL_RCC_SetSMPSClockSource>:
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4c:	f023 0203 	bic.w	r2, r3, #3
 8006b50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <LL_RCC_SetSMPSPrescaler>:
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006b6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b74:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006b78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <LL_RCC_SetUSARTClockSource>:
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b9e:	f023 0203 	bic.w	r2, r3, #3
 8006ba2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006bae:	bf00      	nop
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <LL_RCC_SetLPUARTClockSource>:
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006bce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <LL_RCC_SetI2CClockSource>:
{
 8006be6:	b480      	push	{r7}
 8006be8:	b083      	sub	sp, #12
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006bee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bf2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	091b      	lsrs	r3, r3, #4
 8006bfa:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006bfe:	43db      	mvns	r3, r3
 8006c00:	401a      	ands	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	011b      	lsls	r3, r3, #4
 8006c06:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006c0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <LL_RCC_SetLPTIMClockSource>:
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	0c1b      	lsrs	r3, r3, #16
 8006c34:	041b      	lsls	r3, r3, #16
 8006c36:	43db      	mvns	r3, r3
 8006c38:	401a      	ands	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	041b      	lsls	r3, r3, #16
 8006c3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <LL_RCC_SetSAIClockSource>:
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c64:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006c68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <LL_RCC_SetRNGClockSource>:
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c90:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006c94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <LL_RCC_SetCLK48ClockSource>:
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cbc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006cc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <LL_RCC_SetUSBClockSource>:
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff ffe3 	bl	8006cac <LL_RCC_SetCLK48ClockSource>
}
 8006ce6:	bf00      	nop
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <LL_RCC_SetADCClockSource>:
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cfe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006d02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006d0e:	bf00      	nop
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <LL_RCC_SetRTCClockSource>:
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006d3a:	bf00      	nop
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <LL_RCC_GetRTCClockSource>:
{
 8006d46:	b480      	push	{r7}
 8006d48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <LL_RCC_ForceBackupDomainReset>:
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006d78:	bf00      	nop
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006d82:	b480      	push	{r7}
 8006d84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006d9a:	bf00      	nop
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <LL_RCC_PLLSAI1_Enable>:
{
 8006da4:	b480      	push	{r7}
 8006da6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006db2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006db6:	6013      	str	r3, [r2, #0]
}
 8006db8:	bf00      	nop
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <LL_RCC_PLLSAI1_Disable>:
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dd0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006dd4:	6013      	str	r3, [r2, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <LL_RCC_PLLSAI1_IsReady>:
{
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006df2:	d101      	bne.n	8006df8 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006df4:	2301      	movs	r3, #1
 8006df6:	e000      	b.n	8006dfa <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <LL_APB1_GRP1_ForceReset>:
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8006e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <LL_APB1_GRP1_ReleaseReset>:
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8006e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e3e:	4013      	ands	r3, r2
 8006e40:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b088      	sub	sp, #32
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006e56:	2300      	movs	r3, #0
 8006e58:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d034      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e6e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e72:	d021      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006e74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e78:	d81b      	bhi.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e7e:	d01d      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006e80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e84:	d815      	bhi.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00b      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006e8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e8e:	d110      	bne.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e9e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006ea0:	e00d      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 f988 	bl	80071bc <RCCEx_PLLSAI1_ConfigNP>
 8006eac:	4603      	mov	r3, r0
 8006eae:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006eb0:	e005      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	77fb      	strb	r3, [r7, #31]
        break;
 8006eb6:	e002      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006eb8:	bf00      	nop
 8006eba:	e000      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ebe:	7ffb      	ldrb	r3, [r7, #31]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d105      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7ff fec3 	bl	8006c54 <LL_RCC_SetSAIClockSource>
 8006ece:	e001      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed0:	7ffb      	ldrb	r3, [r7, #31]
 8006ed2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d046      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006ee0:	f7ff ff31 	bl	8006d46 <LL_RCC_GetRTCClockSource>
 8006ee4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d03c      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006ef0:	f7fe fb7a 	bl	80055e8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d105      	bne.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff ff0b 	bl	8006d1a <LL_RCC_SetRTCClockSource>
 8006f04:	e02e      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006f06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f0e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006f10:	f7ff ff26 	bl	8006d60 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006f14:	f7ff ff35 	bl	8006d82 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f22:	4313      	orrs	r3, r2
 8006f24:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006f26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006f30:	f7ff fdbc 	bl	8006aac <LL_RCC_LSE_IsEnabled>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d114      	bne.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f3a:	f7fc fa15 	bl	8003368 <HAL_GetTick>
 8006f3e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006f40:	e00b      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f42:	f7fc fa11 	bl	8003368 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d902      	bls.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	77fb      	strb	r3, [r7, #31]
              break;
 8006f58:	e004      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006f5a:	f7ff fdb9 	bl	8006ad0 <LL_RCC_LSE_IsReady>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d1ee      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006f64:	7ffb      	ldrb	r3, [r7, #31]
 8006f66:	77bb      	strb	r3, [r7, #30]
 8006f68:	e001      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6a:	7ffb      	ldrb	r3, [r7, #31]
 8006f6c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d004      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7ff fe05 	bl	8006b8e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d004      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7ff fe10 	bl	8006bba <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0310 	and.w	r3, r3, #16
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d004      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7ff fe38 	bl	8006c20 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0320 	and.w	r3, r3, #32
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d004      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff fe2d 	bl	8006c20 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0304 	and.w	r3, r3, #4
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d004      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7ff fe05 	bl	8006be6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0308 	and.w	r3, r3, #8
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d004      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff fdfa 	bl	8006be6 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d022      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff fe68 	bl	8006cd8 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800700c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007010:	d107      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800701c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007020:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007026:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800702a:	d10b      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3304      	adds	r3, #4
 8007030:	4618      	mov	r0, r3
 8007032:	f000 f91e 	bl	8007272 <RCCEx_PLLSAI1_ConfigNQ>
 8007036:	4603      	mov	r3, r0
 8007038:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800703a:	7ffb      	ldrb	r3, [r7, #31]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007040:	7ffb      	ldrb	r3, [r7, #31]
 8007042:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800704c:	2b00      	cmp	r3, #0
 800704e:	d02b      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007058:	d008      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007062:	d003      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007068:	2b00      	cmp	r3, #0
 800706a:	d105      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff fe05 	bl	8006c80 <LL_RCC_SetRNGClockSource>
 8007076:	e00a      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	2000      	movs	r0, #0
 8007084:	f7ff fdfc 	bl	8006c80 <LL_RCC_SetRNGClockSource>
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f7ff fe0f 	bl	8006cac <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007092:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007096:	d107      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d022      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7ff fe18 	bl	8006cee <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070c6:	d107      	bne.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070d6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070e0:	d10b      	bne.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	3304      	adds	r3, #4
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 f91e 	bl	8007328 <RCCEx_PLLSAI1_ConfigNR>
 80070ec:	4603      	mov	r3, r0
 80070ee:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80070f0:	7ffb      	ldrb	r3, [r7, #31]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80070f6:	7ffb      	ldrb	r3, [r7, #31]
 80070f8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d004      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff fd01 	bl	8006b12 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d009      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007120:	4618      	mov	r0, r3
 8007122:	f7ff fd20 	bl	8006b66 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800712a:	4618      	mov	r0, r3
 800712c:	f7ff fd07 	bl	8006b3e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007130:	7fbb      	ldrb	r3, [r7, #30]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3720      	adds	r7, #32
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800713e:	f7ff fcd9 	bl	8006af4 <LL_RCC_MSI_EnablePLLMode>
}
 8007142:	bf00      	nop
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8007150:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8007154:	f7ff fe56 	bl	8006e04 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 8007158:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 800715c:	f7ff fe64 	bl	8006e28 <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	431a      	orrs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	4313      	orrs	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	041b      	lsls	r3, r3, #16
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	4313      	orrs	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8007188:	4a0b      	ldr	r2, [pc, #44]	@ (80071b8 <HAL_RCCEx_CRSConfig+0x70>)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800718e:	4b0a      	ldr	r3, [pc, #40]	@ (80071b8 <HAL_RCCEx_CRSConfig+0x70>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	4906      	ldr	r1, [pc, #24]	@ (80071b8 <HAL_RCCEx_CRSConfig+0x70>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80071a2:	4b05      	ldr	r3, [pc, #20]	@ (80071b8 <HAL_RCCEx_CRSConfig+0x70>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a04      	ldr	r2, [pc, #16]	@ (80071b8 <HAL_RCCEx_CRSConfig+0x70>)
 80071a8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80071ac:	6013      	str	r3, [r2, #0]
}
 80071ae:	bf00      	nop
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	40006000 	.word	0x40006000

080071bc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80071c8:	f7ff fdfb 	bl	8006dc2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071cc:	f7fc f8cc 	bl	8003368 <HAL_GetTick>
 80071d0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80071d2:	e009      	b.n	80071e8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071d4:	f7fc f8c8 	bl	8003368 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d902      	bls.n	80071e8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	73fb      	strb	r3, [r7, #15]
      break;
 80071e6:	e004      	b.n	80071f2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80071e8:	f7ff fdfa 	bl	8006de0 <LL_RCC_PLLSAI1_IsReady>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1f0      	bne.n	80071d4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d137      	bne.n	8007268 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80071f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800720c:	4313      	orrs	r3, r2
 800720e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007222:	4313      	orrs	r3, r2
 8007224:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007226:	f7ff fdbd 	bl	8006da4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800722a:	f7fc f89d 	bl	8003368 <HAL_GetTick>
 800722e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007230:	e009      	b.n	8007246 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007232:	f7fc f899 	bl	8003368 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d902      	bls.n	8007246 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	73fb      	strb	r3, [r7, #15]
        break;
 8007244:	e004      	b.n	8007250 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007246:	f7ff fdcb 	bl	8006de0 <LL_RCC_PLLSAI1_IsReady>
 800724a:	4603      	mov	r3, r0
 800724c:	2b01      	cmp	r3, #1
 800724e:	d1f0      	bne.n	8007232 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d108      	bne.n	8007268 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800725a:	691a      	ldr	r2, [r3, #16]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007264:	4313      	orrs	r3, r2
 8007266:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007268:	7bfb      	ldrb	r3, [r7, #15]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800727e:	f7ff fda0 	bl	8006dc2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007282:	f7fc f871 	bl	8003368 <HAL_GetTick>
 8007286:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007288:	e009      	b.n	800729e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800728a:	f7fc f86d 	bl	8003368 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d902      	bls.n	800729e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	73fb      	strb	r3, [r7, #15]
      break;
 800729c:	e004      	b.n	80072a8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800729e:	f7ff fd9f 	bl	8006de0 <LL_RCC_PLLSAI1_IsReady>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1f0      	bne.n	800728a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d137      	bne.n	800731e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80072ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072c2:	4313      	orrs	r3, r2
 80072c4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80072c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072d8:	4313      	orrs	r3, r2
 80072da:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80072dc:	f7ff fd62 	bl	8006da4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072e0:	f7fc f842 	bl	8003368 <HAL_GetTick>
 80072e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80072e6:	e009      	b.n	80072fc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072e8:	f7fc f83e 	bl	8003368 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d902      	bls.n	80072fc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	73fb      	strb	r3, [r7, #15]
        break;
 80072fa:	e004      	b.n	8007306 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80072fc:	f7ff fd70 	bl	8006de0 <LL_RCC_PLLSAI1_IsReady>
 8007300:	4603      	mov	r3, r0
 8007302:	2b01      	cmp	r3, #1
 8007304:	d1f0      	bne.n	80072e8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d108      	bne.n	800731e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800730c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007310:	691a      	ldr	r2, [r3, #16]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800731a:	4313      	orrs	r3, r2
 800731c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800731e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007334:	f7ff fd45 	bl	8006dc2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007338:	f7fc f816 	bl	8003368 <HAL_GetTick>
 800733c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800733e:	e009      	b.n	8007354 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007340:	f7fc f812 	bl	8003368 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d902      	bls.n	8007354 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	73fb      	strb	r3, [r7, #15]
      break;
 8007352:	e004      	b.n	800735e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007354:	f7ff fd44 	bl	8006de0 <LL_RCC_PLLSAI1_IsReady>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1f0      	bne.n	8007340 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d137      	bne.n	80073d4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	021b      	lsls	r3, r3, #8
 8007374:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007378:	4313      	orrs	r3, r2
 800737a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800737c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800738e:	4313      	orrs	r3, r2
 8007390:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007392:	f7ff fd07 	bl	8006da4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007396:	f7fb ffe7 	bl	8003368 <HAL_GetTick>
 800739a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800739c:	e009      	b.n	80073b2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800739e:	f7fb ffe3 	bl	8003368 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d902      	bls.n	80073b2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	73fb      	strb	r3, [r7, #15]
        break;
 80073b0:	e004      	b.n	80073bc <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80073b2:	f7ff fd15 	bl	8006de0 <LL_RCC_PLLSAI1_IsReady>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d1f0      	bne.n	800739e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d108      	bne.n	80073d4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80073c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073c6:	691a      	ldr	r2, [r3, #16]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073d0:	4313      	orrs	r3, r2
 80073d2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e09f      	b.n	8007532 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d106      	bne.n	800740c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fb fbda 	bl	8002bc0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007414:	4b49      	ldr	r3, [pc, #292]	@ (800753c <HAL_RTC_Init+0x15c>)
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f003 0310 	and.w	r3, r3, #16
 800741c:	2b10      	cmp	r3, #16
 800741e:	d07e      	beq.n	800751e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	22ca      	movs	r2, #202	@ 0xca
 8007426:	625a      	str	r2, [r3, #36]	@ 0x24
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2253      	movs	r2, #83	@ 0x53
 800742e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fbab 	bl	8007b8c <RTC_EnterInitMode>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	22ff      	movs	r2, #255	@ 0xff
 8007442:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2204      	movs	r2, #4
 8007448:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	73fb      	strb	r3, [r7, #15]
 8007450:	e067      	b.n	8007522 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	6812      	ldr	r2, [r2, #0]
 800745c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007460:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007464:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6899      	ldr	r1, [r3, #8]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	431a      	orrs	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	68d2      	ldr	r2, [r2, #12]
 800748c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6919      	ldr	r1, [r3, #16]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	041a      	lsls	r2, r3, #16
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68da      	ldr	r2, [r3, #12]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074b0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 0203 	bic.w	r2, r2, #3
 80074c0:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	69da      	ldr	r2, [r3, #28]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d113      	bne.n	8007510 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fb29 	bl	8007b40 <HAL_RTC_WaitForSynchro>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00d      	beq.n	8007510 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	22ff      	movs	r2, #255	@ 0xff
 80074fa:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2204      	movs	r2, #4
 8007500:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e010      	b.n	8007532 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	22ff      	movs	r2, #255	@ 0xff
 8007516:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	73fb      	strb	r3, [r7, #15]
 800751c:	e001      	b.n	8007522 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007522:	7bfb      	ldrb	r3, [r7, #15]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d103      	bne.n	8007530 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8007530:	7bfb      	ldrb	r3, [r7, #15]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	40002800 	.word	0x40002800

08007540 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007540:	b590      	push	{r4, r7, lr}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d101      	bne.n	800755a <HAL_RTC_SetTime+0x1a>
 8007556:	2302      	movs	r3, #2
 8007558:	e0b2      	b.n	80076c0 <HAL_RTC_SetTime+0x180>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2202      	movs	r2, #2
 8007566:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d126      	bne.n	80075be <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	d102      	bne.n	8007584 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2200      	movs	r2, #0
 8007582:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	4618      	mov	r0, r3
 800758a:	f000 fb29 	bl	8007be0 <RTC_ByteToBcd2>
 800758e:	4603      	mov	r3, r0
 8007590:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fb22 	bl	8007be0 <RTC_ByteToBcd2>
 800759c:	4603      	mov	r3, r0
 800759e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80075a0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	789b      	ldrb	r3, [r3, #2]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fb1a 	bl	8007be0 <RTC_ByteToBcd2>
 80075ac:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80075ae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	78db      	ldrb	r3, [r3, #3]
 80075b6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80075b8:	4313      	orrs	r3, r2
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	e018      	b.n	80075f0 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d102      	bne.n	80075d2 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2200      	movs	r2, #0
 80075d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	785b      	ldrb	r3, [r3, #1]
 80075dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80075de:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80075e4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	78db      	ldrb	r3, [r3, #3]
 80075ea:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80075ec:	4313      	orrs	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	22ca      	movs	r2, #202	@ 0xca
 80075f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2253      	movs	r2, #83	@ 0x53
 80075fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 fac3 	bl	8007b8c <RTC_EnterInitMode>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00d      	beq.n	8007628 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	22ff      	movs	r2, #255	@ 0xff
 8007612:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2204      	movs	r2, #4
 8007618:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e04b      	b.n	80076c0 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007632:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007636:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689a      	ldr	r2, [r3, #8]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007646:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6899      	ldr	r1, [r3, #8]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	431a      	orrs	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68da      	ldr	r2, [r3, #12]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800766e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d113      	bne.n	80076a6 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 fa5e 	bl	8007b40 <HAL_RTC_WaitForSynchro>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00d      	beq.n	80076a6 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	22ff      	movs	r2, #255	@ 0xff
 8007690:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2204      	movs	r2, #4
 8007696:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e00c      	b.n	80076c0 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	22ff      	movs	r2, #255	@ 0xff
 80076ac:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80076be:	2300      	movs	r3, #0
  }
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	371c      	adds	r7, #28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd90      	pop	{r4, r7, pc}

080076c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80076c8:	b590      	push	{r4, r7, lr}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d101      	bne.n	80076e2 <HAL_RTC_SetDate+0x1a>
 80076de:	2302      	movs	r3, #2
 80076e0:	e09c      	b.n	800781c <HAL_RTC_SetDate+0x154>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2202      	movs	r2, #2
 80076ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10e      	bne.n	8007716 <HAL_RTC_SetDate+0x4e>
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	785b      	ldrb	r3, [r3, #1]
 80076fc:	f003 0310 	and.w	r3, r3, #16
 8007700:	2b00      	cmp	r3, #0
 8007702:	d008      	beq.n	8007716 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	785b      	ldrb	r3, [r3, #1]
 8007708:	f023 0310 	bic.w	r3, r3, #16
 800770c:	b2db      	uxtb	r3, r3
 800770e:	330a      	adds	r3, #10
 8007710:	b2da      	uxtb	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d11c      	bne.n	8007756 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	78db      	ldrb	r3, [r3, #3]
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fa5d 	bl	8007be0 <RTC_ByteToBcd2>
 8007726:	4603      	mov	r3, r0
 8007728:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	785b      	ldrb	r3, [r3, #1]
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fa56 	bl	8007be0 <RTC_ByteToBcd2>
 8007734:	4603      	mov	r3, r0
 8007736:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007738:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	789b      	ldrb	r3, [r3, #2]
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fa4e 	bl	8007be0 <RTC_ByteToBcd2>
 8007744:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007746:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	e00e      	b.n	8007774 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	78db      	ldrb	r3, [r3, #3]
 800775a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	785b      	ldrb	r3, [r3, #1]
 8007760:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007762:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007768:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007770:	4313      	orrs	r3, r2
 8007772:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	22ca      	movs	r2, #202	@ 0xca
 800777a:	625a      	str	r2, [r3, #36]	@ 0x24
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2253      	movs	r2, #83	@ 0x53
 8007782:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 fa01 	bl	8007b8c <RTC_EnterInitMode>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00d      	beq.n	80077ac <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	22ff      	movs	r2, #255	@ 0xff
 8007796:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2204      	movs	r2, #4
 800779c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e037      	b.n	800781c <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80077b6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80077ba:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077ca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d113      	bne.n	8007802 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 f9b0 	bl	8007b40 <HAL_RTC_WaitForSynchro>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00d      	beq.n	8007802 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	22ff      	movs	r2, #255	@ 0xff
 80077ec:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2204      	movs	r2, #4
 80077f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e00c      	b.n	800781c <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	22ff      	movs	r2, #255	@ 0xff
 8007808:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800781a:	2300      	movs	r3, #0
  }
}
 800781c:	4618      	mov	r0, r3
 800781e:	371c      	adds	r7, #28
 8007820:	46bd      	mov	sp, r7
 8007822:	bd90      	pop	{r4, r7, pc}

08007824 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007824:	b590      	push	{r4, r7, lr}
 8007826:	b089      	sub	sp, #36	@ 0x24
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d101      	bne.n	800783e <HAL_RTC_SetAlarm_IT+0x1a>
 800783a:	2302      	movs	r3, #2
 800783c:	e129      	b.n	8007a92 <HAL_RTC_SetAlarm_IT+0x26e>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2202      	movs	r2, #2
 800784a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d137      	bne.n	80078c4 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d102      	bne.n	8007868 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2200      	movs	r2, #0
 8007866:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	4618      	mov	r0, r3
 800786e:	f000 f9b7 	bl	8007be0 <RTC_ByteToBcd2>
 8007872:	4603      	mov	r3, r0
 8007874:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	785b      	ldrb	r3, [r3, #1]
 800787a:	4618      	mov	r0, r3
 800787c:	f000 f9b0 	bl	8007be0 <RTC_ByteToBcd2>
 8007880:	4603      	mov	r3, r0
 8007882:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007884:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	789b      	ldrb	r3, [r3, #2]
 800788a:	4618      	mov	r0, r3
 800788c:	f000 f9a8 	bl	8007be0 <RTC_ByteToBcd2>
 8007890:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007892:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	78db      	ldrb	r3, [r3, #3]
 800789a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800789c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 f99a 	bl	8007be0 <RTC_ByteToBcd2>
 80078ac:	4603      	mov	r3, r0
 80078ae:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80078b0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80078b8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80078be:	4313      	orrs	r3, r2
 80078c0:	61fb      	str	r3, [r7, #28]
 80078c2:	e023      	b.n	800790c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d102      	bne.n	80078d8 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2200      	movs	r2, #0
 80078d6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	785b      	ldrb	r3, [r3, #1]
 80078e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80078e4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80078ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	78db      	ldrb	r3, [r3, #3]
 80078f0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80078f2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078fa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80078fc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007902:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007908:	4313      	orrs	r3, r2
 800790a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	4313      	orrs	r3, r2
 8007916:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	22ca      	movs	r2, #202	@ 0xca
 800791e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2253      	movs	r2, #83	@ 0x53
 8007926:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007930:	d14a      	bne.n	80079c8 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007940:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	b2da      	uxtb	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007952:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007954:	f7fb fd08 	bl	8003368 <HAL_GetTick>
 8007958:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800795a:	e015      	b.n	8007988 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800795c:	f7fb fd04 	bl	8003368 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800796a:	d90d      	bls.n	8007988 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	22ff      	movs	r2, #255	@ 0xff
 8007972:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2203      	movs	r2, #3
 8007978:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e084      	b.n	8007a92 <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	d0e2      	beq.n	800795c <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69fa      	ldr	r2, [r7, #28]
 800799c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689a      	ldr	r2, [r3, #8]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079b4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689a      	ldr	r2, [r3, #8]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80079c4:	609a      	str	r2, [r3, #8]
 80079c6:	e049      	b.n	8007a5c <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689a      	ldr	r2, [r3, #8]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80079d6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80079e8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80079ea:	f7fb fcbd 	bl	8003368 <HAL_GetTick>
 80079ee:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80079f0:	e015      	b.n	8007a1e <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80079f2:	f7fb fcb9 	bl	8003368 <HAL_GetTick>
 80079f6:	4602      	mov	r2, r0
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a00:	d90d      	bls.n	8007a1e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	22ff      	movs	r2, #255	@ 0xff
 8007a08:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2203      	movs	r2, #3
 8007a0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e039      	b.n	8007a92 <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d0e2      	beq.n	80079f2 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689a      	ldr	r2, [r3, #8]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a4a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a5a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8007a9c <HAL_RTC_SetAlarm_IT+0x278>)
 8007a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a62:	4a0e      	ldr	r2, [pc, #56]	@ (8007a9c <HAL_RTC_SetAlarm_IT+0x278>)
 8007a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a9c <HAL_RTC_SetAlarm_IT+0x278>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a0a      	ldr	r2, [pc, #40]	@ (8007a9c <HAL_RTC_SetAlarm_IT+0x278>)
 8007a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a76:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	22ff      	movs	r2, #255	@ 0xff
 8007a7e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3724      	adds	r7, #36	@ 0x24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd90      	pop	{r4, r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	58000800 	.word	0x58000800

08007aa0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d012      	beq.n	8007adc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00b      	beq.n	8007adc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f831 	bl	8007b2c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007ada:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d012      	beq.n	8007b10 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00b      	beq.n	8007b10 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f891 	bl	8007c20 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8007b0e:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007b10:	4b05      	ldr	r3, [pc, #20]	@ (8007b28 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007b12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007b16:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8007b20:	bf00      	nop
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	58000800 	.word	0x58000800

08007b2c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007b56:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007b58:	f7fb fc06 	bl	8003368 <HAL_GetTick>
 8007b5c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b5e:	e009      	b.n	8007b74 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b60:	f7fb fc02 	bl	8003368 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b6e:	d901      	bls.n	8007b74 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e007      	b.n	8007b84 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d0ee      	beq.n	8007b60 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d119      	bne.n	8007bd6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8007baa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007bac:	f7fb fbdc 	bl	8003368 <HAL_GetTick>
 8007bb0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007bb2:	e009      	b.n	8007bc8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007bb4:	f7fb fbd8 	bl	8003368 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bc2:	d901      	bls.n	8007bc8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e007      	b.n	8007bd8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0ee      	beq.n	8007bb4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	4603      	mov	r3, r0
 8007be8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8007bf2:	e005      	b.n	8007c00 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8007bfa:	7afb      	ldrb	r3, [r7, #11]
 8007bfc:	3b0a      	subs	r3, #10
 8007bfe:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8007c00:	7afb      	ldrb	r3, [r7, #11]
 8007c02:	2b09      	cmp	r3, #9
 8007c04:	d8f6      	bhi.n	8007bf4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	7afb      	ldrb	r3, [r7, #11]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	b2db      	uxtb	r3, r3
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e0aa      	b.n	8007d9c <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d106      	bne.n	8007c5c <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7fa fea8 	bl	80029ac <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 0201 	bic.w	r2, r2, #1
 8007c70:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007c7e:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	695a      	ldr	r2, [r3, #20]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c8e:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	695a      	ldr	r2, [r3, #20]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007c9e:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007ca8:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	689a      	ldr	r2, [r3, #8]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007cb8:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d012      	beq.n	8007ce8 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d107      	bne.n	8007cda <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68da      	ldr	r2, [r3, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007cd6:	609a      	str	r2, [r3, #8]
 8007cd8:	e006      	b.n	8007ce8 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007ce6:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d104      	bne.n	8007cfa <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007cf8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	6812      	ldr	r2, [r2, #0]
 8007d04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	695a      	ldr	r2, [r3, #20]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a1a      	ldr	r2, [r3, #32]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d30:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007d36:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3c:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007d48:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007d4a:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d54:	d110      	bne.n	8007d78 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d004      	beq.n	8007d68 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007d62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d66:	d107      	bne.n	8007d78 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007d76:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0201 	orr.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	641a      	str	r2, [r3, #64]	@ 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	649a      	str	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e095      	b.n	8007ee2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d108      	bne.n	8007dd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007dc6:	d009      	beq.n	8007ddc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	61da      	str	r2, [r3, #28]
 8007dce:	e005      	b.n	8007ddc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d106      	bne.n	8007dfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7fa ff16 	bl	8002c28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e1c:	d902      	bls.n	8007e24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	e002      	b.n	8007e2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007e24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007e32:	d007      	beq.n	8007e44 <HAL_SPI_Init+0xa0>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e3c:	d002      	beq.n	8007e44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007e54:	431a      	orrs	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e72:	431a      	orrs	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e86:	ea42 0103 	orr.w	r1, r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e8e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	0c1b      	lsrs	r3, r3, #16
 8007ea0:	f003 0204 	and.w	r2, r3, #4
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea8:	f003 0310 	and.w	r3, r3, #16
 8007eac:	431a      	orrs	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eb2:	f003 0308 	and.w	r3, r3, #8
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007ec0:	ea42 0103 	orr.w	r1, r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b082      	sub	sp, #8
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e049      	b.n	8007f90 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d106      	bne.n	8007f16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7fa fecd 	bl	8002cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2202      	movs	r2, #2
 8007f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3304      	adds	r3, #4
 8007f26:	4619      	mov	r1, r3
 8007f28:	4610      	mov	r0, r2
 8007f2a:	f000 f9b1 	bl	8008290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d020      	beq.n	8007ffc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01b      	beq.n	8007ffc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f06f 0202 	mvn.w	r2, #2
 8007fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	f003 0303 	and.w	r3, r3, #3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f935 	bl	8008252 <HAL_TIM_IC_CaptureCallback>
 8007fe8:	e005      	b.n	8007ff6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f927 	bl	800823e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f938 	bl	8008266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f003 0304 	and.w	r3, r3, #4
 8008002:	2b00      	cmp	r3, #0
 8008004:	d020      	beq.n	8008048 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b00      	cmp	r3, #0
 800800e:	d01b      	beq.n	8008048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f06f 0204 	mvn.w	r2, #4
 8008018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2202      	movs	r2, #2
 800801e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f90f 	bl	8008252 <HAL_TIM_IC_CaptureCallback>
 8008034:	e005      	b.n	8008042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f901 	bl	800823e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f912 	bl	8008266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f003 0308 	and.w	r3, r3, #8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d020      	beq.n	8008094 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f003 0308 	and.w	r3, r3, #8
 8008058:	2b00      	cmp	r3, #0
 800805a:	d01b      	beq.n	8008094 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f06f 0208 	mvn.w	r2, #8
 8008064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2204      	movs	r2, #4
 800806a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f8e9 	bl	8008252 <HAL_TIM_IC_CaptureCallback>
 8008080:	e005      	b.n	800808e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f8db 	bl	800823e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f8ec 	bl	8008266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f003 0310 	and.w	r3, r3, #16
 800809a:	2b00      	cmp	r3, #0
 800809c:	d020      	beq.n	80080e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f003 0310 	and.w	r3, r3, #16
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d01b      	beq.n	80080e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f06f 0210 	mvn.w	r2, #16
 80080b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2208      	movs	r2, #8
 80080b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f8c3 	bl	8008252 <HAL_TIM_IC_CaptureCallback>
 80080cc:	e005      	b.n	80080da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f8b5 	bl	800823e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f8c6 	bl	8008266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00c      	beq.n	8008104 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d007      	beq.n	8008104 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f06f 0201 	mvn.w	r2, #1
 80080fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f893 	bl	800822a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800810a:	2b00      	cmp	r3, #0
 800810c:	d104      	bne.n	8008118 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00c      	beq.n	8008132 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800811e:	2b00      	cmp	r3, #0
 8008120:	d007      	beq.n	8008132 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800812a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 faff 	bl	8008730 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00c      	beq.n	8008156 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008142:	2b00      	cmp	r3, #0
 8008144:	d007      	beq.n	8008156 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800814e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 faf7 	bl	8008744 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00c      	beq.n	800817a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008166:	2b00      	cmp	r3, #0
 8008168:	d007      	beq.n	800817a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f880 	bl	800827a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f003 0320 	and.w	r3, r3, #32
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00c      	beq.n	800819e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	d007      	beq.n	800819e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f06f 0220 	mvn.w	r2, #32
 8008196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fabf 	bl	800871c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800819e:	bf00      	nop
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b082      	sub	sp, #8
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d101      	bne.n	80081be <HAL_TIM_SlaveConfigSynchro+0x18>
 80081ba:	2302      	movs	r3, #2
 80081bc:	e031      	b.n	8008222 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2202      	movs	r2, #2
 80081ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f8cd 	bl	8008370 <TIM_SlaveTimer_SetConfig>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d009      	beq.n	80081f0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e018      	b.n	8008222 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68da      	ldr	r2, [r3, #12]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081fe:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800820e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800822a:	b480      	push	{r7}
 800822c:	b083      	sub	sp, #12
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008232:	bf00      	nop
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800823e:	b480      	push	{r7}
 8008240:	b083      	sub	sp, #12
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008246:	bf00      	nop
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008252:	b480      	push	{r7}
 8008254:	b083      	sub	sp, #12
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800825a:	bf00      	nop
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800826e:	bf00      	nop
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800827a:	b480      	push	{r7}
 800827c:	b083      	sub	sp, #12
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008282:	bf00      	nop
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
	...

08008290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a30      	ldr	r2, [pc, #192]	@ (8008364 <TIM_Base_SetConfig+0xd4>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d003      	beq.n	80082b0 <TIM_Base_SetConfig+0x20>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ae:	d108      	bne.n	80082c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	4313      	orrs	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a27      	ldr	r2, [pc, #156]	@ (8008364 <TIM_Base_SetConfig+0xd4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d00b      	beq.n	80082e2 <TIM_Base_SetConfig+0x52>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082d0:	d007      	beq.n	80082e2 <TIM_Base_SetConfig+0x52>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a24      	ldr	r2, [pc, #144]	@ (8008368 <TIM_Base_SetConfig+0xd8>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d003      	beq.n	80082e2 <TIM_Base_SetConfig+0x52>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a23      	ldr	r2, [pc, #140]	@ (800836c <TIM_Base_SetConfig+0xdc>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d108      	bne.n	80082f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a12      	ldr	r2, [pc, #72]	@ (8008364 <TIM_Base_SetConfig+0xd4>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d007      	beq.n	8008330 <TIM_Base_SetConfig+0xa0>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a11      	ldr	r2, [pc, #68]	@ (8008368 <TIM_Base_SetConfig+0xd8>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d003      	beq.n	8008330 <TIM_Base_SetConfig+0xa0>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a10      	ldr	r2, [pc, #64]	@ (800836c <TIM_Base_SetConfig+0xdc>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d103      	bne.n	8008338 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	691a      	ldr	r2, [r3, #16]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b01      	cmp	r3, #1
 8008348:	d105      	bne.n	8008356 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	f023 0201 	bic.w	r2, r3, #1
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	611a      	str	r2, [r3, #16]
  }
}
 8008356:	bf00      	nop
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	40012c00 	.word	0x40012c00
 8008368:	40014400 	.word	0x40014400
 800836c:	40014800 	.word	0x40014800

08008370 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800838c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008390:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	4313      	orrs	r3, r2
 800839a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083a2:	f023 0307 	bic.w	r3, r3, #7
 80083a6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	693a      	ldr	r2, [r7, #16]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	2b70      	cmp	r3, #112	@ 0x70
 80083c0:	d01a      	beq.n	80083f8 <TIM_SlaveTimer_SetConfig+0x88>
 80083c2:	2b70      	cmp	r3, #112	@ 0x70
 80083c4:	d860      	bhi.n	8008488 <TIM_SlaveTimer_SetConfig+0x118>
 80083c6:	2b60      	cmp	r3, #96	@ 0x60
 80083c8:	d054      	beq.n	8008474 <TIM_SlaveTimer_SetConfig+0x104>
 80083ca:	2b60      	cmp	r3, #96	@ 0x60
 80083cc:	d85c      	bhi.n	8008488 <TIM_SlaveTimer_SetConfig+0x118>
 80083ce:	2b50      	cmp	r3, #80	@ 0x50
 80083d0:	d046      	beq.n	8008460 <TIM_SlaveTimer_SetConfig+0xf0>
 80083d2:	2b50      	cmp	r3, #80	@ 0x50
 80083d4:	d858      	bhi.n	8008488 <TIM_SlaveTimer_SetConfig+0x118>
 80083d6:	2b40      	cmp	r3, #64	@ 0x40
 80083d8:	d019      	beq.n	800840e <TIM_SlaveTimer_SetConfig+0x9e>
 80083da:	2b40      	cmp	r3, #64	@ 0x40
 80083dc:	d854      	bhi.n	8008488 <TIM_SlaveTimer_SetConfig+0x118>
 80083de:	2b30      	cmp	r3, #48	@ 0x30
 80083e0:	d055      	beq.n	800848e <TIM_SlaveTimer_SetConfig+0x11e>
 80083e2:	2b30      	cmp	r3, #48	@ 0x30
 80083e4:	d850      	bhi.n	8008488 <TIM_SlaveTimer_SetConfig+0x118>
 80083e6:	2b20      	cmp	r3, #32
 80083e8:	d051      	beq.n	800848e <TIM_SlaveTimer_SetConfig+0x11e>
 80083ea:	2b20      	cmp	r3, #32
 80083ec:	d84c      	bhi.n	8008488 <TIM_SlaveTimer_SetConfig+0x118>
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d04d      	beq.n	800848e <TIM_SlaveTimer_SetConfig+0x11e>
 80083f2:	2b10      	cmp	r3, #16
 80083f4:	d04b      	beq.n	800848e <TIM_SlaveTimer_SetConfig+0x11e>
 80083f6:	e047      	b.n	8008488 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008408:	f000 f8a6 	bl	8008558 <TIM_ETR_SetConfig>
      break;
 800840c:	e040      	b.n	8008490 <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b05      	cmp	r3, #5
 8008414:	d101      	bne.n	800841a <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e03b      	b.n	8008492 <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6a1b      	ldr	r3, [r3, #32]
 8008420:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	6a1a      	ldr	r2, [r3, #32]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f022 0201 	bic.w	r2, r2, #1
 8008430:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008440:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	011b      	lsls	r3, r3, #4
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	4313      	orrs	r3, r2
 800844c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	621a      	str	r2, [r3, #32]
      break;
 800845e:	e017      	b.n	8008490 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800846c:	461a      	mov	r2, r3
 800846e:	f000 f814 	bl	800849a <TIM_TI1_ConfigInputStage>
      break;
 8008472:	e00d      	b.n	8008490 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008480:	461a      	mov	r2, r3
 8008482:	f000 f839 	bl	80084f8 <TIM_TI2_ConfigInputStage>
      break;
 8008486:	e003      	b.n	8008490 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	75fb      	strb	r3, [r7, #23]
      break;
 800848c:	e000      	b.n	8008490 <TIM_SlaveTimer_SetConfig+0x120>
      break;
 800848e:	bf00      	nop
  }

  return status;
 8008490:	7dfb      	ldrb	r3, [r7, #23]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800849a:	b480      	push	{r7}
 800849c:	b087      	sub	sp, #28
 800849e:	af00      	add	r7, sp, #0
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	60b9      	str	r1, [r7, #8]
 80084a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6a1b      	ldr	r3, [r3, #32]
 80084b0:	f023 0201 	bic.w	r2, r3, #1
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	f023 030a 	bic.w	r3, r3, #10
 80084d6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	4313      	orrs	r3, r2
 80084de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	621a      	str	r2, [r3, #32]
}
 80084ec:	bf00      	nop
 80084ee:	371c      	adds	r7, #28
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	f023 0210 	bic.w	r2, r3, #16
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	031b      	lsls	r3, r3, #12
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008534:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	011b      	lsls	r3, r3, #4
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	4313      	orrs	r3, r2
 800853e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	621a      	str	r2, [r3, #32]
}
 800854c:	bf00      	nop
 800854e:	371c      	adds	r7, #28
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008572:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	021a      	lsls	r2, r3, #8
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	431a      	orrs	r2, r3
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	4313      	orrs	r3, r2
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	609a      	str	r2, [r3, #8]
}
 800858c:	bf00      	nop
 800858e:	371c      	adds	r7, #28
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d101      	bne.n	80085b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085ac:	2302      	movs	r3, #2
 80085ae:	e04a      	b.n	8008646 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008654 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d108      	bne.n	80085ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80085e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a12      	ldr	r2, [pc, #72]	@ (8008654 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d004      	beq.n	800861a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008618:	d10c      	bne.n	8008634 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	4313      	orrs	r3, r2
 800862a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	40012c00 	.word	0x40012c00

08008658 <HAL_TIMEx_RemapConfig>:
  *         (*)  Value not defined in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  uint32_t tmpaf1;

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008668:	2b01      	cmp	r3, #1
 800866a:	d101      	bne.n	8008670 <HAL_TIMEx_RemapConfig+0x18>
 800866c:	2302      	movs	r3, #2
 800866e:	e04d      	b.n	800870c <HAL_TIMEx_RemapConfig+0xb4>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Read TIMx_OR */
  tmpor = READ_REG(htim->Instance->OR);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800867e:	60bb      	str	r3, [r7, #8]

  /* Read TIMx_AF1 */
  tmpaf1 = READ_REG(htim->Instance->AF1);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008686:	60fb      	str	r3, [r7, #12]

  /* Set ETR_SEL bit field (if required) */
  if (IS_TIM_ETRSEL_INSTANCE(htim->Instance))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a22      	ldr	r2, [pc, #136]	@ (8008718 <HAL_TIMEx_RemapConfig+0xc0>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d004      	beq.n	800869c <HAL_TIMEx_RemapConfig+0x44>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800869a:	d115      	bne.n	80086c8 <HAL_TIMEx_RemapConfig+0x70>
  {
    if ((Remap & TIM1_AF1_ETRSEL) != (uint32_t)RESET)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	f403 33e0 	and.w	r3, r3, #114688	@ 0x1c000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d008      	beq.n	80086b8 <HAL_TIMEx_RemapConfig+0x60>
    {
      /* COMP1 output or COMP2 output connected to ETR input */
      MODIFY_REG(tmpaf1, TIM1_AF1_ETRSEL, (Remap & TIM1_AF1_ETRSEL));
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f423 32e0 	bic.w	r2, r3, #114688	@ 0x1c000
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	f403 33e0 	and.w	r3, r3, #114688	@ 0x1c000
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	e003      	b.n	80086c0 <HAL_TIMEx_RemapConfig+0x68>
    }
    else
    {
      /* ETR legacy mode */
      MODIFY_REG(tmpaf1, TIM1_AF1_ETRSEL, 0U);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f423 33e0 	bic.w	r3, r3, #114688	@ 0x1c000
 80086be:	60fb      	str	r3, [r7, #12]
    }

    /* Set TIMx_AF1 */
    WRITE_REG(htim->Instance->AF1, tmpaf1);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Set other remapping capabilities */
  MODIFY_REG(tmpor, TIM_GET_OR_MASK(htim->Instance), (Remap & (~TIM1_AF1_ETRSEL)));
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a12      	ldr	r2, [pc, #72]	@ (8008718 <HAL_TIMEx_RemapConfig+0xc0>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d00a      	beq.n	80086e8 <HAL_TIMEx_RemapConfig+0x90>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086da:	d102      	bne.n	80086e2 <HAL_TIMEx_RemapConfig+0x8a>
 80086dc:	f06f 030f 	mvn.w	r3, #15
 80086e0:	e004      	b.n	80086ec <HAL_TIMEx_RemapConfig+0x94>
 80086e2:	f06f 0303 	mvn.w	r3, #3
 80086e6:	e001      	b.n	80086ec <HAL_TIMEx_RemapConfig+0x94>
 80086e8:	f06f 0313 	mvn.w	r3, #19
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	401a      	ands	r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	f423 33e0 	bic.w	r3, r3, #114688	@ 0x1c000
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60bb      	str	r3, [r7, #8]

  /* Set TIMx_OR */
  WRITE_REG(htim->Instance->OR, tmpor);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	40012c00 	.word	0x40012c00

0800871c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <LL_RCC_GetUSARTClockSource>:
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008764:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4013      	ands	r3, r2
}
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <LL_RCC_GetLPUARTClockSource>:
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008784:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4013      	ands	r3, r2
}
 800878c:	4618      	mov	r0, r3
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e042      	b.n	8008830 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d106      	bne.n	80087c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7fa fb11 	bl	8002de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2224      	movs	r2, #36	@ 0x24
 80087c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f022 0201 	bic.w	r2, r2, #1
 80087d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d002      	beq.n	80087e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fe32 	bl	800944c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fc07 	bl	8008ffc <UART_SetConfig>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e01b      	b.n	8008830 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685a      	ldr	r2, [r3, #4]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f042 0201 	orr.w	r2, r2, #1
 8008826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 feb1 	bl	8009590 <UART_CheckIdleState>
 800882e:	4603      	mov	r3, r0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08a      	sub	sp, #40	@ 0x28
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	4613      	mov	r3, r2
 8008844:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800884c:	2b20      	cmp	r3, #32
 800884e:	d167      	bne.n	8008920 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d002      	beq.n	800885c <HAL_UART_Transmit_DMA+0x24>
 8008856:	88fb      	ldrh	r3, [r7, #6]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d101      	bne.n	8008860 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e060      	b.n	8008922 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	88fa      	ldrh	r2, [r7, #6]
 800886a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	88fa      	ldrh	r2, [r7, #6]
 8008872:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2221      	movs	r2, #33	@ 0x21
 8008882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800888a:	2b00      	cmp	r3, #0
 800888c:	d028      	beq.n	80088e0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008892:	4a26      	ldr	r2, [pc, #152]	@ (800892c <HAL_UART_Transmit_DMA+0xf4>)
 8008894:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800889a:	4a25      	ldr	r2, [pc, #148]	@ (8008930 <HAL_UART_Transmit_DMA+0xf8>)
 800889c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088a2:	4a24      	ldr	r2, [pc, #144]	@ (8008934 <HAL_UART_Transmit_DMA+0xfc>)
 80088a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088aa:	2200      	movs	r2, #0
 80088ac:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088b6:	4619      	mov	r1, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3328      	adds	r3, #40	@ 0x28
 80088be:	461a      	mov	r2, r3
 80088c0:	88fb      	ldrh	r3, [r7, #6]
 80088c2:	f7fb ff09 	bl	80046d8 <HAL_DMA_Start_IT>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d009      	beq.n	80088e0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2210      	movs	r2, #16
 80088d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2220      	movs	r2, #32
 80088d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e020      	b.n	8008922 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2240      	movs	r2, #64	@ 0x40
 80088e6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3308      	adds	r3, #8
 80088ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	e853 3f00 	ldrex	r3, [r3]
 80088f6:	613b      	str	r3, [r7, #16]
   return(result);
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3308      	adds	r3, #8
 8008906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008908:	623a      	str	r2, [r7, #32]
 800890a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890c:	69f9      	ldr	r1, [r7, #28]
 800890e:	6a3a      	ldr	r2, [r7, #32]
 8008910:	e841 2300 	strex	r3, r2, [r1]
 8008914:	61bb      	str	r3, [r7, #24]
   return(result);
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1e5      	bne.n	80088e8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	e000      	b.n	8008922 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008920:	2302      	movs	r3, #2
  }
}
 8008922:	4618      	mov	r0, r3
 8008924:	3728      	adds	r7, #40	@ 0x28
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	0800990d 	.word	0x0800990d
 8008930:	080099a7 	.word	0x080099a7
 8008934:	080099c3 	.word	0x080099c3

08008938 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b0ba      	sub	sp, #232	@ 0xe8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800895e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008962:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008966:	4013      	ands	r3, r2
 8008968:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800896c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008970:	2b00      	cmp	r3, #0
 8008972:	d11b      	bne.n	80089ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008978:	f003 0320 	and.w	r3, r3, #32
 800897c:	2b00      	cmp	r3, #0
 800897e:	d015      	beq.n	80089ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008984:	f003 0320 	and.w	r3, r3, #32
 8008988:	2b00      	cmp	r3, #0
 800898a:	d105      	bne.n	8008998 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800898c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d009      	beq.n	80089ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 8300 	beq.w	8008fa2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	4798      	blx	r3
      }
      return;
 80089aa:	e2fa      	b.n	8008fa2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80089ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 8123 	beq.w	8008bfc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80089b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80089ba:	4b8d      	ldr	r3, [pc, #564]	@ (8008bf0 <HAL_UART_IRQHandler+0x2b8>)
 80089bc:	4013      	ands	r3, r2
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d106      	bne.n	80089d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80089c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80089c6:	4b8b      	ldr	r3, [pc, #556]	@ (8008bf4 <HAL_UART_IRQHandler+0x2bc>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 8116 	beq.w	8008bfc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80089d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d011      	beq.n	8008a00 <HAL_UART_IRQHandler+0xc8>
 80089dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2201      	movs	r2, #1
 80089ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089f6:	f043 0201 	orr.w	r2, r3, #1
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d011      	beq.n	8008a30 <HAL_UART_IRQHandler+0xf8>
 8008a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00b      	beq.n	8008a30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a26:	f043 0204 	orr.w	r2, r3, #4
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a34:	f003 0304 	and.w	r3, r3, #4
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d011      	beq.n	8008a60 <HAL_UART_IRQHandler+0x128>
 8008a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00b      	beq.n	8008a60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2204      	movs	r2, #4
 8008a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a56:	f043 0202 	orr.w	r2, r3, #2
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a64:	f003 0308 	and.w	r3, r3, #8
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d017      	beq.n	8008a9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a70:	f003 0320 	and.w	r3, r3, #32
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d105      	bne.n	8008a84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008a78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8008bf0 <HAL_UART_IRQHandler+0x2b8>)
 8008a7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00b      	beq.n	8008a9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2208      	movs	r2, #8
 8008a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a92:	f043 0208 	orr.w	r2, r3, #8
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d012      	beq.n	8008ace <HAL_UART_IRQHandler+0x196>
 8008aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00c      	beq.n	8008ace <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008abc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ac4:	f043 0220 	orr.w	r2, r3, #32
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 8266 	beq.w	8008fa6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ade:	f003 0320 	and.w	r3, r3, #32
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d013      	beq.n	8008b0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aea:	f003 0320 	and.w	r3, r3, #32
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d105      	bne.n	8008afe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d007      	beq.n	8008b0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b22:	2b40      	cmp	r3, #64	@ 0x40
 8008b24:	d005      	beq.n	8008b32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d054      	beq.n	8008bdc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fe84 	bl	8009840 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b42:	2b40      	cmp	r3, #64	@ 0x40
 8008b44:	d146      	bne.n	8008bd4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3308      	adds	r3, #8
 8008b4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b54:	e853 3f00 	ldrex	r3, [r3]
 8008b58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3308      	adds	r3, #8
 8008b6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008b72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008b76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008b7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008b82:	e841 2300 	strex	r3, r2, [r1]
 8008b86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008b8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1d9      	bne.n	8008b46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d017      	beq.n	8008bcc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ba2:	4a15      	ldr	r2, [pc, #84]	@ (8008bf8 <HAL_UART_IRQHandler+0x2c0>)
 8008ba4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7fb fe6d 	bl	800488c <HAL_DMA_Abort_IT>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d019      	beq.n	8008bec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bca:	e00f      	b.n	8008bec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f9ff 	bl	8008fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd2:	e00b      	b.n	8008bec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f9fb 	bl	8008fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bda:	e007      	b.n	8008bec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f9f7 	bl	8008fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008bea:	e1dc      	b.n	8008fa6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bec:	bf00      	nop
    return;
 8008bee:	e1da      	b.n	8008fa6 <HAL_UART_IRQHandler+0x66e>
 8008bf0:	10000001 	.word	0x10000001
 8008bf4:	04000120 	.word	0x04000120
 8008bf8:	08009a43 	.word	0x08009a43

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	f040 8170 	bne.w	8008ee6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c0a:	f003 0310 	and.w	r3, r3, #16
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 8169 	beq.w	8008ee6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c18:	f003 0310 	and.w	r3, r3, #16
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 8162 	beq.w	8008ee6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2210      	movs	r2, #16
 8008c28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c34:	2b40      	cmp	r3, #64	@ 0x40
 8008c36:	f040 80d8 	bne.w	8008dea <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f000 80af 	beq.w	8008db0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008c58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	f080 80a7 	bcs.w	8008db0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0320 	and.w	r3, r3, #32
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f040 8087 	bne.w	8008d8e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008c8c:	e853 3f00 	ldrex	r3, [r3]
 8008c90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008c98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008caa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008cae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008cb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1da      	bne.n	8008c80 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3308      	adds	r3, #8
 8008cd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008cd4:	e853 3f00 	ldrex	r3, [r3]
 8008cd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008cda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008cdc:	f023 0301 	bic.w	r3, r3, #1
 8008ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3308      	adds	r3, #8
 8008cea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008cee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008cf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008cfa:	e841 2300 	strex	r3, r2, [r1]
 8008cfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1e1      	bne.n	8008cca <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3308      	adds	r3, #8
 8008d26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008d2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d32:	e841 2300 	strex	r3, r2, [r1]
 8008d36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1e3      	bne.n	8008d06 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2220      	movs	r2, #32
 8008d42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d54:	e853 3f00 	ldrex	r3, [r3]
 8008d58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d5c:	f023 0310 	bic.w	r3, r3, #16
 8008d60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008d7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e4      	bne.n	8008d4c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fb fd20 	bl	80047ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2202      	movs	r2, #2
 8008d92:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f91b 	bl	8008fe4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008dae:	e0fc      	b.n	8008faa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	f040 80f5 	bne.w	8008faa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0320 	and.w	r3, r3, #32
 8008dce:	2b20      	cmp	r3, #32
 8008dd0:	f040 80eb 	bne.w	8008faa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f8fe 	bl	8008fe4 <HAL_UARTEx_RxEventCallback>
      return;
 8008de8:	e0df      	b.n	8008faa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f000 80d1 	beq.w	8008fae <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 80cc 	beq.w	8008fae <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1e:	e853 3f00 	ldrex	r3, [r3]
 8008e22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	461a      	mov	r2, r3
 8008e34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e38:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e40:	e841 2300 	strex	r3, r2, [r1]
 8008e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e4      	bne.n	8008e16 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	3308      	adds	r3, #8
 8008e52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e56:	e853 3f00 	ldrex	r3, [r3]
 8008e5a:	623b      	str	r3, [r7, #32]
   return(result);
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e62:	f023 0301 	bic.w	r3, r3, #1
 8008e66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3308      	adds	r3, #8
 8008e70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008e74:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e7c:	e841 2300 	strex	r3, r2, [r1]
 8008e80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e1      	bne.n	8008e4c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2220      	movs	r2, #32
 8008e8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	e853 3f00 	ldrex	r3, [r3]
 8008ea8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f023 0310 	bic.w	r3, r3, #16
 8008eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008ebe:	61fb      	str	r3, [r7, #28]
 8008ec0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec2:	69b9      	ldr	r1, [r7, #24]
 8008ec4:	69fa      	ldr	r2, [r7, #28]
 8008ec6:	e841 2300 	strex	r3, r2, [r1]
 8008eca:	617b      	str	r3, [r7, #20]
   return(result);
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1e4      	bne.n	8008e9c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008edc:	4619      	mov	r1, r3
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f880 	bl	8008fe4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ee4:	e063      	b.n	8008fae <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00e      	beq.n	8008f10 <HAL_UART_IRQHandler+0x5d8>
 8008ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d008      	beq.n	8008f10 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008f06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fdd7 	bl	8009abc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f0e:	e051      	b.n	8008fb4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d014      	beq.n	8008f46 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d105      	bne.n	8008f34 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d008      	beq.n	8008f46 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d03a      	beq.n	8008fb2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	4798      	blx	r3
    }
    return;
 8008f44:	e035      	b.n	8008fb2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d009      	beq.n	8008f66 <HAL_UART_IRQHandler+0x62e>
 8008f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fd81 	bl	8009a66 <UART_EndTransmit_IT>
    return;
 8008f64:	e026      	b.n	8008fb4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d009      	beq.n	8008f86 <HAL_UART_IRQHandler+0x64e>
 8008f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f76:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 fdb0 	bl	8009ae4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f84:	e016      	b.n	8008fb4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d010      	beq.n	8008fb4 <HAL_UART_IRQHandler+0x67c>
 8008f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	da0c      	bge.n	8008fb4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fd98 	bl	8009ad0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fa0:	e008      	b.n	8008fb4 <HAL_UART_IRQHandler+0x67c>
      return;
 8008fa2:	bf00      	nop
 8008fa4:	e006      	b.n	8008fb4 <HAL_UART_IRQHandler+0x67c>
    return;
 8008fa6:	bf00      	nop
 8008fa8:	e004      	b.n	8008fb4 <HAL_UART_IRQHandler+0x67c>
      return;
 8008faa:	bf00      	nop
 8008fac:	e002      	b.n	8008fb4 <HAL_UART_IRQHandler+0x67c>
      return;
 8008fae:	bf00      	nop
 8008fb0:	e000      	b.n	8008fb4 <HAL_UART_IRQHandler+0x67c>
    return;
 8008fb2:	bf00      	nop
  }
}
 8008fb4:	37e8      	adds	r7, #232	@ 0xe8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop

08008fbc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009000:	b08c      	sub	sp, #48	@ 0x30
 8009002:	af00      	add	r7, sp, #0
 8009004:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	689a      	ldr	r2, [r3, #8]
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	431a      	orrs	r2, r3
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	431a      	orrs	r2, r3
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	69db      	ldr	r3, [r3, #28]
 8009020:	4313      	orrs	r3, r2
 8009022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	4baf      	ldr	r3, [pc, #700]	@ (80092e8 <UART_SetConfig+0x2ec>)
 800902c:	4013      	ands	r3, r2
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	6812      	ldr	r2, [r2, #0]
 8009032:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009034:	430b      	orrs	r3, r1
 8009036:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	68da      	ldr	r2, [r3, #12]
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	430a      	orrs	r2, r1
 800904c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4aa4      	ldr	r2, [pc, #656]	@ (80092ec <UART_SetConfig+0x2f0>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d004      	beq.n	8009068 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009064:	4313      	orrs	r3, r2
 8009066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009072:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	6812      	ldr	r2, [r2, #0]
 800907a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800907c:	430b      	orrs	r3, r1
 800907e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009086:	f023 010f 	bic.w	r1, r3, #15
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	430a      	orrs	r2, r1
 8009094:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a95      	ldr	r2, [pc, #596]	@ (80092f0 <UART_SetConfig+0x2f4>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d125      	bne.n	80090ec <UART_SetConfig+0xf0>
 80090a0:	2003      	movs	r0, #3
 80090a2:	f7ff fb59 	bl	8008758 <LL_RCC_GetUSARTClockSource>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b03      	cmp	r3, #3
 80090aa:	d81b      	bhi.n	80090e4 <UART_SetConfig+0xe8>
 80090ac:	a201      	add	r2, pc, #4	@ (adr r2, 80090b4 <UART_SetConfig+0xb8>)
 80090ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b2:	bf00      	nop
 80090b4:	080090c5 	.word	0x080090c5
 80090b8:	080090d5 	.word	0x080090d5
 80090bc:	080090cd 	.word	0x080090cd
 80090c0:	080090dd 	.word	0x080090dd
 80090c4:	2301      	movs	r3, #1
 80090c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ca:	e042      	b.n	8009152 <UART_SetConfig+0x156>
 80090cc:	2302      	movs	r3, #2
 80090ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090d2:	e03e      	b.n	8009152 <UART_SetConfig+0x156>
 80090d4:	2304      	movs	r3, #4
 80090d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090da:	e03a      	b.n	8009152 <UART_SetConfig+0x156>
 80090dc:	2308      	movs	r3, #8
 80090de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090e2:	e036      	b.n	8009152 <UART_SetConfig+0x156>
 80090e4:	2310      	movs	r3, #16
 80090e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ea:	e032      	b.n	8009152 <UART_SetConfig+0x156>
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a7e      	ldr	r2, [pc, #504]	@ (80092ec <UART_SetConfig+0x2f0>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d12a      	bne.n	800914c <UART_SetConfig+0x150>
 80090f6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80090fa:	f7ff fb3d 	bl	8008778 <LL_RCC_GetLPUARTClockSource>
 80090fe:	4603      	mov	r3, r0
 8009100:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009104:	d01a      	beq.n	800913c <UART_SetConfig+0x140>
 8009106:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800910a:	d81b      	bhi.n	8009144 <UART_SetConfig+0x148>
 800910c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009110:	d00c      	beq.n	800912c <UART_SetConfig+0x130>
 8009112:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009116:	d815      	bhi.n	8009144 <UART_SetConfig+0x148>
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <UART_SetConfig+0x128>
 800911c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009120:	d008      	beq.n	8009134 <UART_SetConfig+0x138>
 8009122:	e00f      	b.n	8009144 <UART_SetConfig+0x148>
 8009124:	2300      	movs	r3, #0
 8009126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800912a:	e012      	b.n	8009152 <UART_SetConfig+0x156>
 800912c:	2302      	movs	r3, #2
 800912e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009132:	e00e      	b.n	8009152 <UART_SetConfig+0x156>
 8009134:	2304      	movs	r3, #4
 8009136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800913a:	e00a      	b.n	8009152 <UART_SetConfig+0x156>
 800913c:	2308      	movs	r3, #8
 800913e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009142:	e006      	b.n	8009152 <UART_SetConfig+0x156>
 8009144:	2310      	movs	r3, #16
 8009146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800914a:	e002      	b.n	8009152 <UART_SetConfig+0x156>
 800914c:	2310      	movs	r3, #16
 800914e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a65      	ldr	r2, [pc, #404]	@ (80092ec <UART_SetConfig+0x2f0>)
 8009158:	4293      	cmp	r3, r2
 800915a:	f040 8097 	bne.w	800928c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800915e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009162:	2b08      	cmp	r3, #8
 8009164:	d823      	bhi.n	80091ae <UART_SetConfig+0x1b2>
 8009166:	a201      	add	r2, pc, #4	@ (adr r2, 800916c <UART_SetConfig+0x170>)
 8009168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916c:	08009191 	.word	0x08009191
 8009170:	080091af 	.word	0x080091af
 8009174:	08009199 	.word	0x08009199
 8009178:	080091af 	.word	0x080091af
 800917c:	0800919f 	.word	0x0800919f
 8009180:	080091af 	.word	0x080091af
 8009184:	080091af 	.word	0x080091af
 8009188:	080091af 	.word	0x080091af
 800918c:	080091a7 	.word	0x080091a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009190:	f7fd fbac 	bl	80068ec <HAL_RCC_GetPCLK1Freq>
 8009194:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009196:	e010      	b.n	80091ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009198:	4b56      	ldr	r3, [pc, #344]	@ (80092f4 <UART_SetConfig+0x2f8>)
 800919a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800919c:	e00d      	b.n	80091ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800919e:	f7fd fb25 	bl	80067ec <HAL_RCC_GetSysClockFreq>
 80091a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091a4:	e009      	b.n	80091ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091a6:	f248 0306 	movw	r3, #32774	@ 0x8006
 80091aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091ac:	e005      	b.n	80091ba <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80091b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f000 812b 	beq.w	8009418 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c6:	4a4c      	ldr	r2, [pc, #304]	@ (80092f8 <UART_SetConfig+0x2fc>)
 80091c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091cc:	461a      	mov	r2, r3
 80091ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80091d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	685a      	ldr	r2, [r3, #4]
 80091da:	4613      	mov	r3, r2
 80091dc:	005b      	lsls	r3, r3, #1
 80091de:	4413      	add	r3, r2
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d305      	bcc.n	80091f2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091ec:	69ba      	ldr	r2, [r7, #24]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d903      	bls.n	80091fa <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80091f8:	e10e      	b.n	8009418 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fc:	2200      	movs	r2, #0
 80091fe:	60bb      	str	r3, [r7, #8]
 8009200:	60fa      	str	r2, [r7, #12]
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009206:	4a3c      	ldr	r2, [pc, #240]	@ (80092f8 <UART_SetConfig+0x2fc>)
 8009208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800920c:	b29b      	uxth	r3, r3
 800920e:	2200      	movs	r2, #0
 8009210:	603b      	str	r3, [r7, #0]
 8009212:	607a      	str	r2, [r7, #4]
 8009214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009218:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800921c:	f7f7 fcfc 	bl	8000c18 <__aeabi_uldivmod>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4610      	mov	r0, r2
 8009226:	4619      	mov	r1, r3
 8009228:	f04f 0200 	mov.w	r2, #0
 800922c:	f04f 0300 	mov.w	r3, #0
 8009230:	020b      	lsls	r3, r1, #8
 8009232:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009236:	0202      	lsls	r2, r0, #8
 8009238:	6979      	ldr	r1, [r7, #20]
 800923a:	6849      	ldr	r1, [r1, #4]
 800923c:	0849      	lsrs	r1, r1, #1
 800923e:	2000      	movs	r0, #0
 8009240:	460c      	mov	r4, r1
 8009242:	4605      	mov	r5, r0
 8009244:	eb12 0804 	adds.w	r8, r2, r4
 8009248:	eb43 0905 	adc.w	r9, r3, r5
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	469a      	mov	sl, r3
 8009254:	4693      	mov	fp, r2
 8009256:	4652      	mov	r2, sl
 8009258:	465b      	mov	r3, fp
 800925a:	4640      	mov	r0, r8
 800925c:	4649      	mov	r1, r9
 800925e:	f7f7 fcdb 	bl	8000c18 <__aeabi_uldivmod>
 8009262:	4602      	mov	r2, r0
 8009264:	460b      	mov	r3, r1
 8009266:	4613      	mov	r3, r2
 8009268:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800926a:	6a3b      	ldr	r3, [r7, #32]
 800926c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009270:	d308      	bcc.n	8009284 <UART_SetConfig+0x288>
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009278:	d204      	bcs.n	8009284 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	6a3a      	ldr	r2, [r7, #32]
 8009280:	60da      	str	r2, [r3, #12]
 8009282:	e0c9      	b.n	8009418 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800928a:	e0c5      	b.n	8009418 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009294:	d16d      	bne.n	8009372 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009296:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800929a:	3b01      	subs	r3, #1
 800929c:	2b07      	cmp	r3, #7
 800929e:	d82d      	bhi.n	80092fc <UART_SetConfig+0x300>
 80092a0:	a201      	add	r2, pc, #4	@ (adr r2, 80092a8 <UART_SetConfig+0x2ac>)
 80092a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a6:	bf00      	nop
 80092a8:	080092c9 	.word	0x080092c9
 80092ac:	080092d1 	.word	0x080092d1
 80092b0:	080092fd 	.word	0x080092fd
 80092b4:	080092d7 	.word	0x080092d7
 80092b8:	080092fd 	.word	0x080092fd
 80092bc:	080092fd 	.word	0x080092fd
 80092c0:	080092fd 	.word	0x080092fd
 80092c4:	080092df 	.word	0x080092df
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092c8:	f7fd fb26 	bl	8006918 <HAL_RCC_GetPCLK2Freq>
 80092cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092ce:	e01b      	b.n	8009308 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092d0:	4b08      	ldr	r3, [pc, #32]	@ (80092f4 <UART_SetConfig+0x2f8>)
 80092d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80092d4:	e018      	b.n	8009308 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092d6:	f7fd fa89 	bl	80067ec <HAL_RCC_GetSysClockFreq>
 80092da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092dc:	e014      	b.n	8009308 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092de:	f248 0306 	movw	r3, #32774	@ 0x8006
 80092e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80092e4:	e010      	b.n	8009308 <UART_SetConfig+0x30c>
 80092e6:	bf00      	nop
 80092e8:	cfff69f3 	.word	0xcfff69f3
 80092ec:	40008000 	.word	0x40008000
 80092f0:	40013800 	.word	0x40013800
 80092f4:	00f42400 	.word	0x00f42400
 80092f8:	08011d78 	.word	0x08011d78
      default:
        pclk = 0U;
 80092fc:	2300      	movs	r3, #0
 80092fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009306:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 8084 	beq.w	8009418 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009314:	4a4b      	ldr	r2, [pc, #300]	@ (8009444 <UART_SetConfig+0x448>)
 8009316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800931a:	461a      	mov	r2, r3
 800931c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009322:	005a      	lsls	r2, r3, #1
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	085b      	lsrs	r3, r3, #1
 800932a:	441a      	add	r2, r3
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	fbb2 f3f3 	udiv	r3, r2, r3
 8009334:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	2b0f      	cmp	r3, #15
 800933a:	d916      	bls.n	800936a <UART_SetConfig+0x36e>
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009342:	d212      	bcs.n	800936a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	b29b      	uxth	r3, r3
 8009348:	f023 030f 	bic.w	r3, r3, #15
 800934c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800934e:	6a3b      	ldr	r3, [r7, #32]
 8009350:	085b      	lsrs	r3, r3, #1
 8009352:	b29b      	uxth	r3, r3
 8009354:	f003 0307 	and.w	r3, r3, #7
 8009358:	b29a      	uxth	r2, r3
 800935a:	8bfb      	ldrh	r3, [r7, #30]
 800935c:	4313      	orrs	r3, r2
 800935e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	8bfa      	ldrh	r2, [r7, #30]
 8009366:	60da      	str	r2, [r3, #12]
 8009368:	e056      	b.n	8009418 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009370:	e052      	b.n	8009418 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009372:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009376:	3b01      	subs	r3, #1
 8009378:	2b07      	cmp	r3, #7
 800937a:	d822      	bhi.n	80093c2 <UART_SetConfig+0x3c6>
 800937c:	a201      	add	r2, pc, #4	@ (adr r2, 8009384 <UART_SetConfig+0x388>)
 800937e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009382:	bf00      	nop
 8009384:	080093a5 	.word	0x080093a5
 8009388:	080093ad 	.word	0x080093ad
 800938c:	080093c3 	.word	0x080093c3
 8009390:	080093b3 	.word	0x080093b3
 8009394:	080093c3 	.word	0x080093c3
 8009398:	080093c3 	.word	0x080093c3
 800939c:	080093c3 	.word	0x080093c3
 80093a0:	080093bb 	.word	0x080093bb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093a4:	f7fd fab8 	bl	8006918 <HAL_RCC_GetPCLK2Freq>
 80093a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093aa:	e010      	b.n	80093ce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093ac:	4b26      	ldr	r3, [pc, #152]	@ (8009448 <UART_SetConfig+0x44c>)
 80093ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093b0:	e00d      	b.n	80093ce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093b2:	f7fd fa1b 	bl	80067ec <HAL_RCC_GetSysClockFreq>
 80093b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093b8:	e009      	b.n	80093ce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093ba:	f248 0306 	movw	r3, #32774	@ 0x8006
 80093be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093c0:	e005      	b.n	80093ce <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80093c2:	2300      	movs	r3, #0
 80093c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80093cc:	bf00      	nop
    }

    if (pclk != 0U)
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d021      	beq.n	8009418 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d8:	4a1a      	ldr	r2, [pc, #104]	@ (8009444 <UART_SetConfig+0x448>)
 80093da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093de:	461a      	mov	r2, r3
 80093e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	085b      	lsrs	r3, r3, #1
 80093ec:	441a      	add	r2, r3
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093f8:	6a3b      	ldr	r3, [r7, #32]
 80093fa:	2b0f      	cmp	r3, #15
 80093fc:	d909      	bls.n	8009412 <UART_SetConfig+0x416>
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009404:	d205      	bcs.n	8009412 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	b29a      	uxth	r2, r3
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	60da      	str	r2, [r3, #12]
 8009410:	e002      	b.n	8009418 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	2201      	movs	r2, #1
 800941c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	2201      	movs	r2, #1
 8009424:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	2200      	movs	r2, #0
 800942c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	2200      	movs	r2, #0
 8009432:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009434:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009438:	4618      	mov	r0, r3
 800943a:	3730      	adds	r7, #48	@ 0x30
 800943c:	46bd      	mov	sp, r7
 800943e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009442:	bf00      	nop
 8009444:	08011d78 	.word	0x08011d78
 8009448:	00f42400 	.word	0x00f42400

0800944c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009458:	f003 0308 	and.w	r3, r3, #8
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00a      	beq.n	8009476 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	430a      	orrs	r2, r1
 8009474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00a      	beq.n	8009498 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	430a      	orrs	r2, r1
 8009496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00a      	beq.n	80094ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094be:	f003 0304 	and.w	r3, r3, #4
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00a      	beq.n	80094dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	430a      	orrs	r2, r1
 80094da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e0:	f003 0310 	and.w	r3, r3, #16
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00a      	beq.n	80094fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	430a      	orrs	r2, r1
 80094fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009502:	f003 0320 	and.w	r3, r3, #32
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00a      	beq.n	8009520 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009528:	2b00      	cmp	r3, #0
 800952a:	d01a      	beq.n	8009562 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009546:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800954a:	d10a      	bne.n	8009562 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00a      	beq.n	8009584 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	430a      	orrs	r2, r1
 8009582:	605a      	str	r2, [r3, #4]
  }
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b098      	sub	sp, #96	@ 0x60
 8009594:	af02      	add	r7, sp, #8
 8009596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095a0:	f7f9 fee2 	bl	8003368 <HAL_GetTick>
 80095a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 0308 	and.w	r3, r3, #8
 80095b0:	2b08      	cmp	r3, #8
 80095b2:	d12f      	bne.n	8009614 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095bc:	2200      	movs	r2, #0
 80095be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f88e 	bl	80096e4 <UART_WaitOnFlagUntilTimeout>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d022      	beq.n	8009614 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d6:	e853 3f00 	ldrex	r3, [r3]
 80095da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	461a      	mov	r2, r3
 80095ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80095ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095f4:	e841 2300 	strex	r3, r2, [r1]
 80095f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e6      	bne.n	80095ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2220      	movs	r2, #32
 8009604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009610:	2303      	movs	r3, #3
 8009612:	e063      	b.n	80096dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 0304 	and.w	r3, r3, #4
 800961e:	2b04      	cmp	r3, #4
 8009620:	d149      	bne.n	80096b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009622:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800962a:	2200      	movs	r2, #0
 800962c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f857 	bl	80096e4 <UART_WaitOnFlagUntilTimeout>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d03c      	beq.n	80096b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009644:	e853 3f00 	ldrex	r3, [r3]
 8009648:	623b      	str	r3, [r7, #32]
   return(result);
 800964a:	6a3b      	ldr	r3, [r7, #32]
 800964c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009650:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800965a:	633b      	str	r3, [r7, #48]	@ 0x30
 800965c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009662:	e841 2300 	strex	r3, r2, [r1]
 8009666:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1e6      	bne.n	800963c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	3308      	adds	r3, #8
 8009674:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	e853 3f00 	ldrex	r3, [r3]
 800967c:	60fb      	str	r3, [r7, #12]
   return(result);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f023 0301 	bic.w	r3, r3, #1
 8009684:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3308      	adds	r3, #8
 800968c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800968e:	61fa      	str	r2, [r7, #28]
 8009690:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009692:	69b9      	ldr	r1, [r7, #24]
 8009694:	69fa      	ldr	r2, [r7, #28]
 8009696:	e841 2300 	strex	r3, r2, [r1]
 800969a:	617b      	str	r3, [r7, #20]
   return(result);
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1e5      	bne.n	800966e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e012      	b.n	80096dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2220      	movs	r2, #32
 80096ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2220      	movs	r2, #32
 80096c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3758      	adds	r7, #88	@ 0x58
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	603b      	str	r3, [r7, #0]
 80096f0:	4613      	mov	r3, r2
 80096f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096f4:	e04f      	b.n	8009796 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fc:	d04b      	beq.n	8009796 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096fe:	f7f9 fe33 	bl	8003368 <HAL_GetTick>
 8009702:	4602      	mov	r2, r0
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	69ba      	ldr	r2, [r7, #24]
 800970a:	429a      	cmp	r2, r3
 800970c:	d302      	bcc.n	8009714 <UART_WaitOnFlagUntilTimeout+0x30>
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009714:	2303      	movs	r3, #3
 8009716:	e04e      	b.n	80097b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 0304 	and.w	r3, r3, #4
 8009722:	2b00      	cmp	r3, #0
 8009724:	d037      	beq.n	8009796 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b80      	cmp	r3, #128	@ 0x80
 800972a:	d034      	beq.n	8009796 <UART_WaitOnFlagUntilTimeout+0xb2>
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	2b40      	cmp	r3, #64	@ 0x40
 8009730:	d031      	beq.n	8009796 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	69db      	ldr	r3, [r3, #28]
 8009738:	f003 0308 	and.w	r3, r3, #8
 800973c:	2b08      	cmp	r3, #8
 800973e:	d110      	bne.n	8009762 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2208      	movs	r2, #8
 8009746:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f000 f879 	bl	8009840 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2208      	movs	r2, #8
 8009752:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e029      	b.n	80097b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	69db      	ldr	r3, [r3, #28]
 8009768:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800976c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009770:	d111      	bne.n	8009796 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800977a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 f85f 	bl	8009840 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2220      	movs	r2, #32
 8009786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009792:	2303      	movs	r3, #3
 8009794:	e00f      	b.n	80097b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	69da      	ldr	r2, [r3, #28]
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	4013      	ands	r3, r2
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	bf0c      	ite	eq
 80097a6:	2301      	moveq	r3, #1
 80097a8:	2300      	movne	r3, #0
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	461a      	mov	r2, r3
 80097ae:	79fb      	ldrb	r3, [r7, #7]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d0a0      	beq.n	80096f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80097be:	b480      	push	{r7}
 80097c0:	b08f      	sub	sp, #60	@ 0x3c
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097cc:	6a3b      	ldr	r3, [r7, #32]
 80097ce:	e853 3f00 	ldrex	r3, [r3]
 80097d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80097da:	637b      	str	r3, [r7, #52]	@ 0x34
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	461a      	mov	r2, r3
 80097e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097e6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097ec:	e841 2300 	strex	r3, r2, [r1]
 80097f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1e6      	bne.n	80097c6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3308      	adds	r3, #8
 80097fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	e853 3f00 	ldrex	r3, [r3]
 8009806:	60bb      	str	r3, [r7, #8]
   return(result);
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800980e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3308      	adds	r3, #8
 8009816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009818:	61ba      	str	r2, [r7, #24]
 800981a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981c:	6979      	ldr	r1, [r7, #20]
 800981e:	69ba      	ldr	r2, [r7, #24]
 8009820:	e841 2300 	strex	r3, r2, [r1]
 8009824:	613b      	str	r3, [r7, #16]
   return(result);
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1e5      	bne.n	80097f8 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2220      	movs	r2, #32
 8009830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009834:	bf00      	nop
 8009836:	373c      	adds	r7, #60	@ 0x3c
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009840:	b480      	push	{r7}
 8009842:	b095      	sub	sp, #84	@ 0x54
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009858:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800985c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009866:	643b      	str	r3, [r7, #64]	@ 0x40
 8009868:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800986c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1e6      	bne.n	8009848 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3308      	adds	r3, #8
 8009880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	6a3b      	ldr	r3, [r7, #32]
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	61fb      	str	r3, [r7, #28]
   return(result);
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009890:	f023 0301 	bic.w	r3, r3, #1
 8009894:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3308      	adds	r3, #8
 800989c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800989e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098a6:	e841 2300 	strex	r3, r2, [r1]
 80098aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1e3      	bne.n	800987a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d118      	bne.n	80098ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	e853 3f00 	ldrex	r3, [r3]
 80098c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	f023 0310 	bic.w	r3, r3, #16
 80098ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	461a      	mov	r2, r3
 80098d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098d8:	61bb      	str	r3, [r7, #24]
 80098da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098dc:	6979      	ldr	r1, [r7, #20]
 80098de:	69ba      	ldr	r2, [r7, #24]
 80098e0:	e841 2300 	strex	r3, r2, [r1]
 80098e4:	613b      	str	r3, [r7, #16]
   return(result);
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1e6      	bne.n	80098ba <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2220      	movs	r2, #32
 80098f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009900:	bf00      	nop
 8009902:	3754      	adds	r7, #84	@ 0x54
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b090      	sub	sp, #64	@ 0x40
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009918:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 0320 	and.w	r3, r3, #32
 8009924:	2b00      	cmp	r3, #0
 8009926:	d137      	bne.n	8009998 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800992a:	2200      	movs	r2, #0
 800992c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	3308      	adds	r3, #8
 8009936:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993a:	e853 3f00 	ldrex	r3, [r3]
 800993e:	623b      	str	r3, [r7, #32]
   return(result);
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009946:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3308      	adds	r3, #8
 800994e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009950:	633a      	str	r2, [r7, #48]	@ 0x30
 8009952:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009954:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009958:	e841 2300 	strex	r3, r2, [r1]
 800995c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800995e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1e5      	bne.n	8009930 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	60fb      	str	r3, [r7, #12]
   return(result);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009978:	637b      	str	r3, [r7, #52]	@ 0x34
 800997a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	461a      	mov	r2, r3
 8009980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009982:	61fb      	str	r3, [r7, #28]
 8009984:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009986:	69b9      	ldr	r1, [r7, #24]
 8009988:	69fa      	ldr	r2, [r7, #28]
 800998a:	e841 2300 	strex	r3, r2, [r1]
 800998e:	617b      	str	r3, [r7, #20]
   return(result);
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1e6      	bne.n	8009964 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009996:	e002      	b.n	800999e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009998:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800999a:	f7f7 ffa5 	bl	80018e8 <HAL_UART_TxCpltCallback>
}
 800999e:	bf00      	nop
 80099a0:	3740      	adds	r7, #64	@ 0x40
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b084      	sub	sp, #16
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f7ff fb01 	bl	8008fbc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099ba:	bf00      	nop
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b086      	sub	sp, #24
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ea:	2b80      	cmp	r3, #128	@ 0x80
 80099ec:	d109      	bne.n	8009a02 <UART_DMAError+0x40>
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	2b21      	cmp	r3, #33	@ 0x21
 80099f2:	d106      	bne.n	8009a02 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80099fc:	6978      	ldr	r0, [r7, #20]
 80099fe:	f7ff fede 	bl	80097be <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a0c:	2b40      	cmp	r3, #64	@ 0x40
 8009a0e:	d109      	bne.n	8009a24 <UART_DMAError+0x62>
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2b22      	cmp	r3, #34	@ 0x22
 8009a14:	d106      	bne.n	8009a24 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009a1e:	6978      	ldr	r0, [r7, #20]
 8009a20:	f7ff ff0e 	bl	8009840 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a2a:	f043 0210 	orr.w	r2, r3, #16
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a34:	6978      	ldr	r0, [r7, #20]
 8009a36:	f7ff facb 	bl	8008fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a3a:	bf00      	nop
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f7ff fab9 	bl	8008fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a5e:	bf00      	nop
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b088      	sub	sp, #32
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	e853 3f00 	ldrex	r3, [r3]
 8009a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a82:	61fb      	str	r3, [r7, #28]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	61bb      	str	r3, [r7, #24]
 8009a8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a90:	6979      	ldr	r1, [r7, #20]
 8009a92:	69ba      	ldr	r2, [r7, #24]
 8009a94:	e841 2300 	strex	r3, r2, [r1]
 8009a98:	613b      	str	r3, [r7, #16]
   return(result);
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1e6      	bne.n	8009a6e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7f7 ff1a 	bl	80018e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ab4:	bf00      	nop
 8009ab6:	3720      	adds	r7, #32
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ad8:	bf00      	nop
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d101      	bne.n	8009b0e <HAL_UARTEx_DisableFifoMode+0x16>
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	e027      	b.n	8009b5e <HAL_UARTEx_DisableFifoMode+0x66>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2224      	movs	r2, #36	@ 0x24
 8009b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f022 0201 	bic.w	r2, r2, #1
 8009b34:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009b3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2220      	movs	r2, #32
 8009b50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b084      	sub	sp, #16
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
 8009b72:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d101      	bne.n	8009b82 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b7e:	2302      	movs	r3, #2
 8009b80:	e02d      	b.n	8009bde <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2224      	movs	r2, #36	@ 0x24
 8009b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 0201 	bic.w	r2, r2, #1
 8009ba8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f850 	bl	8009c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d101      	bne.n	8009bfe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009bfa:	2302      	movs	r3, #2
 8009bfc:	e02d      	b.n	8009c5a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2224      	movs	r2, #36	@ 0x24
 8009c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f022 0201 	bic.w	r2, r2, #1
 8009c24:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	683a      	ldr	r2, [r7, #0]
 8009c36:	430a      	orrs	r2, r1
 8009c38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f812 	bl	8009c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2220      	movs	r2, #32
 8009c4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
	...

08009c64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d108      	bne.n	8009c86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c84:	e031      	b.n	8009cea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c86:	2308      	movs	r3, #8
 8009c88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c8a:	2308      	movs	r3, #8
 8009c8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	0e5b      	lsrs	r3, r3, #25
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	f003 0307 	and.w	r3, r3, #7
 8009c9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	0f5b      	lsrs	r3, r3, #29
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	f003 0307 	and.w	r3, r3, #7
 8009cac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cae:	7bbb      	ldrb	r3, [r7, #14]
 8009cb0:	7b3a      	ldrb	r2, [r7, #12]
 8009cb2:	4911      	ldr	r1, [pc, #68]	@ (8009cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8009cb4:	5c8a      	ldrb	r2, [r1, r2]
 8009cb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cba:	7b3a      	ldrb	r2, [r7, #12]
 8009cbc:	490f      	ldr	r1, [pc, #60]	@ (8009cfc <UARTEx_SetNbDataToProcess+0x98>)
 8009cbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	7b7a      	ldrb	r2, [r7, #13]
 8009cd0:	4909      	ldr	r1, [pc, #36]	@ (8009cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8009cd2:	5c8a      	ldrb	r2, [r1, r2]
 8009cd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009cd8:	7b7a      	ldrb	r2, [r7, #13]
 8009cda:	4908      	ldr	r1, [pc, #32]	@ (8009cfc <UARTEx_SetNbDataToProcess+0x98>)
 8009cdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cde:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009cea:	bf00      	nop
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	08011d90 	.word	0x08011d90
 8009cfc:	08011d98 	.word	0x08011d98

08009d00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009d08:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009d0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	43db      	mvns	r3, r3
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	4013      	ands	r3, r2
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b085      	sub	sp, #20
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	60f8      	str	r0, [r7, #12]
 8009d3e:	1d3b      	adds	r3, r7, #4
 8009d40:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b0cc      	sub	sp, #304	@ 0x130
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	4602      	mov	r2, r0
 8009d7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d7e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009d82:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8009d84:	f107 0310 	add.w	r3, r7, #16
 8009d88:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009d8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d90:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009d94:	2200      	movs	r2, #0
 8009d96:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8009d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009da2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009da6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009daa:	7812      	ldrb	r2, [r2, #0]
 8009dac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009dae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009db2:	3301      	adds	r3, #1
 8009db4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009db8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dbc:	2218      	movs	r2, #24
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 ff15 	bl	800abf0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009dc6:	233f      	movs	r3, #63	@ 0x3f
 8009dc8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8009dcc:	2385      	movs	r3, #133	@ 0x85
 8009dce:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009dd2:	f107 0310 	add.w	r3, r7, #16
 8009dd6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009dda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009dde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009de2:	f107 030f 	add.w	r3, r7, #15
 8009de6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009dea:	2301      	movs	r3, #1
 8009dec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009df0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009df4:	2100      	movs	r1, #0
 8009df6:	4618      	mov	r0, r3
 8009df8:	f001 f9ac 	bl	800b154 <hci_send_req>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	da01      	bge.n	8009e06 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009e02:	23ff      	movs	r3, #255	@ 0xff
 8009e04:	e004      	b.n	8009e10 <aci_gap_set_io_capability+0x9e>
  return status;
 8009e06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e0a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009e0e:	781b      	ldrb	r3, [r3, #0]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009e1a:	b5b0      	push	{r4, r5, r7, lr}
 8009e1c:	b0cc      	sub	sp, #304	@ 0x130
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	4605      	mov	r5, r0
 8009e22:	460c      	mov	r4, r1
 8009e24:	4610      	mov	r0, r2
 8009e26:	4619      	mov	r1, r3
 8009e28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e2c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009e30:	462a      	mov	r2, r5
 8009e32:	701a      	strb	r2, [r3, #0]
 8009e34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e38:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	701a      	strb	r2, [r3, #0]
 8009e40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e44:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009e48:	4602      	mov	r2, r0
 8009e4a:	701a      	strb	r2, [r3, #0]
 8009e4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009e54:	460a      	mov	r2, r1
 8009e56:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8009e58:	f107 0310 	add.w	r3, r7, #16
 8009e5c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009e60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e64:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009e68:	2200      	movs	r2, #0
 8009e6a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8009e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e76:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009e7a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009e7e:	7812      	ldrb	r2, [r2, #0]
 8009e80:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009e82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e86:	3301      	adds	r3, #1
 8009e88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e90:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009e94:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009e98:	7812      	ldrb	r2, [r2, #0]
 8009e9a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009e9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8009ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009eaa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009eae:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009eb2:	7812      	ldrb	r2, [r2, #0]
 8009eb4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009eb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009eba:	3301      	adds	r3, #1
 8009ebc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8009ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ec4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009ec8:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8009ecc:	7812      	ldrb	r2, [r2, #0]
 8009ece:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009ed0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ede:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8009ee2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009ee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ee8:	3301      	adds	r3, #1
 8009eea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ef2:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8009ef6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009ef8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009efc:	3301      	adds	r3, #1
 8009efe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f06:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8009f0a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009f0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f10:	3301      	adds	r3, #1
 8009f12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f1a:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009f1e:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009f22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f26:	3304      	adds	r3, #4
 8009f28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f30:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8009f34:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009f36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009f40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f44:	2218      	movs	r2, #24
 8009f46:	2100      	movs	r1, #0
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 fe51 	bl	800abf0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009f4e:	233f      	movs	r3, #63	@ 0x3f
 8009f50:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8009f54:	2386      	movs	r3, #134	@ 0x86
 8009f56:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009f5a:	f107 0310 	add.w	r3, r7, #16
 8009f5e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f66:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009f6a:	f107 030f 	add.w	r3, r7, #15
 8009f6e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009f72:	2301      	movs	r3, #1
 8009f74:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009f78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f001 f8e8 	bl	800b154 <hci_send_req>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	da01      	bge.n	8009f8e <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009f8a:	23ff      	movs	r3, #255	@ 0xff
 8009f8c:	e004      	b.n	8009f98 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009f8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f92:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009f96:	781b      	ldrb	r3, [r3, #0]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bdb0      	pop	{r4, r5, r7, pc}

08009fa2 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8009fa2:	b590      	push	{r4, r7, lr}
 8009fa4:	b0cd      	sub	sp, #308	@ 0x134
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	4604      	mov	r4, r0
 8009faa:	4608      	mov	r0, r1
 8009fac:	4611      	mov	r1, r2
 8009fae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009fb2:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009fb6:	6013      	str	r3, [r2, #0]
 8009fb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009fbc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009fc0:	4622      	mov	r2, r4
 8009fc2:	701a      	strb	r2, [r3, #0]
 8009fc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009fc8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009fcc:	4602      	mov	r2, r0
 8009fce:	701a      	strb	r2, [r3, #0]
 8009fd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009fd4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009fd8:	460a      	mov	r2, r1
 8009fda:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009fdc:	f107 0310 	add.w	r3, r7, #16
 8009fe0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009fe4:	f107 0308 	add.w	r3, r7, #8
 8009fe8:	2207      	movs	r2, #7
 8009fea:	2100      	movs	r1, #0
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 fdff 	bl	800abf0 <Osal_MemSet>
  int index_input = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8009ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ffc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a000:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a004:	7812      	ldrb	r2, [r2, #0]
 800a006:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a008:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a00c:	3301      	adds	r3, #1
 800a00e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800a012:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a016:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a01a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a01e:	7812      	ldrb	r2, [r2, #0]
 800a020:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a022:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a026:	3301      	adds	r3, #1
 800a028:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800a02c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a030:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a034:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800a038:	7812      	ldrb	r2, [r2, #0]
 800a03a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a03c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a040:	3301      	adds	r3, #1
 800a042:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a046:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a04a:	2218      	movs	r2, #24
 800a04c:	2100      	movs	r1, #0
 800a04e:	4618      	mov	r0, r3
 800a050:	f000 fdce 	bl	800abf0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a054:	233f      	movs	r3, #63	@ 0x3f
 800a056:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800a05a:	238a      	movs	r3, #138	@ 0x8a
 800a05c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a060:	f107 0310 	add.w	r3, r7, #16
 800a064:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a068:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a06c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800a070:	f107 0308 	add.w	r3, r7, #8
 800a074:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800a078:	2307      	movs	r3, #7
 800a07a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a07e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a082:	2100      	movs	r1, #0
 800a084:	4618      	mov	r0, r3
 800a086:	f001 f865 	bl	800b154 <hci_send_req>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	da01      	bge.n	800a094 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800a090:	23ff      	movs	r3, #255	@ 0xff
 800a092:	e02e      	b.n	800a0f2 <aci_gap_init+0x150>
  if ( resp.Status )
 800a094:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a098:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d005      	beq.n	800a0ae <aci_gap_init+0x10c>
    return resp.Status;
 800a0a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	e021      	b.n	800a0f2 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800a0ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a0b6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0c0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800a0c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0cc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a0d0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a0da:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800a0dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0e0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a0e4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a0ee:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd90      	pop	{r4, r7, pc}

0800a0fc <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b088      	sub	sp, #32
 800a100:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a102:	2300      	movs	r3, #0
 800a104:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a106:	f107 0308 	add.w	r3, r7, #8
 800a10a:	2218      	movs	r2, #24
 800a10c:	2100      	movs	r1, #0
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 fd6e 	bl	800abf0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a114:	233f      	movs	r3, #63	@ 0x3f
 800a116:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800a118:	2392      	movs	r3, #146	@ 0x92
 800a11a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a11c:	1dfb      	adds	r3, r7, #7
 800a11e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a120:	2301      	movs	r3, #1
 800a122:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a124:	f107 0308 	add.w	r3, r7, #8
 800a128:	2100      	movs	r1, #0
 800a12a:	4618      	mov	r0, r3
 800a12c:	f001 f812 	bl	800b154 <hci_send_req>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	da01      	bge.n	800a13a <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a136:	23ff      	movs	r3, #255	@ 0xff
 800a138:	e000      	b.n	800a13c <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800a13a:	79fb      	ldrb	r3, [r7, #7]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3720      	adds	r7, #32
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc( uint16_t LE_Scan_Interval,
                                                 uint16_t LE_Scan_Window,
                                                 uint8_t Own_Address_Type,
                                                 uint8_t Filter_Duplicates )
{
 800a144:	b5b0      	push	{r4, r5, r7, lr}
 800a146:	b0cc      	sub	sp, #304	@ 0x130
 800a148:	af00      	add	r7, sp, #0
 800a14a:	4605      	mov	r5, r0
 800a14c:	460c      	mov	r4, r1
 800a14e:	4610      	mov	r0, r2
 800a150:	4619      	mov	r1, r3
 800a152:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a156:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a15a:	462a      	mov	r2, r5
 800a15c:	801a      	strh	r2, [r3, #0]
 800a15e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a162:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a166:	4622      	mov	r2, r4
 800a168:	801a      	strh	r2, [r3, #0]
 800a16a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a16e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800a172:	4602      	mov	r2, r0
 800a174:	701a      	strb	r2, [r3, #0]
 800a176:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a17a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a17e:	460a      	mov	r2, r1
 800a180:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 800a182:	f107 0310 	add.w	r3, r7, #16
 800a186:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a18a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a18e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a192:	2200      	movs	r2, #0
 800a194:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a196:	2300      	movs	r3, #0
 800a198:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 800a19c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a1a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a1a4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a1a8:	8812      	ldrh	r2, [r2, #0]
 800a1aa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a1ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1b0:	3302      	adds	r3, #2
 800a1b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 800a1b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a1ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a1be:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a1c2:	8812      	ldrh	r2, [r2, #0]
 800a1c4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a1c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1ca:	3302      	adds	r3, #2
 800a1cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800a1d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a1d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a1d8:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800a1dc:	7812      	ldrb	r2, [r2, #0]
 800a1de:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a1e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 800a1ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a1ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a1f2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800a1f6:	7812      	ldrb	r2, [r2, #0]
 800a1f8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a1fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1fe:	3301      	adds	r3, #1
 800a200:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a204:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a208:	2218      	movs	r2, #24
 800a20a:	2100      	movs	r1, #0
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 fcef 	bl	800abf0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a212:	233f      	movs	r3, #63	@ 0x3f
 800a214:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x097;
 800a218:	2397      	movs	r3, #151	@ 0x97
 800a21a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 800a21e:	230f      	movs	r3, #15
 800a220:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 800a224:	f107 0310 	add.w	r3, r7, #16
 800a228:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a22c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a230:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a234:	f107 030f 	add.w	r3, r7, #15
 800a238:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a23c:	2301      	movs	r3, #1
 800a23e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a242:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a246:	2100      	movs	r1, #0
 800a248:	4618      	mov	r0, r3
 800a24a:	f000 ff83 	bl	800b154 <hci_send_req>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	da01      	bge.n	800a258 <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 800a254:	23ff      	movs	r3, #255	@ 0xff
 800a256:	e004      	b.n	800a262 <aci_gap_start_general_discovery_proc+0x11e>
  return status;
 800a258:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a25c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a260:	781b      	ldrb	r3, [r3, #0]
}
 800a262:	4618      	mov	r0, r3
 800a264:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a268:	46bd      	mov	sp, r7
 800a26a:	bdb0      	pop	{r4, r5, r7, pc}

0800a26c <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 800a26c:	b590      	push	{r4, r7, lr}
 800a26e:	b0cf      	sub	sp, #316	@ 0x13c
 800a270:	af00      	add	r7, sp, #0
 800a272:	4604      	mov	r4, r0
 800a274:	4608      	mov	r0, r1
 800a276:	4611      	mov	r1, r2
 800a278:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a27c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800a280:	6013      	str	r3, [r2, #0]
 800a282:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a286:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a28a:	4622      	mov	r2, r4
 800a28c:	801a      	strh	r2, [r3, #0]
 800a28e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a292:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a296:	4602      	mov	r2, r0
 800a298:	801a      	strh	r2, [r3, #0]
 800a29a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a29e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800a2a2:	460a      	mov	r2, r1
 800a2a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 800a2a6:	f107 0318 	add.w	r3, r7, #24
 800a2aa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  tBleStatus status = 0;
 800a2ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a2b2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 800a2c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a2c4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a2c8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a2cc:	8812      	ldrh	r2, [r2, #0]
 800a2ce:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a2d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a2d4:	3302      	adds	r3, #2
 800a2d6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 800a2da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a2de:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a2e2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a2e6:	8812      	ldrh	r2, [r2, #0]
 800a2e8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a2ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a2ee:	3302      	adds	r3, #2
 800a2f0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 800a2f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a2f8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a2fc:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800a300:	7812      	ldrb	r2, [r2, #0]
 800a302:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a304:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a308:	3301      	adds	r3, #1
 800a30a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 800a30e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a312:	1d58      	adds	r0, r3, #5
 800a314:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a318:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a31c:	2206      	movs	r2, #6
 800a31e:	6819      	ldr	r1, [r3, #0]
 800a320:	f000 fc56 	bl	800abd0 <Osal_MemCpy>
  index_input += 6;
 800a324:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a328:	3306      	adds	r3, #6
 800a32a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 800a32e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a332:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800a336:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800a338:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a33c:	3301      	adds	r3, #1
 800a33e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800a342:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a346:	f8b7 214c 	ldrh.w	r2, [r7, #332]	@ 0x14c
 800a34a:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800a34c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a350:	3302      	adds	r3, #2
 800a352:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800a356:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a35a:	f8b7 2150 	ldrh.w	r2, [r7, #336]	@ 0x150
 800a35e:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 800a360:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a364:	3302      	adds	r3, #2
 800a366:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Conn_Latency = Conn_Latency;
 800a36a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a36e:	f8b7 2154 	ldrh.w	r2, [r7, #340]	@ 0x154
 800a372:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 800a374:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a378:	3302      	adds	r3, #2
 800a37a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 800a37e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a382:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 800a386:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 800a388:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a38c:	3302      	adds	r3, #2
 800a38e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 800a392:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a396:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800a39a:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 800a39c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a3a0:	3302      	adds	r3, #2
 800a3a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 800a3a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a3aa:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800a3ae:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 800a3b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a3b4:	3302      	adds	r3, #2
 800a3b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a3ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a3be:	2218      	movs	r2, #24
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 fc14 	bl	800abf0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a3c8:	233f      	movs	r3, #63	@ 0x3f
 800a3ca:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x09c;
 800a3ce:	239c      	movs	r3, #156	@ 0x9c
 800a3d0:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.event = 0x0F;
 800a3d4:	230f      	movs	r3, #15
 800a3d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.cparam = cmd_buffer;
 800a3da:	f107 0318 	add.w	r3, r7, #24
 800a3de:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800a3e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a3e6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &status;
 800a3ea:	f107 0317 	add.w	r3, r7, #23
 800a3ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = 1;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a3f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 fea8 	bl	800b154 <hci_send_req>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	da01      	bge.n	800a40e <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 800a40a:	23ff      	movs	r3, #255	@ 0xff
 800a40c:	e004      	b.n	800a418 <aci_gap_create_connection+0x1ac>
  return status;
 800a40e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a412:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a416:	781b      	ldrb	r3, [r3, #0]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd90      	pop	{r4, r7, pc}

0800a422 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b088      	sub	sp, #32
 800a426:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a428:	2300      	movs	r3, #0
 800a42a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a42c:	f107 0308 	add.w	r3, r7, #8
 800a430:	2218      	movs	r2, #24
 800a432:	2100      	movs	r1, #0
 800a434:	4618      	mov	r0, r3
 800a436:	f000 fbdb 	bl	800abf0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a43a:	233f      	movs	r3, #63	@ 0x3f
 800a43c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800a43e:	f240 1301 	movw	r3, #257	@ 0x101
 800a442:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a444:	1dfb      	adds	r3, r7, #7
 800a446:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a448:	2301      	movs	r3, #1
 800a44a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a44c:	f107 0308 	add.w	r3, r7, #8
 800a450:	2100      	movs	r1, #0
 800a452:	4618      	mov	r0, r3
 800a454:	f000 fe7e 	bl	800b154 <hci_send_req>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	da01      	bge.n	800a462 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800a45e:	23ff      	movs	r3, #255	@ 0xff
 800a460:	e000      	b.n	800a464 <aci_gatt_init+0x42>
  return status;
 800a462:	79fb      	ldrb	r3, [r7, #7]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3720      	adds	r7, #32
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800a46c:	b5b0      	push	{r4, r5, r7, lr}
 800a46e:	b0cc      	sub	sp, #304	@ 0x130
 800a470:	af00      	add	r7, sp, #0
 800a472:	4605      	mov	r5, r0
 800a474:	460c      	mov	r4, r1
 800a476:	4610      	mov	r0, r2
 800a478:	4619      	mov	r1, r3
 800a47a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a47e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a482:	462a      	mov	r2, r5
 800a484:	801a      	strh	r2, [r3, #0]
 800a486:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a48a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a48e:	4622      	mov	r2, r4
 800a490:	801a      	strh	r2, [r3, #0]
 800a492:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a496:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800a49a:	4602      	mov	r2, r0
 800a49c:	701a      	strb	r2, [r3, #0]
 800a49e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a4a2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a4a6:	460a      	mov	r2, r1
 800a4a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a4aa:	f107 0310 	add.w	r3, r7, #16
 800a4ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a4b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a4b6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800a4c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a4c8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a4cc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a4d0:	8812      	ldrh	r2, [r2, #0]
 800a4d2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a4d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a4d8:	3302      	adds	r3, #2
 800a4da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800a4de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a4e2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a4e6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a4ea:	8812      	ldrh	r2, [r2, #0]
 800a4ec:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a4ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a4f2:	3302      	adds	r3, #2
 800a4f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800a4f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a4fc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a500:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800a504:	7812      	ldrb	r2, [r2, #0]
 800a506:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a508:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a50c:	3301      	adds	r3, #1
 800a50e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800a512:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a516:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a51a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800a51e:	7812      	ldrb	r2, [r2, #0]
 800a520:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a522:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a526:	3301      	adds	r3, #1
 800a528:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a52c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a530:	1d98      	adds	r0, r3, #6
 800a532:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a536:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	461a      	mov	r2, r3
 800a53e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a542:	f000 fb45 	bl	800abd0 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a546:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a54a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a554:	4413      	add	r3, r2
 800a556:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a55a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a55e:	2218      	movs	r2, #24
 800a560:	2100      	movs	r1, #0
 800a562:	4618      	mov	r0, r3
 800a564:	f000 fb44 	bl	800abf0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a568:	233f      	movs	r3, #63	@ 0x3f
 800a56a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800a56e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800a572:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a576:	f107 0310 	add.w	r3, r7, #16
 800a57a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a57e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a582:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a586:	f107 030f 	add.w	r3, r7, #15
 800a58a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a58e:	2301      	movs	r3, #1
 800a590:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a594:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a598:	2100      	movs	r1, #0
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 fdda 	bl	800b154 <hci_send_req>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	da01      	bge.n	800a5aa <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a5a6:	23ff      	movs	r3, #255	@ 0xff
 800a5a8:	e004      	b.n	800a5b4 <aci_gatt_update_char_value+0x148>
  return status;
 800a5aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5ae:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a5b2:	781b      	ldrb	r3, [r3, #0]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bdb0      	pop	{r4, r5, r7, pc}

0800a5be <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b0cc      	sub	sp, #304	@ 0x130
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5ca:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a5ce:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 800a5d0:	f107 0310 	add.w	r3, r7, #16
 800a5d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a5d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5dc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a5ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a5ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a5f2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a5f6:	8812      	ldrh	r2, [r2, #0]
 800a5f8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a5fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a5fe:	3302      	adds	r3, #2
 800a600:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a604:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a608:	2218      	movs	r2, #24
 800a60a:	2100      	movs	r1, #0
 800a60c:	4618      	mov	r0, r3
 800a60e:	f000 faef 	bl	800abf0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a612:	233f      	movs	r3, #63	@ 0x3f
 800a614:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x112;
 800a618:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800a61c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 800a620:	230f      	movs	r3, #15
 800a622:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 800a626:	f107 0310 	add.w	r3, r7, #16
 800a62a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a62e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a632:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a636:	f107 030f 	add.w	r3, r7, #15
 800a63a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a63e:	2301      	movs	r3, #1
 800a640:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a644:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a648:	2100      	movs	r1, #0
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 fd82 	bl	800b154 <hci_send_req>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	da01      	bge.n	800a65a <aci_gatt_disc_all_primary_services+0x9c>
    return BLE_STATUS_TIMEOUT;
 800a656:	23ff      	movs	r3, #255	@ 0xff
 800a658:	e004      	b.n	800a664 <aci_gatt_disc_all_primary_services+0xa6>
  return status;
 800a65a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a65e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a662:	781b      	ldrb	r3, [r3, #0]
}
 800a664:	4618      	mov	r0, r3
 800a666:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 800a66e:	b590      	push	{r4, r7, lr}
 800a670:	b0cd      	sub	sp, #308	@ 0x134
 800a672:	af00      	add	r7, sp, #0
 800a674:	4604      	mov	r4, r0
 800a676:	4608      	mov	r0, r1
 800a678:	4611      	mov	r1, r2
 800a67a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a67e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a682:	4622      	mov	r2, r4
 800a684:	801a      	strh	r2, [r3, #0]
 800a686:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a68a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a68e:	4602      	mov	r2, r0
 800a690:	801a      	strh	r2, [r3, #0]
 800a692:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a696:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a69a:	460a      	mov	r2, r1
 800a69c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 800a69e:	f107 0310 	add.w	r3, r7, #16
 800a6a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a6a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a6aa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a6b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a6bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a6c0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a6c4:	8812      	ldrh	r2, [r2, #0]
 800a6c6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a6c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a6cc:	3302      	adds	r3, #2
 800a6ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Start_Handle = Start_Handle;
 800a6d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a6d6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a6da:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a6de:	8812      	ldrh	r2, [r2, #0]
 800a6e0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a6e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a6e6:	3302      	adds	r3, #2
 800a6e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->End_Handle = End_Handle;
 800a6ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a6f0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a6f4:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800a6f8:	8812      	ldrh	r2, [r2, #0]
 800a6fa:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800a6fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a700:	3302      	adds	r3, #2
 800a702:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a706:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a70a:	2218      	movs	r2, #24
 800a70c:	2100      	movs	r1, #0
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 fa6e 	bl	800abf0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a714:	233f      	movs	r3, #63	@ 0x3f
 800a716:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x115;
 800a71a:	f240 1315 	movw	r3, #277	@ 0x115
 800a71e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 800a722:	230f      	movs	r3, #15
 800a724:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 800a728:	f107 0310 	add.w	r3, r7, #16
 800a72c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a730:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a734:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a738:	f107 030f 	add.w	r3, r7, #15
 800a73c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a740:	2301      	movs	r3, #1
 800a742:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a746:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a74a:	2100      	movs	r1, #0
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 fd01 	bl	800b154 <hci_send_req>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	da01      	bge.n	800a75c <aci_gatt_disc_all_char_of_service+0xee>
    return BLE_STATUS_TIMEOUT;
 800a758:	23ff      	movs	r3, #255	@ 0xff
 800a75a:	e004      	b.n	800a766 <aci_gatt_disc_all_char_of_service+0xf8>
  return status;
 800a75c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a760:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a764:	781b      	ldrb	r3, [r3, #0]
}
 800a766:	4618      	mov	r0, r3
 800a768:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd90      	pop	{r4, r7, pc}

0800a770 <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 800a770:	b590      	push	{r4, r7, lr}
 800a772:	b0cd      	sub	sp, #308	@ 0x134
 800a774:	af00      	add	r7, sp, #0
 800a776:	4604      	mov	r4, r0
 800a778:	4608      	mov	r0, r1
 800a77a:	4611      	mov	r1, r2
 800a77c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a780:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a784:	4622      	mov	r2, r4
 800a786:	801a      	strh	r2, [r3, #0]
 800a788:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a78c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a790:	4602      	mov	r2, r0
 800a792:	801a      	strh	r2, [r3, #0]
 800a794:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a798:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a79c:	460a      	mov	r2, r1
 800a79e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 800a7a0:	f107 0310 	add.w	r3, r7, #16
 800a7a4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a7a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7ac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a7ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a7be:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a7c2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a7c6:	8812      	ldrh	r2, [r2, #0]
 800a7c8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a7ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7ce:	3302      	adds	r3, #2
 800a7d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800a7d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a7d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a7dc:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a7e0:	8812      	ldrh	r2, [r2, #0]
 800a7e2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a7e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7e8:	3302      	adds	r3, #2
 800a7ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->End_Handle = End_Handle;
 800a7ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a7f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a7f6:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800a7fa:	8812      	ldrh	r2, [r2, #0]
 800a7fc:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800a7fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a802:	3302      	adds	r3, #2
 800a804:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a808:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a80c:	2218      	movs	r2, #24
 800a80e:	2100      	movs	r1, #0
 800a810:	4618      	mov	r0, r3
 800a812:	f000 f9ed 	bl	800abf0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a816:	233f      	movs	r3, #63	@ 0x3f
 800a818:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x117;
 800a81c:	f240 1317 	movw	r3, #279	@ 0x117
 800a820:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 800a824:	230f      	movs	r3, #15
 800a826:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 800a82a:	f107 0310 	add.w	r3, r7, #16
 800a82e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a832:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a836:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a83a:	f107 030f 	add.w	r3, r7, #15
 800a83e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a842:	2301      	movs	r3, #1
 800a844:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a848:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a84c:	2100      	movs	r1, #0
 800a84e:	4618      	mov	r0, r3
 800a850:	f000 fc80 	bl	800b154 <hci_send_req>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	da01      	bge.n	800a85e <aci_gatt_disc_all_char_desc+0xee>
    return BLE_STATUS_TIMEOUT;
 800a85a:	23ff      	movs	r3, #255	@ 0xff
 800a85c:	e004      	b.n	800a868 <aci_gatt_disc_all_char_desc+0xf8>
  return status;
 800a85e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a862:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a866:	781b      	ldrb	r3, [r3, #0]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd90      	pop	{r4, r7, pc}

0800a872 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc( uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     const uint8_t* Attribute_Val )
{
 800a872:	b590      	push	{r4, r7, lr}
 800a874:	b0cf      	sub	sp, #316	@ 0x13c
 800a876:	af00      	add	r7, sp, #0
 800a878:	4604      	mov	r4, r0
 800a87a:	4608      	mov	r0, r1
 800a87c:	4611      	mov	r1, r2
 800a87e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a882:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800a886:	6013      	str	r3, [r2, #0]
 800a888:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a88c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a890:	4622      	mov	r2, r4
 800a892:	801a      	strh	r2, [r3, #0]
 800a894:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a898:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a89c:	4602      	mov	r2, r0
 800a89e:	801a      	strh	r2, [r3, #0]
 800a8a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a8a4:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800a8a8:	460a      	mov	r2, r1
 800a8aa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 800a8ac:	f107 0318 	add.w	r3, r7, #24
 800a8b0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  tBleStatus status = 0;
 800a8b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a8b8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a8bc:	2200      	movs	r2, #0
 800a8be:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 800a8c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a8ca:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a8ce:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a8d2:	8812      	ldrh	r2, [r2, #0]
 800a8d4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a8d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a8da:	3302      	adds	r3, #2
 800a8dc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Attr_Handle = Attr_Handle;
 800a8e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a8e4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a8e8:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a8ec:	8812      	ldrh	r2, [r2, #0]
 800a8ee:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a8f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a8f4:	3302      	adds	r3, #2
 800a8f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 800a8fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a8fe:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a902:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800a906:	7812      	ldrb	r2, [r2, #0]
 800a908:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a90a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a90e:	3301      	adds	r3, #1
 800a910:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 800a914:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a918:	1d58      	adds	r0, r3, #5
 800a91a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a91e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800a922:	781a      	ldrb	r2, [r3, #0]
 800a924:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a928:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a92c:	6819      	ldr	r1, [r3, #0]
 800a92e:	f000 f94f 	bl	800abd0 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800a932:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a936:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800a940:	4413      	add	r3, r2
 800a942:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a946:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a94a:	2218      	movs	r2, #24
 800a94c:	2100      	movs	r1, #0
 800a94e:	4618      	mov	r0, r3
 800a950:	f000 f94e 	bl	800abf0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a954:	233f      	movs	r3, #63	@ 0x3f
 800a956:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x121;
 800a95a:	f240 1321 	movw	r3, #289	@ 0x121
 800a95e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.event = 0x0F;
 800a962:	230f      	movs	r3, #15
 800a964:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.cparam = cmd_buffer;
 800a968:	f107 0318 	add.w	r3, r7, #24
 800a96c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800a970:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a974:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &status;
 800a978:	f107 0317 	add.w	r3, r7, #23
 800a97c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = 1;
 800a980:	2301      	movs	r3, #1
 800a982:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a986:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a98a:	2100      	movs	r1, #0
 800a98c:	4618      	mov	r0, r3
 800a98e:	f000 fbe1 	bl	800b154 <hci_send_req>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	da01      	bge.n	800a99c <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 800a998:	23ff      	movs	r3, #255	@ 0xff
 800a99a:	e004      	b.n	800a9a6 <aci_gatt_write_char_desc+0x134>
  return status;
 800a99c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a9a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a9a4:	781b      	ldrb	r3, [r3, #0]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd90      	pop	{r4, r7, pc}

0800a9b0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b0cc      	sub	sp, #304	@ 0x130
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9ba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a9be:	601a      	str	r2, [r3, #0]
 800a9c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9c4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	701a      	strb	r2, [r3, #0]
 800a9cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9d0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a9d4:	460a      	mov	r2, r1
 800a9d6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a9d8:	f107 0310 	add.w	r3, r7, #16
 800a9dc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a9e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9e4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800a9f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a9f6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a9fa:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a9fe:	7812      	ldrb	r2, [r2, #0]
 800aa00:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aa02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa06:	3301      	adds	r3, #1
 800aa08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800aa0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aa10:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aa14:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800aa18:	7812      	ldrb	r2, [r2, #0]
 800aa1a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800aa1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa20:	3301      	adds	r3, #1
 800aa22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800aa26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aa2a:	1c98      	adds	r0, r3, #2
 800aa2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aa30:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800aa34:	781a      	ldrb	r2, [r3, #0]
 800aa36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aa3a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800aa3e:	6819      	ldr	r1, [r3, #0]
 800aa40:	f000 f8c6 	bl	800abd0 <Osal_MemCpy>
  index_input += Length;
 800aa44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aa48:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800aa52:	4413      	add	r3, r2
 800aa54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aa58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa5c:	2218      	movs	r2, #24
 800aa5e:	2100      	movs	r1, #0
 800aa60:	4618      	mov	r0, r3
 800aa62:	f000 f8c5 	bl	800abf0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aa66:	233f      	movs	r3, #63	@ 0x3f
 800aa68:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800aa6c:	230c      	movs	r3, #12
 800aa6e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800aa72:	f107 0310 	add.w	r3, r7, #16
 800aa76:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800aa7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa7e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800aa82:	f107 030f 	add.w	r3, r7, #15
 800aa86:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aa90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa94:	2100      	movs	r1, #0
 800aa96:	4618      	mov	r0, r3
 800aa98:	f000 fb5c 	bl	800b154 <hci_send_req>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	da01      	bge.n	800aaa6 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800aaa2:	23ff      	movs	r3, #255	@ 0xff
 800aaa4:	e004      	b.n	800aab0 <aci_hal_write_config_data+0x100>
  return status;
 800aaa6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aaaa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800aaae:	781b      	ldrb	r3, [r3, #0]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b0cc      	sub	sp, #304	@ 0x130
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	4602      	mov	r2, r0
 800aac2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aac6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800aaca:	701a      	strb	r2, [r3, #0]
 800aacc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aad0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800aad4:	460a      	mov	r2, r1
 800aad6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800aad8:	f107 0310 	add.w	r3, r7, #16
 800aadc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800aae0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aae4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800aae8:	2200      	movs	r2, #0
 800aaea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800aaf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aaf6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aafa:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800aafe:	7812      	ldrb	r2, [r2, #0]
 800ab00:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ab02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ab06:	3301      	adds	r3, #1
 800ab08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800ab0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ab10:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ab14:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ab18:	7812      	ldrb	r2, [r2, #0]
 800ab1a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ab1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ab20:	3301      	adds	r3, #1
 800ab22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ab26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab2a:	2218      	movs	r2, #24
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 f85e 	bl	800abf0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab34:	233f      	movs	r3, #63	@ 0x3f
 800ab36:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800ab3a:	230f      	movs	r3, #15
 800ab3c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ab40:	f107 0310 	add.w	r3, r7, #16
 800ab44:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ab48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ab4c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ab50:	f107 030f 	add.w	r3, r7, #15
 800ab54:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ab5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab62:	2100      	movs	r1, #0
 800ab64:	4618      	mov	r0, r3
 800ab66:	f000 faf5 	bl	800b154 <hci_send_req>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	da01      	bge.n	800ab74 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800ab70:	23ff      	movs	r3, #255	@ 0xff
 800ab72:	e004      	b.n	800ab7e <aci_hal_set_tx_power_level+0xc4>
  return status;
 800ab74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab78:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ab7c:	781b      	ldrb	r3, [r3, #0]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b088      	sub	sp, #32
 800ab8c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ab92:	f107 0308 	add.w	r3, r7, #8
 800ab96:	2218      	movs	r2, #24
 800ab98:	2100      	movs	r1, #0
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f000 f828 	bl	800abf0 <Osal_MemSet>
  rq.ogf = 0x03;
 800aba0:	2303      	movs	r3, #3
 800aba2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800aba4:	2303      	movs	r3, #3
 800aba6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800aba8:	1dfb      	adds	r3, r7, #7
 800abaa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800abac:	2301      	movs	r3, #1
 800abae:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800abb0:	f107 0308 	add.w	r3, r7, #8
 800abb4:	2100      	movs	r1, #0
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 facc 	bl	800b154 <hci_send_req>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	da01      	bge.n	800abc6 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800abc2:	23ff      	movs	r3, #255	@ 0xff
 800abc4:	e000      	b.n	800abc8 <hci_reset+0x40>
  return status;
 800abc6:	79fb      	ldrb	r3, [r7, #7]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3720      	adds	r7, #32
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	68b9      	ldr	r1, [r7, #8]
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f004 f97e 	bl	800eee2 <memcpy>
 800abe6:	4603      	mov	r3, r0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	68b9      	ldr	r1, [r7, #8]
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f004 f8d9 	bl	800edb8 <memset>
 800ac06:	4603      	mov	r3, r0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800ac10:	b480      	push	{r7}
 800ac12:	af00      	add	r7, sp, #0
  return;
 800ac14:	bf00      	nop
}
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800ac1e:	b480      	push	{r7}
 800ac20:	af00      	add	r7, sp, #0
  return;
 800ac22:	bf00      	nop
}
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	af00      	add	r7, sp, #0
  return;
 800ac30:	bf00      	nop
}
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800ac3a:	b480      	push	{r7}
 800ac3c:	af00      	add	r7, sp, #0
  return;
 800ac3e:	bf00      	nop
}
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800ac48:	b480      	push	{r7}
 800ac4a:	af00      	add	r7, sp, #0
  return;
 800ac4c:	bf00      	nop
}
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800ac56:	b480      	push	{r7}
 800ac58:	af00      	add	r7, sp, #0
  return;
 800ac5a:	bf00      	nop
}
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800ac64:	b480      	push	{r7}
 800ac66:	af00      	add	r7, sp, #0
  return;
 800ac68:	bf00      	nop
}
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800ac72:	b480      	push	{r7}
 800ac74:	af00      	add	r7, sp, #0
  return;
 800ac76:	bf00      	nop
}
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800ac80:	b480      	push	{r7}
 800ac82:	af00      	add	r7, sp, #0
  return;
 800ac84:	bf00      	nop
}
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr

0800ac8e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800ac8e:	b480      	push	{r7}
 800ac90:	af00      	add	r7, sp, #0
  return;
 800ac92:	bf00      	nop
}
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	af00      	add	r7, sp, #0
  return;
 800aca0:	bf00      	nop
}
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800acaa:	b480      	push	{r7}
 800acac:	af00      	add	r7, sp, #0
  return;
 800acae:	bf00      	nop
}
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800acb8:	b480      	push	{r7}
 800acba:	af00      	add	r7, sp, #0
  return;
 800acbc:	bf00      	nop
}
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800acc6:	b480      	push	{r7}
 800acc8:	af00      	add	r7, sp, #0
  return;
 800acca:	bf00      	nop
}
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800acd4:	b480      	push	{r7}
 800acd6:	af00      	add	r7, sp, #0
  return;
 800acd8:	bf00      	nop
}
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800ace2:	b480      	push	{r7}
 800ace4:	af00      	add	r7, sp, #0
  return;
 800ace6:	bf00      	nop
}
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800acf0:	b480      	push	{r7}
 800acf2:	af00      	add	r7, sp, #0
  return;
 800acf4:	bf00      	nop
}
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800acfe:	b480      	push	{r7}
 800ad00:	af00      	add	r7, sp, #0
  return;
 800ad02:	bf00      	nop
}
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800ad10:	4b05      	ldr	r3, [pc, #20]	@ (800ad28 <SVCCTL_Init+0x1c>)
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800ad18:	4b04      	ldr	r3, [pc, #16]	@ (800ad2c <SVCCTL_Init+0x20>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800ad20:	f000 f806 	bl	800ad30 <SVCCTL_SvcInit>

  return;
 800ad24:	bf00      	nop
}
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	200001e4 	.word	0x200001e4
 800ad2c:	20000210 	.word	0x20000210

0800ad30 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	af00      	add	r7, sp, #0
  BAS_Init();
 800ad34:	f7ff ff6c 	bl	800ac10 <BAS_Init>

  BLS_Init();
 800ad38:	f7ff ff71 	bl	800ac1e <BLS_Init>

  CRS_STM_Init();
 800ad3c:	f7ff ff76 	bl	800ac2c <CRS_STM_Init>

  DIS_Init();
 800ad40:	f7ff ff7b 	bl	800ac3a <DIS_Init>

  EDS_STM_Init();
 800ad44:	f7ff ff80 	bl	800ac48 <EDS_STM_Init>

  HIDS_Init();
 800ad48:	f7ff ff85 	bl	800ac56 <HIDS_Init>

  HRS_Init();
 800ad4c:	f7ff ff8a 	bl	800ac64 <HRS_Init>

  HTS_Init();
 800ad50:	f7ff ff8f 	bl	800ac72 <HTS_Init>

  IAS_Init();
 800ad54:	f7ff ff94 	bl	800ac80 <IAS_Init>

  LLS_Init();
 800ad58:	f7ff ff99 	bl	800ac8e <LLS_Init>

  TPS_Init();
 800ad5c:	f7ff ff9e 	bl	800ac9c <TPS_Init>

  MOTENV_STM_Init();
 800ad60:	f7ff ffa3 	bl	800acaa <MOTENV_STM_Init>

  P2PS_STM_Init();
 800ad64:	f7ff ffa8 	bl	800acb8 <P2PS_STM_Init>

  ZDD_STM_Init();
 800ad68:	f7ff ffad 	bl	800acc6 <ZDD_STM_Init>

  OTAS_STM_Init();
 800ad6c:	f7ff ffb2 	bl	800acd4 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800ad70:	f7ff ffbe 	bl	800acf0 <BVOPUS_STM_Init>

  MESH_Init();
 800ad74:	f7ff ffb5 	bl	800ace2 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800ad78:	f7ff ffc1 	bl	800acfe <SVCCTL_InitCustomSvc>
  
  return;
 800ad7c:	bf00      	nop
}
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 800ad88:	4b0a      	ldr	r3, [pc, #40]	@ (800adb4 <SVCCTL_RegisterCltHandler+0x34>)
 800ad8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad8e:	4619      	mov	r1, r3
 800ad90:	4a08      	ldr	r2, [pc, #32]	@ (800adb4 <SVCCTL_RegisterCltHandler+0x34>)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 800ad98:	4b06      	ldr	r3, [pc, #24]	@ (800adb4 <SVCCTL_RegisterCltHandler+0x34>)
 800ad9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad9e:	3301      	adds	r3, #1
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	4b04      	ldr	r3, [pc, #16]	@ (800adb4 <SVCCTL_RegisterCltHandler+0x34>)
 800ada4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 800ada8:	bf00      	nop
}
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	20000210 	.word	0x20000210

0800adb8 <SVCCTL_UserEvtRx>:

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	3301      	adds	r3, #1
 800adc4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800adc6:	2300      	movs	r3, #0
 800adc8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	2bff      	cmp	r3, #255	@ 0xff
 800add0:	d141      	bne.n	800ae56 <SVCCTL_UserEvtRx+0x9e>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	3302      	adds	r3, #2
 800add6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	881b      	ldrh	r3, [r3, #0]
 800addc:	b29b      	uxth	r3, r3
 800adde:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ade2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ade6:	d134      	bne.n	800ae52 <SVCCTL_UserEvtRx+0x9a>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ade8:	2300      	movs	r3, #0
 800adea:	757b      	strb	r3, [r7, #21]
 800adec:	e00d      	b.n	800ae0a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800adee:	7d7b      	ldrb	r3, [r7, #21]
 800adf0:	4a28      	ldr	r2, [pc, #160]	@ (800ae94 <SVCCTL_UserEvtRx+0xdc>)
 800adf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	4798      	blx	r3
 800adfa:	4603      	mov	r3, r0
 800adfc:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800adfe:	7dfb      	ldrb	r3, [r7, #23]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d109      	bne.n	800ae18 <SVCCTL_UserEvtRx+0x60>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ae04:	7d7b      	ldrb	r3, [r7, #21]
 800ae06:	3301      	adds	r3, #1
 800ae08:	757b      	strb	r3, [r7, #21]
 800ae0a:	4b22      	ldr	r3, [pc, #136]	@ (800ae94 <SVCCTL_UserEvtRx+0xdc>)
 800ae0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae10:	7d7a      	ldrb	r2, [r7, #21]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d3eb      	bcc.n	800adee <SVCCTL_UserEvtRx+0x36>
 800ae16:	e000      	b.n	800ae1a <SVCCTL_UserEvtRx+0x62>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 800ae18:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800ae1e:	2300      	movs	r3, #0
 800ae20:	757b      	strb	r3, [r7, #21]
 800ae22:	e00d      	b.n	800ae40 <SVCCTL_UserEvtRx+0x88>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800ae24:	7d7b      	ldrb	r3, [r7, #21]
 800ae26:	4a1c      	ldr	r2, [pc, #112]	@ (800ae98 <SVCCTL_UserEvtRx+0xe0>)
 800ae28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	4798      	blx	r3
 800ae30:	4603      	mov	r3, r0
 800ae32:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800ae34:	7dfb      	ldrb	r3, [r7, #23]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d109      	bne.n	800ae4e <SVCCTL_UserEvtRx+0x96>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800ae3a:	7d7b      	ldrb	r3, [r7, #21]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	757b      	strb	r3, [r7, #21]
 800ae40:	4b15      	ldr	r3, [pc, #84]	@ (800ae98 <SVCCTL_UserEvtRx+0xe0>)
 800ae42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae46:	7d7a      	ldrb	r2, [r7, #21]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d3eb      	bcc.n	800ae24 <SVCCTL_UserEvtRx+0x6c>
               */
              break;
            }
          }
#endif
          break;
 800ae4c:	e002      	b.n	800ae54 <SVCCTL_UserEvtRx+0x9c>
              break;
 800ae4e:	bf00      	nop
          break;
 800ae50:	e000      	b.n	800ae54 <SVCCTL_UserEvtRx+0x9c>

        default:
          break;
 800ae52:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800ae54:	e000      	b.n	800ae58 <SVCCTL_UserEvtRx+0xa0>

    default:
      break;
 800ae56:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800ae58:	7dfb      	ldrb	r3, [r7, #23]
 800ae5a:	2b02      	cmp	r3, #2
 800ae5c:	d00f      	beq.n	800ae7e <SVCCTL_UserEvtRx+0xc6>
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	dc10      	bgt.n	800ae84 <SVCCTL_UserEvtRx+0xcc>
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d002      	beq.n	800ae6c <SVCCTL_UserEvtRx+0xb4>
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d006      	beq.n	800ae78 <SVCCTL_UserEvtRx+0xc0>
 800ae6a:	e00b      	b.n	800ae84 <SVCCTL_UserEvtRx+0xcc>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f001 f81b 	bl	800bea8 <SVCCTL_App_Notification>
 800ae72:	4603      	mov	r3, r0
 800ae74:	75bb      	strb	r3, [r7, #22]
      break;
 800ae76:	e008      	b.n	800ae8a <SVCCTL_UserEvtRx+0xd2>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	75bb      	strb	r3, [r7, #22]
      break;
 800ae7c:	e005      	b.n	800ae8a <SVCCTL_UserEvtRx+0xd2>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	75bb      	strb	r3, [r7, #22]
      break;
 800ae82:	e002      	b.n	800ae8a <SVCCTL_UserEvtRx+0xd2>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ae84:	2301      	movs	r3, #1
 800ae86:	75bb      	strb	r3, [r7, #22]
      break;
 800ae88:	bf00      	nop
  }

  return (return_status);
 800ae8a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3718      	adds	r7, #24
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	200001e4 	.word	0x200001e4
 800ae98:	20000210 	.word	0x20000210

0800ae9c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b088      	sub	sp, #32
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800aea4:	f107 030c 	add.w	r3, r7, #12
 800aea8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	212e      	movs	r1, #46	@ 0x2e
 800aeb4:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800aeb8:	f000 fae8 	bl	800b48c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	330b      	adds	r3, #11
 800aec0:	78db      	ldrb	r3, [r3, #3]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3720      	adds	r7, #32
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b088      	sub	sp, #32
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800aed2:	f107 030c 	add.w	r3, r7, #12
 800aed6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	210f      	movs	r1, #15
 800aee2:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800aee6:	f000 fad1 	bl	800b48c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	330b      	adds	r3, #11
 800aeee:	78db      	ldrb	r3, [r3, #3]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3720      	adds	r7, #32
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b088      	sub	sp, #32
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800af00:	f107 030c 	add.w	r3, r7, #12
 800af04:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	2110      	movs	r1, #16
 800af0c:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800af10:	f000 fabc 	bl	800b48c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	330b      	adds	r3, #11
 800af18:	78db      	ldrb	r3, [r3, #3]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3720      	adds	r7, #32
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
	...

0800af24 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800af24:	b480      	push	{r7}
 800af26:	b08b      	sub	sp, #44	@ 0x2c
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800af30:	2300      	movs	r3, #0
 800af32:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800af34:	2300      	movs	r3, #0
 800af36:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800af38:	2300      	movs	r3, #0
 800af3a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800af40:	2300      	movs	r3, #0
 800af42:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800af44:	2300      	movs	r3, #0
 800af46:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800af48:	2300      	movs	r3, #0
 800af4a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800af4c:	4b4a      	ldr	r3, [pc, #296]	@ (800b078 <SHCI_GetWirelessFwInfo+0x154>)
 800af4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800af54:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800af5e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a44      	ldr	r2, [pc, #272]	@ (800b07c <SHCI_GetWirelessFwInfo+0x158>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d10f      	bne.n	800af90 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	695b      	ldr	r3, [r3, #20]
 800af74:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	69db      	ldr	r3, [r3, #28]
 800af80:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	617b      	str	r3, [r7, #20]
 800af8e:	e01a      	b.n	800afc6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800af98:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800af9c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	695b      	ldr	r3, [r3, #20]
 800afac:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	699b      	ldr	r3, [r3, #24]
 800afb4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800afc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc8:	0e1b      	lsrs	r3, r3, #24
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800afd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd2:	0c1b      	lsrs	r3, r3, #16
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800afda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afdc:	0a1b      	lsrs	r3, r3, #8
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800afe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe6:	091b      	lsrs	r3, r3, #4
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	f003 030f 	and.w	r3, r3, #15
 800afee:	b2da      	uxtb	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800aff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	f003 030f 	and.w	r3, r3, #15
 800affc:	b2da      	uxtb	r2, r3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b002:	6a3b      	ldr	r3, [r7, #32]
 800b004:	0e1b      	lsrs	r3, r3, #24
 800b006:	b2da      	uxtb	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	0c1b      	lsrs	r3, r3, #16
 800b010:	b2da      	uxtb	r2, r3
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800b016:	6a3b      	ldr	r3, [r7, #32]
 800b018:	0a1b      	lsrs	r3, r3, #8
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b020:	6a3b      	ldr	r3, [r7, #32]
 800b022:	b2da      	uxtb	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	b2da      	uxtb	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	0e1b      	lsrs	r3, r3, #24
 800b034:	b2da      	uxtb	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	0c1b      	lsrs	r3, r3, #16
 800b03e:	b2da      	uxtb	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	0a1b      	lsrs	r3, r3, #8
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	0e1b      	lsrs	r3, r3, #24
 800b052:	b2da      	uxtb	r2, r3
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	0c1b      	lsrs	r3, r3, #16
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	b2da      	uxtb	r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	372c      	adds	r7, #44	@ 0x2c
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	58004000 	.word	0x58004000
 800b07c:	a94656b9 	.word	0xa94656b9

0800b080 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	4a08      	ldr	r2, [pc, #32]	@ (800b0b0 <hci_init+0x30>)
 800b090:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800b092:	4a08      	ldr	r2, [pc, #32]	@ (800b0b4 <hci_init+0x34>)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800b098:	4806      	ldr	r0, [pc, #24]	@ (800b0b4 <hci_init+0x34>)
 800b09a:	f000 f979 	bl	800b390 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f000 f8da 	bl	800b25c <TlInit>

  return;
 800b0a8:	bf00      	nop
}
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	20000b58 	.word	0x20000b58
 800b0b4:	20000b30 	.word	0x20000b30

0800b0b8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b0be:	4822      	ldr	r0, [pc, #136]	@ (800b148 <hci_user_evt_proc+0x90>)
 800b0c0:	f000 fdca 	bl	800bc58 <LST_is_empty>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d12b      	bne.n	800b122 <hci_user_evt_proc+0x6a>
 800b0ca:	4b20      	ldr	r3, [pc, #128]	@ (800b14c <hci_user_evt_proc+0x94>)
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d027      	beq.n	800b122 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b0d2:	f107 030c 	add.w	r3, r7, #12
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	481b      	ldr	r0, [pc, #108]	@ (800b148 <hci_user_evt_proc+0x90>)
 800b0da:	f000 fe4c 	bl	800bd76 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800b0de:	4b1c      	ldr	r3, [pc, #112]	@ (800b150 <hci_user_evt_proc+0x98>)
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00c      	beq.n	800b100 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b0ee:	4b18      	ldr	r3, [pc, #96]	@ (800b150 <hci_user_evt_proc+0x98>)
 800b0f0:	69db      	ldr	r3, [r3, #28]
 800b0f2:	1d3a      	adds	r2, r7, #4
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800b0f8:	793a      	ldrb	r2, [r7, #4]
 800b0fa:	4b14      	ldr	r3, [pc, #80]	@ (800b14c <hci_user_evt_proc+0x94>)
 800b0fc:	701a      	strb	r2, [r3, #0]
 800b0fe:	e002      	b.n	800b106 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b100:	4b12      	ldr	r3, [pc, #72]	@ (800b14c <hci_user_evt_proc+0x94>)
 800b102:	2201      	movs	r2, #1
 800b104:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800b106:	4b11      	ldr	r3, [pc, #68]	@ (800b14c <hci_user_evt_proc+0x94>)
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d004      	beq.n	800b118 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	4618      	mov	r0, r3
 800b112:	f000 fc0d 	bl	800b930 <TL_MM_EvtDone>
 800b116:	e004      	b.n	800b122 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	4619      	mov	r1, r3
 800b11c:	480a      	ldr	r0, [pc, #40]	@ (800b148 <hci_user_evt_proc+0x90>)
 800b11e:	f000 fdbd 	bl	800bc9c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b122:	4809      	ldr	r0, [pc, #36]	@ (800b148 <hci_user_evt_proc+0x90>)
 800b124:	f000 fd98 	bl	800bc58 <LST_is_empty>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d107      	bne.n	800b13e <hci_user_evt_proc+0x86>
 800b12e:	4b07      	ldr	r3, [pc, #28]	@ (800b14c <hci_user_evt_proc+0x94>)
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d003      	beq.n	800b13e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800b136:	4804      	ldr	r0, [pc, #16]	@ (800b148 <hci_user_evt_proc+0x90>)
 800b138:	f001 fba4 	bl	800c884 <hci_notify_asynch_evt>
  }


  return;
 800b13c:	bf00      	nop
 800b13e:	bf00      	nop
}
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	20000240 	.word	0x20000240
 800b14c:	2000024c 	.word	0x2000024c
 800b150:	20000b30 	.word	0x20000b30

0800b154 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b088      	sub	sp, #32
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	460b      	mov	r3, r1
 800b15e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800b160:	2000      	movs	r0, #0
 800b162:	f000 f8d1 	bl	800b308 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800b166:	2300      	movs	r3, #0
 800b168:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	885b      	ldrh	r3, [r3, #2]
 800b16e:	b21b      	sxth	r3, r3
 800b170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b174:	b21a      	sxth	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	881b      	ldrh	r3, [r3, #0]
 800b17a:	029b      	lsls	r3, r3, #10
 800b17c:	b21b      	sxth	r3, r3
 800b17e:	4313      	orrs	r3, r2
 800b180:	b21b      	sxth	r3, r3
 800b182:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800b184:	4b33      	ldr	r3, [pc, #204]	@ (800b254 <hci_send_req+0x100>)
 800b186:	2201      	movs	r2, #1
 800b188:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	b2d9      	uxtb	r1, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	689a      	ldr	r2, [r3, #8]
 800b194:	8bbb      	ldrh	r3, [r7, #28]
 800b196:	4618      	mov	r0, r3
 800b198:	f000 f890 	bl	800b2bc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800b19c:	e04e      	b.n	800b23c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800b19e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800b1a2:	f001 fb86 	bl	800c8b2 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b1a6:	e043      	b.n	800b230 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800b1a8:	f107 030c 	add.w	r3, r7, #12
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	482a      	ldr	r0, [pc, #168]	@ (800b258 <hci_send_req+0x104>)
 800b1b0:	f000 fde1 	bl	800bd76 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	7a5b      	ldrb	r3, [r3, #9]
 800b1b8:	2b0f      	cmp	r3, #15
 800b1ba:	d114      	bne.n	800b1e6 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	330b      	adds	r3, #11
 800b1c0:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	885b      	ldrh	r3, [r3, #2]
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	8bba      	ldrh	r2, [r7, #28]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d104      	bne.n	800b1d8 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	7812      	ldrb	r2, [r2, #0]
 800b1d6:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	785b      	ldrb	r3, [r3, #1]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d027      	beq.n	800b230 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	77fb      	strb	r3, [r7, #31]
 800b1e4:	e024      	b.n	800b230 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	330b      	adds	r3, #11
 800b1ea:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	8bba      	ldrh	r2, [r7, #28]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d114      	bne.n	800b224 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	7a9b      	ldrb	r3, [r3, #10]
 800b1fe:	3b03      	subs	r3, #3
 800b200:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	695a      	ldr	r2, [r3, #20]
 800b206:	7dfb      	ldrb	r3, [r7, #23]
 800b208:	429a      	cmp	r2, r3
 800b20a:	bfa8      	it	ge
 800b20c:	461a      	movge	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6918      	ldr	r0, [r3, #16]
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	1cd9      	adds	r1, r3, #3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	461a      	mov	r2, r3
 800b220:	f003 fe5f 	bl	800eee2 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d001      	beq.n	800b230 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b22c:	2301      	movs	r3, #1
 800b22e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b230:	4809      	ldr	r0, [pc, #36]	@ (800b258 <hci_send_req+0x104>)
 800b232:	f000 fd11 	bl	800bc58 <LST_is_empty>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d0b5      	beq.n	800b1a8 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800b23c:	7ffb      	ldrb	r3, [r7, #31]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d0ad      	beq.n	800b19e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800b242:	2001      	movs	r0, #1
 800b244:	f000 f860 	bl	800b308 <NotifyCmdStatus>

  return 0;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3720      	adds	r7, #32
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	20000b5c 	.word	0x20000b5c
 800b258:	20000b50 	.word	0x20000b50

0800b25c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b086      	sub	sp, #24
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800b264:	480f      	ldr	r0, [pc, #60]	@ (800b2a4 <TlInit+0x48>)
 800b266:	f000 fce7 	bl	800bc38 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800b26a:	4a0f      	ldr	r2, [pc, #60]	@ (800b2a8 <TlInit+0x4c>)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800b270:	480e      	ldr	r0, [pc, #56]	@ (800b2ac <TlInit+0x50>)
 800b272:	f000 fce1 	bl	800bc38 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b276:	4b0e      	ldr	r3, [pc, #56]	@ (800b2b0 <TlInit+0x54>)
 800b278:	2201      	movs	r2, #1
 800b27a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800b27c:	4b0d      	ldr	r3, [pc, #52]	@ (800b2b4 <TlInit+0x58>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d00a      	beq.n	800b29a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800b288:	4b0b      	ldr	r3, [pc, #44]	@ (800b2b8 <TlInit+0x5c>)
 800b28a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800b28c:	4b09      	ldr	r3, [pc, #36]	@ (800b2b4 <TlInit+0x58>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f107 0208 	add.w	r2, r7, #8
 800b294:	4610      	mov	r0, r2
 800b296:	4798      	blx	r3
  }

  return;
 800b298:	bf00      	nop
 800b29a:	bf00      	nop
}
 800b29c:	3718      	adds	r7, #24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20000b50 	.word	0x20000b50
 800b2a8:	20000248 	.word	0x20000248
 800b2ac:	20000240 	.word	0x20000240
 800b2b0:	2000024c 	.word	0x2000024c
 800b2b4:	20000b30 	.word	0x20000b30
 800b2b8:	0800b349 	.word	0x0800b349

0800b2bc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	603a      	str	r2, [r7, #0]
 800b2c6:	80fb      	strh	r3, [r7, #6]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800b2cc:	4b0c      	ldr	r3, [pc, #48]	@ (800b300 <SendCmd+0x44>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	88fa      	ldrh	r2, [r7, #6]
 800b2d2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800b2d6:	4b0a      	ldr	r3, [pc, #40]	@ (800b300 <SendCmd+0x44>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	797a      	ldrb	r2, [r7, #5]
 800b2dc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800b2de:	4b08      	ldr	r3, [pc, #32]	@ (800b300 <SendCmd+0x44>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	330c      	adds	r3, #12
 800b2e4:	797a      	ldrb	r2, [r7, #5]
 800b2e6:	6839      	ldr	r1, [r7, #0]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f003 fdfa 	bl	800eee2 <memcpy>

  hciContext.io.Send(0,0);
 800b2ee:	4b05      	ldr	r3, [pc, #20]	@ (800b304 <SendCmd+0x48>)
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	4798      	blx	r3

  return;
 800b2f8:	bf00      	nop
}
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	20000248 	.word	0x20000248
 800b304:	20000b30 	.word	0x20000b30

0800b308 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	4603      	mov	r3, r0
 800b310:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800b312:	79fb      	ldrb	r3, [r7, #7]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d108      	bne.n	800b32a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800b318:	4b0a      	ldr	r3, [pc, #40]	@ (800b344 <NotifyCmdStatus+0x3c>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00d      	beq.n	800b33c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800b320:	4b08      	ldr	r3, [pc, #32]	@ (800b344 <NotifyCmdStatus+0x3c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2000      	movs	r0, #0
 800b326:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800b328:	e008      	b.n	800b33c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800b32a:	4b06      	ldr	r3, [pc, #24]	@ (800b344 <NotifyCmdStatus+0x3c>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d004      	beq.n	800b33c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800b332:	4b04      	ldr	r3, [pc, #16]	@ (800b344 <NotifyCmdStatus+0x3c>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2001      	movs	r0, #1
 800b338:	4798      	blx	r3
  return;
 800b33a:	bf00      	nop
 800b33c:	bf00      	nop
}
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	20000b58 	.word	0x20000b58

0800b348 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	7a5b      	ldrb	r3, [r3, #9]
 800b354:	2b0f      	cmp	r3, #15
 800b356:	d003      	beq.n	800b360 <TlEvtReceived+0x18>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	7a5b      	ldrb	r3, [r3, #9]
 800b35c:	2b0e      	cmp	r3, #14
 800b35e:	d107      	bne.n	800b370 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800b360:	6879      	ldr	r1, [r7, #4]
 800b362:	4809      	ldr	r0, [pc, #36]	@ (800b388 <TlEvtReceived+0x40>)
 800b364:	f000 fcc0 	bl	800bce8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800b368:	2000      	movs	r0, #0
 800b36a:	f001 fa97 	bl	800c89c <hci_cmd_resp_release>
 800b36e:	e006      	b.n	800b37e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800b370:	6879      	ldr	r1, [r7, #4]
 800b372:	4806      	ldr	r0, [pc, #24]	@ (800b38c <TlEvtReceived+0x44>)
 800b374:	f000 fcb8 	bl	800bce8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b378:	4804      	ldr	r0, [pc, #16]	@ (800b38c <TlEvtReceived+0x44>)
 800b37a:	f001 fa83 	bl	800c884 <hci_notify_asynch_evt>
  }

  return;
 800b37e:	bf00      	nop
}
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	20000b50 	.word	0x20000b50
 800b38c:	20000240 	.word	0x20000240

0800b390 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a05      	ldr	r2, [pc, #20]	@ (800b3b0 <hci_register_io_bus+0x20>)
 800b39c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a04      	ldr	r2, [pc, #16]	@ (800b3b4 <hci_register_io_bus+0x24>)
 800b3a2:	611a      	str	r2, [r3, #16]

  return;
 800b3a4:	bf00      	nop
}
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr
 800b3b0:	0800b6a9 	.word	0x0800b6a9
 800b3b4:	0800b711 	.word	0x0800b711

0800b3b8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	4a08      	ldr	r2, [pc, #32]	@ (800b3e8 <shci_init+0x30>)
 800b3c8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b3ca:	4a08      	ldr	r2, [pc, #32]	@ (800b3ec <shci_init+0x34>)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b3d0:	4806      	ldr	r0, [pc, #24]	@ (800b3ec <shci_init+0x34>)
 800b3d2:	f000 f915 	bl	800b600 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f000 f898 	bl	800b510 <TlInit>

  return;
 800b3e0:	bf00      	nop
}
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	20000b80 	.word	0x20000b80
 800b3ec:	20000b60 	.word	0x20000b60

0800b3f0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b3f6:	4822      	ldr	r0, [pc, #136]	@ (800b480 <shci_user_evt_proc+0x90>)
 800b3f8:	f000 fc2e 	bl	800bc58 <LST_is_empty>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d12b      	bne.n	800b45a <shci_user_evt_proc+0x6a>
 800b402:	4b20      	ldr	r3, [pc, #128]	@ (800b484 <shci_user_evt_proc+0x94>)
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d027      	beq.n	800b45a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b40a:	f107 030c 	add.w	r3, r7, #12
 800b40e:	4619      	mov	r1, r3
 800b410:	481b      	ldr	r0, [pc, #108]	@ (800b480 <shci_user_evt_proc+0x90>)
 800b412:	f000 fcb0 	bl	800bd76 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b416:	4b1c      	ldr	r3, [pc, #112]	@ (800b488 <shci_user_evt_proc+0x98>)
 800b418:	69db      	ldr	r3, [r3, #28]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00c      	beq.n	800b438 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b422:	2301      	movs	r3, #1
 800b424:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b426:	4b18      	ldr	r3, [pc, #96]	@ (800b488 <shci_user_evt_proc+0x98>)
 800b428:	69db      	ldr	r3, [r3, #28]
 800b42a:	1d3a      	adds	r2, r7, #4
 800b42c:	4610      	mov	r0, r2
 800b42e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b430:	793a      	ldrb	r2, [r7, #4]
 800b432:	4b14      	ldr	r3, [pc, #80]	@ (800b484 <shci_user_evt_proc+0x94>)
 800b434:	701a      	strb	r2, [r3, #0]
 800b436:	e002      	b.n	800b43e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b438:	4b12      	ldr	r3, [pc, #72]	@ (800b484 <shci_user_evt_proc+0x94>)
 800b43a:	2201      	movs	r2, #1
 800b43c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b43e:	4b11      	ldr	r3, [pc, #68]	@ (800b484 <shci_user_evt_proc+0x94>)
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d004      	beq.n	800b450 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	4618      	mov	r0, r3
 800b44a:	f000 fa71 	bl	800b930 <TL_MM_EvtDone>
 800b44e:	e004      	b.n	800b45a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	4619      	mov	r1, r3
 800b454:	480a      	ldr	r0, [pc, #40]	@ (800b480 <shci_user_evt_proc+0x90>)
 800b456:	f000 fc21 	bl	800bc9c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b45a:	4809      	ldr	r0, [pc, #36]	@ (800b480 <shci_user_evt_proc+0x90>)
 800b45c:	f000 fbfc 	bl	800bc58 <LST_is_empty>
 800b460:	4603      	mov	r3, r0
 800b462:	2b00      	cmp	r3, #0
 800b464:	d107      	bne.n	800b476 <shci_user_evt_proc+0x86>
 800b466:	4b07      	ldr	r3, [pc, #28]	@ (800b484 <shci_user_evt_proc+0x94>)
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d003      	beq.n	800b476 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b46e:	4804      	ldr	r0, [pc, #16]	@ (800b480 <shci_user_evt_proc+0x90>)
 800b470:	f7f6 f8d2 	bl	8001618 <shci_notify_asynch_evt>
  }


  return;
 800b474:	bf00      	nop
 800b476:	bf00      	nop
}
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20000250 	.word	0x20000250
 800b484:	20000260 	.word	0x20000260
 800b488:	20000b60 	.word	0x20000b60

0800b48c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	60ba      	str	r2, [r7, #8]
 800b494:	607b      	str	r3, [r7, #4]
 800b496:	4603      	mov	r3, r0
 800b498:	81fb      	strh	r3, [r7, #14]
 800b49a:	460b      	mov	r3, r1
 800b49c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b49e:	2000      	movs	r0, #0
 800b4a0:	f000 f868 	bl	800b574 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b4a4:	4b17      	ldr	r3, [pc, #92]	@ (800b504 <shci_send+0x78>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	89fa      	ldrh	r2, [r7, #14]
 800b4aa:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b4ae:	4b15      	ldr	r3, [pc, #84]	@ (800b504 <shci_send+0x78>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	7b7a      	ldrb	r2, [r7, #13]
 800b4b4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b4b6:	4b13      	ldr	r3, [pc, #76]	@ (800b504 <shci_send+0x78>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	330c      	adds	r3, #12
 800b4bc:	7b7a      	ldrb	r2, [r7, #13]
 800b4be:	68b9      	ldr	r1, [r7, #8]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f003 fd0e 	bl	800eee2 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800b4c6:	4b10      	ldr	r3, [pc, #64]	@ (800b508 <shci_send+0x7c>)
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800b4cc:	4b0f      	ldr	r3, [pc, #60]	@ (800b50c <shci_send+0x80>)
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b4d6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800b4da:	f7f6 f8b4 	bl	8001646 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f103 0008 	add.w	r0, r3, #8
 800b4e4:	4b07      	ldr	r3, [pc, #28]	@ (800b504 <shci_send+0x78>)
 800b4e6:	6819      	ldr	r1, [r3, #0]
 800b4e8:	4b06      	ldr	r3, [pc, #24]	@ (800b504 <shci_send+0x78>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	789b      	ldrb	r3, [r3, #2]
 800b4ee:	3303      	adds	r3, #3
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	f003 fcf6 	bl	800eee2 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b4f6:	2001      	movs	r0, #1
 800b4f8:	f000 f83c 	bl	800b574 <Cmd_SetStatus>

  return;
 800b4fc:	bf00      	nop
}
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	2000025c 	.word	0x2000025c
 800b508:	20000b84 	.word	0x20000b84
 800b50c:	20000b60 	.word	0x20000b60

0800b510 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b518:	4a10      	ldr	r2, [pc, #64]	@ (800b55c <TlInit+0x4c>)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b51e:	4810      	ldr	r0, [pc, #64]	@ (800b560 <TlInit+0x50>)
 800b520:	f000 fb8a 	bl	800bc38 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b524:	2001      	movs	r0, #1
 800b526:	f000 f825 	bl	800b574 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b52a:	4b0e      	ldr	r3, [pc, #56]	@ (800b564 <TlInit+0x54>)
 800b52c:	2201      	movs	r2, #1
 800b52e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b530:	4b0d      	ldr	r3, [pc, #52]	@ (800b568 <TlInit+0x58>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00c      	beq.n	800b552 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b53c:	4b0b      	ldr	r3, [pc, #44]	@ (800b56c <TlInit+0x5c>)
 800b53e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b540:	4b0b      	ldr	r3, [pc, #44]	@ (800b570 <TlInit+0x60>)
 800b542:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b544:	4b08      	ldr	r3, [pc, #32]	@ (800b568 <TlInit+0x58>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f107 020c 	add.w	r2, r7, #12
 800b54c:	4610      	mov	r0, r2
 800b54e:	4798      	blx	r3
  }

  return;
 800b550:	bf00      	nop
 800b552:	bf00      	nop
}
 800b554:	3718      	adds	r7, #24
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	2000025c 	.word	0x2000025c
 800b560:	20000250 	.word	0x20000250
 800b564:	20000260 	.word	0x20000260
 800b568:	20000b60 	.word	0x20000b60
 800b56c:	0800b5c5 	.word	0x0800b5c5
 800b570:	0800b5dd 	.word	0x0800b5dd

0800b574 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	4603      	mov	r3, r0
 800b57c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b57e:	79fb      	ldrb	r3, [r7, #7]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d10b      	bne.n	800b59c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b584:	4b0d      	ldr	r3, [pc, #52]	@ (800b5bc <Cmd_SetStatus+0x48>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d003      	beq.n	800b594 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b58c:	4b0b      	ldr	r3, [pc, #44]	@ (800b5bc <Cmd_SetStatus+0x48>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2000      	movs	r0, #0
 800b592:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b594:	4b0a      	ldr	r3, [pc, #40]	@ (800b5c0 <Cmd_SetStatus+0x4c>)
 800b596:	2200      	movs	r2, #0
 800b598:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b59a:	e00b      	b.n	800b5b4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b59c:	4b08      	ldr	r3, [pc, #32]	@ (800b5c0 <Cmd_SetStatus+0x4c>)
 800b59e:	2201      	movs	r2, #1
 800b5a0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b5a2:	4b06      	ldr	r3, [pc, #24]	@ (800b5bc <Cmd_SetStatus+0x48>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d004      	beq.n	800b5b4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b5aa:	4b04      	ldr	r3, [pc, #16]	@ (800b5bc <Cmd_SetStatus+0x48>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	4798      	blx	r3
  return;
 800b5b2:	bf00      	nop
 800b5b4:	bf00      	nop
}
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	20000b80 	.word	0x20000b80
 800b5c0:	20000258 	.word	0x20000258

0800b5c4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	f7f6 f82f 	bl	8001630 <shci_cmd_resp_release>

  return;
 800b5d2:	bf00      	nop
}
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
	...

0800b5dc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b5e4:	6879      	ldr	r1, [r7, #4]
 800b5e6:	4805      	ldr	r0, [pc, #20]	@ (800b5fc <TlUserEvtReceived+0x20>)
 800b5e8:	f000 fb7e 	bl	800bce8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b5ec:	4803      	ldr	r0, [pc, #12]	@ (800b5fc <TlUserEvtReceived+0x20>)
 800b5ee:	f7f6 f813 	bl	8001618 <shci_notify_asynch_evt>

  return;
 800b5f2:	bf00      	nop
}
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	20000250 	.word	0x20000250

0800b600 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a05      	ldr	r2, [pc, #20]	@ (800b620 <shci_register_io_bus+0x20>)
 800b60c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4a04      	ldr	r2, [pc, #16]	@ (800b624 <shci_register_io_bus+0x24>)
 800b612:	611a      	str	r2, [r3, #16]

  return;
 800b614:	bf00      	nop
}
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	0800b7bd 	.word	0x0800b7bd
 800b624:	0800b811 	.word	0x0800b811

0800b628 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b62c:	f002 fa24 	bl	800da78 <HW_IPCC_Enable>

  return;
 800b630:	bf00      	nop
}
 800b632:	bd80      	pop	{r7, pc}

0800b634 <TL_Init>:


void TL_Init( void )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b638:	4b10      	ldr	r3, [pc, #64]	@ (800b67c <TL_Init+0x48>)
 800b63a:	4a11      	ldr	r2, [pc, #68]	@ (800b680 <TL_Init+0x4c>)
 800b63c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b63e:	4b0f      	ldr	r3, [pc, #60]	@ (800b67c <TL_Init+0x48>)
 800b640:	4a10      	ldr	r2, [pc, #64]	@ (800b684 <TL_Init+0x50>)
 800b642:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b644:	4b0d      	ldr	r3, [pc, #52]	@ (800b67c <TL_Init+0x48>)
 800b646:	4a10      	ldr	r2, [pc, #64]	@ (800b688 <TL_Init+0x54>)
 800b648:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b64a:	4b0c      	ldr	r3, [pc, #48]	@ (800b67c <TL_Init+0x48>)
 800b64c:	4a0f      	ldr	r2, [pc, #60]	@ (800b68c <TL_Init+0x58>)
 800b64e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800b650:	4b0a      	ldr	r3, [pc, #40]	@ (800b67c <TL_Init+0x48>)
 800b652:	4a0f      	ldr	r2, [pc, #60]	@ (800b690 <TL_Init+0x5c>)
 800b654:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b656:	4b09      	ldr	r3, [pc, #36]	@ (800b67c <TL_Init+0x48>)
 800b658:	4a0e      	ldr	r2, [pc, #56]	@ (800b694 <TL_Init+0x60>)
 800b65a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b65c:	4b07      	ldr	r3, [pc, #28]	@ (800b67c <TL_Init+0x48>)
 800b65e:	4a0e      	ldr	r2, [pc, #56]	@ (800b698 <TL_Init+0x64>)
 800b660:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b662:	4b06      	ldr	r3, [pc, #24]	@ (800b67c <TL_Init+0x48>)
 800b664:	4a0d      	ldr	r2, [pc, #52]	@ (800b69c <TL_Init+0x68>)
 800b666:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b668:	4b04      	ldr	r3, [pc, #16]	@ (800b67c <TL_Init+0x48>)
 800b66a:	4a0d      	ldr	r2, [pc, #52]	@ (800b6a0 <TL_Init+0x6c>)
 800b66c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b66e:	4b03      	ldr	r3, [pc, #12]	@ (800b67c <TL_Init+0x48>)
 800b670:	4a0c      	ldr	r2, [pc, #48]	@ (800b6a4 <TL_Init+0x70>)
 800b672:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b674:	f002 fa14 	bl	800daa0 <HW_IPCC_Init>

  return;
 800b678:	bf00      	nop
}
 800b67a:	bd80      	pop	{r7, pc}
 800b67c:	20030000 	.word	0x20030000
 800b680:	20030028 	.word	0x20030028
 800b684:	20030048 	.word	0x20030048
 800b688:	20030058 	.word	0x20030058
 800b68c:	20030068 	.word	0x20030068
 800b690:	20030070 	.word	0x20030070
 800b694:	20030078 	.word	0x20030078
 800b698:	20030080 	.word	0x20030080
 800b69c:	2003009c 	.word	0x2003009c
 800b6a0:	200300a0 	.word	0x200300a0
 800b6a4:	200300ac 	.word	0x200300ac

0800b6a8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b6b4:	4811      	ldr	r0, [pc, #68]	@ (800b6fc <TL_BLE_Init+0x54>)
 800b6b6:	f000 fabf 	bl	800bc38 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b6ba:	4b11      	ldr	r3, [pc, #68]	@ (800b700 <TL_BLE_Init+0x58>)
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	689a      	ldr	r2, [r3, #8]
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	68da      	ldr	r2, [r3, #12]
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	4a0c      	ldr	r2, [pc, #48]	@ (800b704 <TL_BLE_Init+0x5c>)
 800b6d4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	4a08      	ldr	r2, [pc, #32]	@ (800b6fc <TL_BLE_Init+0x54>)
 800b6da:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b6dc:	f002 f9f6 	bl	800dacc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a08      	ldr	r2, [pc, #32]	@ (800b708 <TL_BLE_Init+0x60>)
 800b6e6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	4a07      	ldr	r2, [pc, #28]	@ (800b70c <TL_BLE_Init+0x64>)
 800b6ee:	6013      	str	r3, [r2, #0]

  return 0;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	200300c8 	.word	0x200300c8
 800b700:	20030000 	.word	0x20030000
 800b704:	20030a58 	.word	0x20030a58
 800b708:	20000b90 	.word	0x20000b90
 800b70c:	20000b94 	.word	0x20000b94

0800b710 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	460b      	mov	r3, r1
 800b71a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b71c:	4b09      	ldr	r3, [pc, #36]	@ (800b744 <TL_BLE_SendCmd+0x34>)
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2201      	movs	r2, #1
 800b724:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800b726:	4b07      	ldr	r3, [pc, #28]	@ (800b744 <TL_BLE_SendCmd+0x34>)
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4619      	mov	r1, r3
 800b72e:	2001      	movs	r0, #1
 800b730:	f000 f96c 	bl	800ba0c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800b734:	f002 f9d4 	bl	800dae0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	20030000 	.word	0x20030000

0800b748 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b74e:	e01c      	b.n	800b78a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b750:	1d3b      	adds	r3, r7, #4
 800b752:	4619      	mov	r1, r3
 800b754:	4812      	ldr	r0, [pc, #72]	@ (800b7a0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b756:	f000 fb0e 	bl	800bd76 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	7a5b      	ldrb	r3, [r3, #9]
 800b75e:	2b0f      	cmp	r3, #15
 800b760:	d003      	beq.n	800b76a <HW_IPCC_BLE_RxEvtNot+0x22>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	7a5b      	ldrb	r3, [r3, #9]
 800b766:	2b0e      	cmp	r3, #14
 800b768:	d105      	bne.n	800b776 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4619      	mov	r1, r3
 800b76e:	2002      	movs	r0, #2
 800b770:	f000 f94c 	bl	800ba0c <OutputDbgTrace>
 800b774:	e004      	b.n	800b780 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4619      	mov	r1, r3
 800b77a:	2003      	movs	r0, #3
 800b77c:	f000 f946 	bl	800ba0c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b780:	4b08      	ldr	r3, [pc, #32]	@ (800b7a4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	4610      	mov	r0, r2
 800b788:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b78a:	4805      	ldr	r0, [pc, #20]	@ (800b7a0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b78c:	f000 fa64 	bl	800bc58 <LST_is_empty>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d0dc      	beq.n	800b750 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b796:	bf00      	nop
}
 800b798:	3708      	adds	r7, #8
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	200300c8 	.word	0x200300c8
 800b7a4:	20000b90 	.word	0x20000b90

0800b7a8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b7ac:	4b02      	ldr	r3, [pc, #8]	@ (800b7b8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4798      	blx	r3

  return;
 800b7b2:	bf00      	nop
}
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20000b94 	.word	0x20000b94

0800b7bc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b7c8:	480d      	ldr	r0, [pc, #52]	@ (800b800 <TL_SYS_Init+0x44>)
 800b7ca:	f000 fa35 	bl	800bc38 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b804 <TL_SYS_Init+0x48>)
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	689a      	ldr	r2, [r3, #8]
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	4a08      	ldr	r2, [pc, #32]	@ (800b800 <TL_SYS_Init+0x44>)
 800b7e0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b7e2:	f002 f99f 	bl	800db24 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a07      	ldr	r2, [pc, #28]	@ (800b808 <TL_SYS_Init+0x4c>)
 800b7ec:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	4a06      	ldr	r2, [pc, #24]	@ (800b80c <TL_SYS_Init+0x50>)
 800b7f4:	6013      	str	r3, [r2, #0]

  return 0;
 800b7f6:	2300      	movs	r3, #0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3710      	adds	r7, #16
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	200300d0 	.word	0x200300d0
 800b804:	20030000 	.word	0x20030000
 800b808:	20000b98 	.word	0x20000b98
 800b80c:	20000b9c 	.word	0x20000b9c

0800b810 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b81c:	4b09      	ldr	r3, [pc, #36]	@ (800b844 <TL_SYS_SendCmd+0x34>)
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2210      	movs	r2, #16
 800b824:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b826:	4b07      	ldr	r3, [pc, #28]	@ (800b844 <TL_SYS_SendCmd+0x34>)
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4619      	mov	r1, r3
 800b82e:	2004      	movs	r0, #4
 800b830:	f000 f8ec 	bl	800ba0c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b834:	f002 f980 	bl	800db38 <HW_IPCC_SYS_SendCmd>

  return 0;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3708      	adds	r7, #8
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	20030000 	.word	0x20030000

0800b848 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b84c:	4b07      	ldr	r3, [pc, #28]	@ (800b86c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4619      	mov	r1, r3
 800b854:	2005      	movs	r0, #5
 800b856:	f000 f8d9 	bl	800ba0c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b85a:	4b05      	ldr	r3, [pc, #20]	@ (800b870 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a03      	ldr	r2, [pc, #12]	@ (800b86c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b860:	68d2      	ldr	r2, [r2, #12]
 800b862:	6812      	ldr	r2, [r2, #0]
 800b864:	4610      	mov	r0, r2
 800b866:	4798      	blx	r3

  return;
 800b868:	bf00      	nop
}
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	20030000 	.word	0x20030000
 800b870:	20000b98 	.word	0x20000b98

0800b874 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b87a:	e00e      	b.n	800b89a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b87c:	1d3b      	adds	r3, r7, #4
 800b87e:	4619      	mov	r1, r3
 800b880:	480b      	ldr	r0, [pc, #44]	@ (800b8b0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b882:	f000 fa78 	bl	800bd76 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4619      	mov	r1, r3
 800b88a:	2006      	movs	r0, #6
 800b88c:	f000 f8be 	bl	800ba0c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b890:	4b08      	ldr	r3, [pc, #32]	@ (800b8b4 <HW_IPCC_SYS_EvtNot+0x40>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	4610      	mov	r0, r2
 800b898:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b89a:	4805      	ldr	r0, [pc, #20]	@ (800b8b0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b89c:	f000 f9dc 	bl	800bc58 <LST_is_empty>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d0ea      	beq.n	800b87c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b8a6:	bf00      	nop
}
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	200300d0 	.word	0x200300d0
 800b8b4:	20000b9c 	.word	0x20000b9c

0800b8b8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b8c0:	4817      	ldr	r0, [pc, #92]	@ (800b920 <TL_MM_Init+0x68>)
 800b8c2:	f000 f9b9 	bl	800bc38 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b8c6:	4817      	ldr	r0, [pc, #92]	@ (800b924 <TL_MM_Init+0x6c>)
 800b8c8:	f000 f9b6 	bl	800bc38 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b8cc:	4b16      	ldr	r3, [pc, #88]	@ (800b928 <TL_MM_Init+0x70>)
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	4a16      	ldr	r2, [pc, #88]	@ (800b92c <TL_MM_Init+0x74>)
 800b8d2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b8d4:	4b15      	ldr	r3, [pc, #84]	@ (800b92c <TL_MM_Init+0x74>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	6892      	ldr	r2, [r2, #8]
 800b8dc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b8de:	4b13      	ldr	r3, [pc, #76]	@ (800b92c <TL_MM_Init+0x74>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	68d2      	ldr	r2, [r2, #12]
 800b8e6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b8e8:	4b10      	ldr	r3, [pc, #64]	@ (800b92c <TL_MM_Init+0x74>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a0c      	ldr	r2, [pc, #48]	@ (800b920 <TL_MM_Init+0x68>)
 800b8ee:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b8f0:	4b0e      	ldr	r3, [pc, #56]	@ (800b92c <TL_MM_Init+0x74>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	6812      	ldr	r2, [r2, #0]
 800b8f8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b8fa:	4b0c      	ldr	r3, [pc, #48]	@ (800b92c <TL_MM_Init+0x74>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	6852      	ldr	r2, [r2, #4]
 800b902:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b904:	4b09      	ldr	r3, [pc, #36]	@ (800b92c <TL_MM_Init+0x74>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	6912      	ldr	r2, [r2, #16]
 800b90c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b90e:	4b07      	ldr	r3, [pc, #28]	@ (800b92c <TL_MM_Init+0x74>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	6952      	ldr	r2, [r2, #20]
 800b916:	619a      	str	r2, [r3, #24]

  return;
 800b918:	bf00      	nop
}
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	200300b8 	.word	0x200300b8
 800b924:	20000b88 	.word	0x20000b88
 800b928:	20030000 	.word	0x20030000
 800b92c:	20000ba0 	.word	0x20000ba0

0800b930 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b938:	6879      	ldr	r1, [r7, #4]
 800b93a:	4807      	ldr	r0, [pc, #28]	@ (800b958 <TL_MM_EvtDone+0x28>)
 800b93c:	f000 f9d4 	bl	800bce8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b940:	6879      	ldr	r1, [r7, #4]
 800b942:	2000      	movs	r0, #0
 800b944:	f000 f862 	bl	800ba0c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b948:	4804      	ldr	r0, [pc, #16]	@ (800b95c <TL_MM_EvtDone+0x2c>)
 800b94a:	f002 f91b 	bl	800db84 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b94e:	bf00      	nop
}
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	20000b88 	.word	0x20000b88
 800b95c:	0800b961 	.word	0x0800b961

0800b960 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b966:	e00c      	b.n	800b982 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b968:	1d3b      	adds	r3, r7, #4
 800b96a:	4619      	mov	r1, r3
 800b96c:	480a      	ldr	r0, [pc, #40]	@ (800b998 <SendFreeBuf+0x38>)
 800b96e:	f000 fa02 	bl	800bd76 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b972:	4b0a      	ldr	r3, [pc, #40]	@ (800b99c <SendFreeBuf+0x3c>)
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	691b      	ldr	r3, [r3, #16]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	4611      	mov	r1, r2
 800b97c:	4618      	mov	r0, r3
 800b97e:	f000 f9b3 	bl	800bce8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b982:	4805      	ldr	r0, [pc, #20]	@ (800b998 <SendFreeBuf+0x38>)
 800b984:	f000 f968 	bl	800bc58 <LST_is_empty>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d0ec      	beq.n	800b968 <SendFreeBuf+0x8>
  }

  return;
 800b98e:	bf00      	nop
}
 800b990:	3708      	adds	r7, #8
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	20000b88 	.word	0x20000b88
 800b99c:	20030000 	.word	0x20030000

0800b9a0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b9a4:	4805      	ldr	r0, [pc, #20]	@ (800b9bc <TL_TRACES_Init+0x1c>)
 800b9a6:	f000 f947 	bl	800bc38 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b9aa:	4b05      	ldr	r3, [pc, #20]	@ (800b9c0 <TL_TRACES_Init+0x20>)
 800b9ac:	695b      	ldr	r3, [r3, #20]
 800b9ae:	4a03      	ldr	r2, [pc, #12]	@ (800b9bc <TL_TRACES_Init+0x1c>)
 800b9b0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b9b2:	f002 f91d 	bl	800dbf0 <HW_IPCC_TRACES_Init>

  return;
 800b9b6:	bf00      	nop
}
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	200300c0 	.word	0x200300c0
 800b9c0:	20030000 	.word	0x20030000

0800b9c4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b9ca:	e008      	b.n	800b9de <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b9cc:	1d3b      	adds	r3, r7, #4
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	4808      	ldr	r0, [pc, #32]	@ (800b9f4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b9d2:	f000 f9d0 	bl	800bd76 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f000 f80d 	bl	800b9f8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b9de:	4805      	ldr	r0, [pc, #20]	@ (800b9f4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b9e0:	f000 f93a 	bl	800bc58 <LST_is_empty>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d0f0      	beq.n	800b9cc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b9ea:	bf00      	nop
}
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	200300c0 	.word	0x200300c0

0800b9f8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800ba00:	bf00      	nop
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b087      	sub	sp, #28
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	4603      	mov	r3, r0
 800ba14:	6039      	str	r1, [r7, #0]
 800ba16:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 800ba18:	79fb      	ldrb	r3, [r7, #7]
 800ba1a:	2b06      	cmp	r3, #6
 800ba1c:	d845      	bhi.n	800baaa <OutputDbgTrace+0x9e>
 800ba1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba24 <OutputDbgTrace+0x18>)
 800ba20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba24:	0800ba41 	.word	0x0800ba41
 800ba28:	0800ba65 	.word	0x0800ba65
 800ba2c:	0800ba6b 	.word	0x0800ba6b
 800ba30:	0800ba7f 	.word	0x0800ba7f
 800ba34:	0800ba8b 	.word	0x0800ba8b
 800ba38:	0800ba91 	.word	0x0800ba91
 800ba3c:	0800ba9f 	.word	0x0800ba9f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	7a5b      	ldrb	r3, [r3, #9]
 800ba48:	2bff      	cmp	r3, #255	@ 0xff
 800ba4a:	d005      	beq.n	800ba58 <OutputDbgTrace+0x4c>
 800ba4c:	2bff      	cmp	r3, #255	@ 0xff
 800ba4e:	dc05      	bgt.n	800ba5c <OutputDbgTrace+0x50>
 800ba50:	2b0e      	cmp	r3, #14
 800ba52:	d005      	beq.n	800ba60 <OutputDbgTrace+0x54>
 800ba54:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ba56:	e001      	b.n	800ba5c <OutputDbgTrace+0x50>
          break;
 800ba58:	bf00      	nop
 800ba5a:	e027      	b.n	800baac <OutputDbgTrace+0xa0>
          break;
 800ba5c:	bf00      	nop
 800ba5e:	e025      	b.n	800baac <OutputDbgTrace+0xa0>
          break;
 800ba60:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ba62:	e023      	b.n	800baac <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ba68:	e020      	b.n	800baac <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	7a5b      	ldrb	r3, [r3, #9]
 800ba72:	2b0e      	cmp	r3, #14
 800ba74:	d001      	beq.n	800ba7a <OutputDbgTrace+0x6e>
 800ba76:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ba78:	e000      	b.n	800ba7c <OutputDbgTrace+0x70>
          break;
 800ba7a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ba7c:	e016      	b.n	800baac <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	7a5b      	ldrb	r3, [r3, #9]
 800ba86:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ba88:	e010      	b.n	800baac <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ba8e:	e00d      	b.n	800baac <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	785b      	ldrb	r3, [r3, #1]
 800ba98:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 800ba9a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ba9c:	e006      	b.n	800baac <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	7a5b      	ldrb	r3, [r3, #9]
 800baa6:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800baa8:	e000      	b.n	800baac <OutputDbgTrace+0xa0>

    default:
      break;
 800baaa:	bf00      	nop
  }

  return;
 800baac:	bf00      	nop
}
 800baae:	371c      	adds	r7, #28
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800bac4:	215c      	movs	r1, #92	@ 0x5c
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f003 f97e 	bl	800edc8 <strrchr>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d007      	beq.n	800bae2 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800bad2:	215c      	movs	r1, #92	@ 0x5c
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f003 f977 	bl	800edc8 <strrchr>
 800bada:	4603      	mov	r3, r0
 800badc:	3301      	adds	r3, #1
 800bade:	60fb      	str	r3, [r7, #12]
 800bae0:	e00d      	b.n	800bafe <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800bae2:	212f      	movs	r1, #47	@ 0x2f
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f003 f96f 	bl	800edc8 <strrchr>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d006      	beq.n	800bafe <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800baf0:	212f      	movs	r1, #47	@ 0x2f
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f003 f968 	bl	800edc8 <strrchr>
 800baf8:	4603      	mov	r3, r0
 800bafa:	3301      	adds	r3, #1
 800bafc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800bafe:	68fb      	ldr	r3, [r7, #12]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb0e:	f3ef 8310 	mrs	r3, PRIMASK
 800bb12:	607b      	str	r3, [r7, #4]
  return(result);
 800bb14:	687b      	ldr	r3, [r7, #4]
    DbgTracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }

#else
  BACKUP_PRIMASK();
 800bb16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb18:	b672      	cpsid	i
}
 800bb1a:	bf00      	nop

  DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  DbgTracePeripheralReady = SET;
 800bb1c:	4b07      	ldr	r3, [pc, #28]	@ (800bb3c <DbgTrace_TxCpltCallback+0x34>)
 800bb1e:	2201      	movs	r2, #1
 800bb20:	701a      	strb	r2, [r3, #0]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	f383 8810 	msr	PRIMASK, r3
}
 800bb2c:	bf00      	nop

  RESTORE_PRIMASK();
#endif
}
 800bb2e:	bf00      	nop
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	20000011 	.word	0x20000011

0800bb40 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	68b9      	ldr	r1, [r7, #8]
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 f805 	bl	800bb60 <DbgTraceWrite>
 800bb56:	4603      	mov	r3, r0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b088      	sub	sp, #32
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb70:	f3ef 8310 	mrs	r3, PRIMASK
 800bb74:	617b      	str	r3, [r7, #20]
  return(result);
 800bb76:	697b      	ldr	r3, [r7, #20]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800bb78:	61bb      	str	r3, [r7, #24]

  /* Ignore flushes */
  if ( handle == -1 )
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb80:	d102      	bne.n	800bb88 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800bb82:	2300      	movs	r3, #0
 800bb84:	61fb      	str	r3, [r7, #28]
 800bb86:	e026      	b.n	800bbd6 <DbgTraceWrite+0x76>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d006      	beq.n	800bb9c <DbgTraceWrite+0x3c>
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	d003      	beq.n	800bb9c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800bb94:	f04f 33ff 	mov.w	r3, #4294967295
 800bb98:	61fb      	str	r3, [r7, #28]
 800bb9a:	e01c      	b.n	800bbd6 <DbgTraceWrite+0x76>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d019      	beq.n	800bbd6 <DbgTraceWrite+0x76>
  {
    chars_written = bufSize;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bba6:	b672      	cpsid	i
}
 800bba8:	bf00      	nop
    {
      RESTORE_PRIMASK();
    }
#else
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    DbgTracePeripheralReady = RESET;
 800bbaa:	4b0d      	ldr	r3, [pc, #52]	@ (800bbe0 <DbgTraceWrite+0x80>)
 800bbac:	2200      	movs	r2, #0
 800bbae:	701a      	strb	r2, [r3, #0]
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	f383 8810 	msr	PRIMASK, r3
}
 800bbba:	bf00      	nop
    RESTORE_PRIMASK();

    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	4a08      	ldr	r2, [pc, #32]	@ (800bbe4 <DbgTraceWrite+0x84>)
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	68b8      	ldr	r0, [r7, #8]
 800bbc6:	f7f5 f9bb 	bl	8000f40 <DbgOutputTraces>
    while (!DbgTracePeripheralReady);
 800bbca:	bf00      	nop
 800bbcc:	4b04      	ldr	r3, [pc, #16]	@ (800bbe0 <DbgTraceWrite+0x80>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d0fa      	beq.n	800bbcc <DbgTraceWrite+0x6c>
#endif
    /* CS END */
  }
  return ( chars_written );
 800bbd6:	69fb      	ldr	r3, [r7, #28]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3720      	adds	r7, #32
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	20000011 	.word	0x20000011
 800bbe4:	0800bb09 	.word	0x0800bb09

0800bbe8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	4603      	mov	r3, r0
 800bbf0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800bbf2:	4b0f      	ldr	r3, [pc, #60]	@ (800bc30 <OTP_Read+0x48>)
 800bbf4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800bbf6:	e002      	b.n	800bbfe <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	3b08      	subs	r3, #8
 800bbfc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	3307      	adds	r3, #7
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	79fa      	ldrb	r2, [r7, #7]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d003      	beq.n	800bc12 <OTP_Read+0x2a>
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	4a09      	ldr	r2, [pc, #36]	@ (800bc34 <OTP_Read+0x4c>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d1f2      	bne.n	800bbf8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	3307      	adds	r3, #7
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	79fa      	ldrb	r2, [r7, #7]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d001      	beq.n	800bc22 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800bc22:	68fb      	ldr	r3, [r7, #12]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	1fff73f8 	.word	0x1fff73f8
 800bc34:	1fff7000 	.word	0x1fff7000

0800bc38 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	605a      	str	r2, [r3, #4]
}
 800bc4c:	bf00      	nop
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b087      	sub	sp, #28
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc60:	f3ef 8310 	mrs	r3, PRIMASK
 800bc64:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc66:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bc68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc6a:	b672      	cpsid	i
}
 800bc6c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d102      	bne.n	800bc7e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	75fb      	strb	r3, [r7, #23]
 800bc7c:	e001      	b.n	800bc82 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	75fb      	strb	r3, [r7, #23]
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	f383 8810 	msr	PRIMASK, r3
}
 800bc8c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800bc8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	371c      	adds	r7, #28
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b087      	sub	sp, #28
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bca6:	f3ef 8310 	mrs	r3, PRIMASK
 800bcaa:	60fb      	str	r3, [r7, #12]
  return(result);
 800bcac:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bcae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bcb0:	b672      	cpsid	i
}
 800bcb2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	683a      	ldr	r2, [r7, #0]
 800bcc6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	683a      	ldr	r2, [r7, #0]
 800bcce:	605a      	str	r2, [r3, #4]
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	f383 8810 	msr	PRIMASK, r3
}
 800bcda:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bcdc:	bf00      	nop
 800bcde:	371c      	adds	r7, #28
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b087      	sub	sp, #28
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcf2:	f3ef 8310 	mrs	r3, PRIMASK
 800bcf6:	60fb      	str	r3, [r7, #12]
  return(result);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bcfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bcfc:	b672      	cpsid	i
}
 800bcfe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	685a      	ldr	r2, [r3, #4]
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	683a      	ldr	r2, [r7, #0]
 800bd12:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	601a      	str	r2, [r3, #0]
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	f383 8810 	msr	PRIMASK, r3
}
 800bd26:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bd28:	bf00      	nop
 800bd2a:	371c      	adds	r7, #28
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b087      	sub	sp, #28
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd3c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd40:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd42:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bd44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd46:	b672      	cpsid	i
}
 800bd48:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	6812      	ldr	r2, [r2, #0]
 800bd52:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	6852      	ldr	r2, [r2, #4]
 800bd5c:	605a      	str	r2, [r3, #4]
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	f383 8810 	msr	PRIMASK, r3
}
 800bd68:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bd6a:	bf00      	nop
 800bd6c:	371c      	adds	r7, #28
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr

0800bd76 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b086      	sub	sp, #24
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
 800bd7e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd80:	f3ef 8310 	mrs	r3, PRIMASK
 800bd84:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd86:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bd88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd8a:	b672      	cpsid	i
}
 800bd8c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7ff ffca 	bl	800bd34 <LST_remove_node>
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	f383 8810 	msr	PRIMASK, r3
}
 800bdaa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bdac:	bf00      	nop
 800bdae:	3718      	adds	r7, #24
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800bdb4:	b5b0      	push	{r4, r5, r7, lr}
 800bdb6:	b090      	sub	sp, #64	@ 0x40
 800bdb8:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bdba:	2392      	movs	r3, #146	@ 0x92
 800bdbc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800bdc0:	4b2f      	ldr	r3, [pc, #188]	@ (800be80 <APP_BLE_Init+0xcc>)
 800bdc2:	1d3c      	adds	r4, r7, #4
 800bdc4:	461d      	mov	r5, r3
 800bdc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bdca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bdce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bdd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bdd6:	c403      	stmia	r4!, {r0, r1}
 800bdd8:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800bdda:	f000 fa61 	bl	800c2a0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800bdde:	2101      	movs	r1, #1
 800bde0:	2002      	movs	r0, #2
 800bde2:	f001 ff2d 	bl	800dc40 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800bde6:	4a27      	ldr	r2, [pc, #156]	@ (800be84 <APP_BLE_Init+0xd0>)
 800bde8:	2100      	movs	r1, #0
 800bdea:	2010      	movs	r0, #16
 800bdec:	f002 f854 	bl	800de98 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800bdf0:	1d3b      	adds	r3, r7, #4
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7ff f852 	bl	800ae9c <SHCI_C2_BLE_Init>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800bdfe:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800be02:	2b00      	cmp	r3, #0
 800be04:	d012      	beq.n	800be2c <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800be06:	4820      	ldr	r0, [pc, #128]	@ (800be88 <APP_BLE_Init+0xd4>)
 800be08:	f7ff fe56 	bl	800bab8 <DbgTraceGetFileName>
 800be0c:	4601      	mov	r1, r0
 800be0e:	f44f 739e 	mov.w	r3, #316	@ 0x13c
 800be12:	4a1e      	ldr	r2, [pc, #120]	@ (800be8c <APP_BLE_Init+0xd8>)
 800be14:	481e      	ldr	r0, [pc, #120]	@ (800be90 <APP_BLE_Init+0xdc>)
 800be16:	f002 fe77 	bl	800eb08 <iprintf>
 800be1a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800be1e:	4619      	mov	r1, r3
 800be20:	481c      	ldr	r0, [pc, #112]	@ (800be94 <APP_BLE_Init+0xe0>)
 800be22:	f002 fe71 	bl	800eb08 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800be26:	f7f6 fc27 	bl	8002678 <Error_Handler>
 800be2a:	e00c      	b.n	800be46 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800be2c:	4816      	ldr	r0, [pc, #88]	@ (800be88 <APP_BLE_Init+0xd4>)
 800be2e:	f7ff fe43 	bl	800bab8 <DbgTraceGetFileName>
 800be32:	4601      	mov	r1, r0
 800be34:	f44f 73a1 	mov.w	r3, #322	@ 0x142
 800be38:	4a14      	ldr	r2, [pc, #80]	@ (800be8c <APP_BLE_Init+0xd8>)
 800be3a:	4815      	ldr	r0, [pc, #84]	@ (800be90 <APP_BLE_Init+0xdc>)
 800be3c:	f002 fe64 	bl	800eb08 <iprintf>
 800be40:	4815      	ldr	r0, [pc, #84]	@ (800be98 <APP_BLE_Init+0xe4>)
 800be42:	f002 fe61 	bl	800eb08 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800be46:	f000 fa41 	bl	800c2cc <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800be4a:	f7fe ff5f 	bl	800ad0c <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 800be4e:	4a13      	ldr	r2, [pc, #76]	@ (800be9c <APP_BLE_Init+0xe8>)
 800be50:	2100      	movs	r1, #0
 800be52:	2001      	movs	r0, #1
 800be54:	f002 f820 	bl	800de98 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 800be58:	4a11      	ldr	r2, [pc, #68]	@ (800bea0 <APP_BLE_Init+0xec>)
 800be5a:	2100      	movs	r1, #0
 800be5c:	2002      	movs	r0, #2
 800be5e:	f002 f81b 	bl	800de98 <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800be62:	4b10      	ldr	r3, [pc, #64]	@ (800bea4 <APP_BLE_Init+0xf0>)
 800be64:	2200      	movs	r2, #0
 800be66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  APP_DBG_MSG("\n");
#endif
  /**
   * Initialize P2P Client Application
   */
  P2PC_APP_Init();
 800be6a:	f000 fdd9 	bl	800ca20 <P2PC_APP_Init>

#if (OOB_DEMO == 0)
  /**
   * Start scanning
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 800be6e:	2100      	movs	r1, #0
 800be70:	2001      	movs	r0, #1
 800be72:	f002 f833 	bl	800dedc <UTIL_SEQ_SetTask>
#endif
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */
  return;
 800be76:	bf00      	nop
}
 800be78:	3740      	adds	r7, #64	@ 0x40
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bdb0      	pop	{r4, r5, r7, pc}
 800be7e:	bf00      	nop
 800be80:	08010f84 	.word	0x08010f84
 800be84:	0800b0b9 	.word	0x0800b0b9
 800be88:	08010ef4 	.word	0x08010ef4
 800be8c:	08011dc0 	.word	0x08011dc0
 800be90:	08010f10 	.word	0x08010f10
 800be94:	08010f24 	.word	0x08010f24
 800be98:	08010f5c 	.word	0x08010f5c
 800be9c:	0800c765 	.word	0x0800c765
 800bea0:	0800c7e9 	.word	0x0800c7e9
 800bea4:	20000bf4 	.word	0x20000bf4

0800bea8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *pckt)
{
 800bea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beaa:	b0a1      	sub	sp, #132	@ 0x84
 800beac:	af06      	add	r7, sp, #24
 800beae:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blecore_aci *blecore_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	3301      	adds	r3, #1
 800beb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 800beb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800beb8:	3302      	adds	r3, #2
 800beba:	65bb      	str	r3, [r7, #88]	@ 0x58
  uint8_t result;
  uint8_t event_type, event_data_size;
  int k = 0;
 800bebc:	2300      	movs	r3, #0
 800bebe:	667b      	str	r3, [r7, #100]	@ 0x64
  uint8_t adtype, adlength;

  uint8_t SERVER_REMOTE_ADDR_TYPE;


  switch (event_pckt->evt)
 800bec0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	2bff      	cmp	r3, #255	@ 0xff
 800bec6:	d007      	beq.n	800bed8 <SVCCTL_App_Notification+0x30>
 800bec8:	2bff      	cmp	r3, #255	@ 0xff
 800beca:	f300 81b8 	bgt.w	800c23e <SVCCTL_App_Notification+0x396>
 800bece:	2b05      	cmp	r3, #5
 800bed0:	d039      	beq.n	800bf46 <SVCCTL_App_Notification+0x9e>
 800bed2:	2b3e      	cmp	r3, #62	@ 0x3e
 800bed4:	d05f      	beq.n	800bf96 <SVCCTL_App_Notification+0xee>

    default:
      /* USER CODE BEGIN evt_default */

      /* USER CODE END evt_default */
      break;
 800bed6:	e1b2      	b.n	800c23e <SVCCTL_App_Notification+0x396>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800bed8:	4b76      	ldr	r3, [pc, #472]	@ (800c0b4 <SVCCTL_App_Notification+0x20c>)
 800beda:	2201      	movs	r2, #1
 800bedc:	701a      	strb	r2, [r3, #0]
        blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800bede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bee0:	3302      	adds	r3, #2
 800bee2:	657b      	str	r3, [r7, #84]	@ 0x54
        switch (blecore_evt->ecode)
 800bee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bee6:	881b      	ldrh	r3, [r3, #0]
 800bee8:	b29b      	uxth	r3, r3
 800beea:	461a      	mov	r2, r3
 800beec:	f240 4307 	movw	r3, #1031	@ 0x407
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d124      	bne.n	800bf3e <SVCCTL_App_Notification+0x96>
              aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blecore_evt->data;
 800bef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bef6:	3302      	adds	r3, #2
 800bef8:	653b      	str	r3, [r7, #80]	@ 0x50
              if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 800befa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	2b02      	cmp	r3, #2
 800bf00:	d11f      	bne.n	800bf42 <SVCCTL_App_Notification+0x9a>
                  && gap_evt_proc_complete->Status == 0x00)
 800bf02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf04:	785b      	ldrb	r3, [r3, #1]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d11b      	bne.n	800bf42 <SVCCTL_App_Notification+0x9a>
                APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE_COMPLETED: %d\n\r", num_sensors_found);
 800bf0a:	486b      	ldr	r0, [pc, #428]	@ (800c0b8 <SVCCTL_App_Notification+0x210>)
 800bf0c:	f7ff fdd4 	bl	800bab8 <DbgTraceGetFileName>
 800bf10:	4601      	mov	r1, r0
 800bf12:	f240 13af 	movw	r3, #431	@ 0x1af
 800bf16:	4a69      	ldr	r2, [pc, #420]	@ (800c0bc <SVCCTL_App_Notification+0x214>)
 800bf18:	4869      	ldr	r0, [pc, #420]	@ (800c0c0 <SVCCTL_App_Notification+0x218>)
 800bf1a:	f002 fdf5 	bl	800eb08 <iprintf>
 800bf1e:	4b69      	ldr	r3, [pc, #420]	@ (800c0c4 <SVCCTL_App_Notification+0x21c>)
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	4619      	mov	r1, r3
 800bf24:	4868      	ldr	r0, [pc, #416]	@ (800c0c8 <SVCCTL_App_Notification+0x220>)
 800bf26:	f002 fdef 	bl	800eb08 <iprintf>
                if (num_sensors_found > 0)
 800bf2a:	4b66      	ldr	r3, [pc, #408]	@ (800c0c4 <SVCCTL_App_Notification+0x21c>)
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d007      	beq.n	800bf42 <SVCCTL_App_Notification+0x9a>
					current_connection_index = 0;
 800bf32:	4b66      	ldr	r3, [pc, #408]	@ (800c0cc <SVCCTL_App_Notification+0x224>)
 800bf34:	2200      	movs	r2, #0
 800bf36:	701a      	strb	r2, [r3, #0]
					Connect_To_Next_Sensor();
 800bf38:	f000 fd26 	bl	800c988 <Connect_To_Next_Sensor>
            break;
 800bf3c:	e001      	b.n	800bf42 <SVCCTL_App_Notification+0x9a>
            break;
 800bf3e:	bf00      	nop
 800bf40:	e182      	b.n	800c248 <SVCCTL_App_Notification+0x3a0>
            break;
 800bf42:	bf00      	nop
      break;
 800bf44:	e180      	b.n	800c248 <SVCCTL_App_Notification+0x3a0>
        if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800bf46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf48:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	4b60      	ldr	r3, [pc, #384]	@ (800c0d0 <SVCCTL_App_Notification+0x228>)
 800bf50:	8adb      	ldrh	r3, [r3, #22]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	f040 8175 	bne.w	800c242 <SVCCTL_App_Notification+0x39a>
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800bf58:	4b5d      	ldr	r3, [pc, #372]	@ (800c0d0 <SVCCTL_App_Notification+0x228>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	82da      	strh	r2, [r3, #22]
          BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bf5e:	4b5c      	ldr	r3, [pc, #368]	@ (800c0d0 <SVCCTL_App_Notification+0x228>)
 800bf60:	2200      	movs	r2, #0
 800bf62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH SERVER \n\r");
 800bf66:	4854      	ldr	r0, [pc, #336]	@ (800c0b8 <SVCCTL_App_Notification+0x210>)
 800bf68:	f7ff fda6 	bl	800bab8 <DbgTraceGetFileName>
 800bf6c:	4601      	mov	r1, r0
 800bf6e:	f240 13cf 	movw	r3, #463	@ 0x1cf
 800bf72:	4a52      	ldr	r2, [pc, #328]	@ (800c0bc <SVCCTL_App_Notification+0x214>)
 800bf74:	4852      	ldr	r0, [pc, #328]	@ (800c0c0 <SVCCTL_App_Notification+0x218>)
 800bf76:	f002 fdc7 	bl	800eb08 <iprintf>
 800bf7a:	4856      	ldr	r0, [pc, #344]	@ (800c0d4 <SVCCTL_App_Notification+0x22c>)
 800bf7c:	f002 fdc4 	bl	800eb08 <iprintf>
          handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800bf80:	4b4c      	ldr	r3, [pc, #304]	@ (800c0b4 <SVCCTL_App_Notification+0x20c>)
 800bf82:	2201      	movs	r2, #1
 800bf84:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800bf86:	4b52      	ldr	r3, [pc, #328]	@ (800c0d0 <SVCCTL_App_Notification+0x228>)
 800bf88:	8ada      	ldrh	r2, [r3, #22]
 800bf8a:	4b4a      	ldr	r3, [pc, #296]	@ (800c0b4 <SVCCTL_App_Notification+0x20c>)
 800bf8c:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 800bf8e:	4849      	ldr	r0, [pc, #292]	@ (800c0b4 <SVCCTL_App_Notification+0x20c>)
 800bf90:	f000 fd7c 	bl	800ca8c <P2PC_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800bf94:	e155      	b.n	800c242 <SVCCTL_App_Notification+0x39a>
        meta_evt = (evt_le_meta_event*) event_pckt->data;
 800bf96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf98:	3302      	adds	r3, #2
 800bf9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        switch (meta_evt->subevent)
 800bf9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d002      	beq.n	800bfaa <SVCCTL_App_Notification+0x102>
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d05f      	beq.n	800c068 <SVCCTL_App_Notification+0x1c0>
            break;
 800bfa8:	e148      	b.n	800c23c <SVCCTL_App_Notification+0x394>
        	connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800bfaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfac:	3301      	adds	r3, #1
 800bfae:	633b      	str	r3, [r7, #48]	@ 0x30
			if (connection_complete_event->Status != 0x00) break;
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f040 813e 	bne.w	800c236 <SVCCTL_App_Notification+0x38e>
			APP_DBG_MSG("Connected to device %d\r\n", current_connection_index + 1);
 800bfba:	483f      	ldr	r0, [pc, #252]	@ (800c0b8 <SVCCTL_App_Notification+0x210>)
 800bfbc:	f7ff fd7c 	bl	800bab8 <DbgTraceGetFileName>
 800bfc0:	4601      	mov	r1, r0
 800bfc2:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 800bfc6:	4a3d      	ldr	r2, [pc, #244]	@ (800c0bc <SVCCTL_App_Notification+0x214>)
 800bfc8:	483d      	ldr	r0, [pc, #244]	@ (800c0c0 <SVCCTL_App_Notification+0x218>)
 800bfca:	f002 fd9d 	bl	800eb08 <iprintf>
 800bfce:	4b3f      	ldr	r3, [pc, #252]	@ (800c0cc <SVCCTL_App_Notification+0x224>)
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	4840      	ldr	r0, [pc, #256]	@ (800c0d8 <SVCCTL_App_Notification+0x230>)
 800bfd8:	f002 fd96 	bl	800eb08 <iprintf>
			SensorDevices[current_connection_index].connected = 1;
 800bfdc:	4b3b      	ldr	r3, [pc, #236]	@ (800c0cc <SVCCTL_App_Notification+0x224>)
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	4a3e      	ldr	r2, [pc, #248]	@ (800c0dc <SVCCTL_App_Notification+0x234>)
 800bfe2:	00db      	lsls	r3, r3, #3
 800bfe4:	4413      	add	r3, r2
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	71da      	strb	r2, [r3, #7]
			current_connection_index++;
 800bfea:	4b38      	ldr	r3, [pc, #224]	@ (800c0cc <SVCCTL_App_Notification+0x224>)
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	3301      	adds	r3, #1
 800bff0:	b2da      	uxtb	r2, r3
 800bff2:	4b36      	ldr	r3, [pc, #216]	@ (800c0cc <SVCCTL_App_Notification+0x224>)
 800bff4:	701a      	strb	r2, [r3, #0]
			if (current_connection_index < num_sensors_found) Connect_To_Next_Sensor();
 800bff6:	4b35      	ldr	r3, [pc, #212]	@ (800c0cc <SVCCTL_App_Notification+0x224>)
 800bff8:	781a      	ldrb	r2, [r3, #0]
 800bffa:	4b32      	ldr	r3, [pc, #200]	@ (800c0c4 <SVCCTL_App_Notification+0x21c>)
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d201      	bcs.n	800c006 <SVCCTL_App_Notification+0x15e>
 800c002:	f000 fcc1 	bl	800c988 <Connect_To_Next_Sensor>
			BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800c006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c008:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	4b30      	ldr	r3, [pc, #192]	@ (800c0d0 <SVCCTL_App_Notification+0x228>)
 800c010:	82da      	strh	r2, [r3, #22]
			APP_DBG_MSG("Set connection handle: 0x%04X\n\r", BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800c012:	4829      	ldr	r0, [pc, #164]	@ (800c0b8 <SVCCTL_App_Notification+0x210>)
 800c014:	f7ff fd50 	bl	800bab8 <DbgTraceGetFileName>
 800c018:	4601      	mov	r1, r0
 800c01a:	f240 13ef 	movw	r3, #495	@ 0x1ef
 800c01e:	4a27      	ldr	r2, [pc, #156]	@ (800c0bc <SVCCTL_App_Notification+0x214>)
 800c020:	4827      	ldr	r0, [pc, #156]	@ (800c0c0 <SVCCTL_App_Notification+0x218>)
 800c022:	f002 fd71 	bl	800eb08 <iprintf>
 800c026:	4b2a      	ldr	r3, [pc, #168]	@ (800c0d0 <SVCCTL_App_Notification+0x228>)
 800c028:	8adb      	ldrh	r3, [r3, #22]
 800c02a:	4619      	mov	r1, r3
 800c02c:	482c      	ldr	r0, [pc, #176]	@ (800c0e0 <SVCCTL_App_Notification+0x238>)
 800c02e:	f002 fd6b 	bl	800eb08 <iprintf>
            result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800c032:	4b27      	ldr	r3, [pc, #156]	@ (800c0d0 <SVCCTL_App_Notification+0x228>)
 800c034:	8adb      	ldrh	r3, [r3, #22]
 800c036:	4618      	mov	r0, r3
 800c038:	f7fe fac1 	bl	800a5be <aci_gatt_disc_all_primary_services>
 800c03c:	4603      	mov	r3, r0
 800c03e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (result != BLE_STATUS_SUCCESS) APP_DBG_MSG("aci_gatt_disc_all_primary_services Failed \r\n\r");
 800c042:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c046:	2b00      	cmp	r3, #0
 800c048:	f000 80f7 	beq.w	800c23a <SVCCTL_App_Notification+0x392>
 800c04c:	481a      	ldr	r0, [pc, #104]	@ (800c0b8 <SVCCTL_App_Notification+0x210>)
 800c04e:	f7ff fd33 	bl	800bab8 <DbgTraceGetFileName>
 800c052:	4601      	mov	r1, r0
 800c054:	f44f 73f9 	mov.w	r3, #498	@ 0x1f2
 800c058:	4a18      	ldr	r2, [pc, #96]	@ (800c0bc <SVCCTL_App_Notification+0x214>)
 800c05a:	4819      	ldr	r0, [pc, #100]	@ (800c0c0 <SVCCTL_App_Notification+0x218>)
 800c05c:	f002 fd54 	bl	800eb08 <iprintf>
 800c060:	4820      	ldr	r0, [pc, #128]	@ (800c0e4 <SVCCTL_App_Notification+0x23c>)
 800c062:	f002 fd51 	bl	800eb08 <iprintf>
            break;
 800c066:	e0e8      	b.n	800c23a <SVCCTL_App_Notification+0x392>
            	le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800c068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c06a:	3301      	adds	r3, #1
 800c06c:	64bb      	str	r3, [r7, #72]	@ 0x48
            	event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 800c06e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c070:	785b      	ldrb	r3, [r3, #1]
 800c072:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            	event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 800c076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c078:	7a5b      	ldrb	r3, [r3, #9]
 800c07a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
            	adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 800c07e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c080:	3309      	adds	r3, #9
 800c082:	3301      	adds	r3, #1
 800c084:	643b      	str	r3, [r7, #64]	@ 0x40
                uint8_t addr_type = le_advertising_event->Advertising_Report[0].Address_Type;
 800c086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c088:	789b      	ldrb	r3, [r3, #2]
 800c08a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                uint8_t *addr = le_advertising_event->Advertising_Report[0].Address;
 800c08e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c090:	3303      	adds	r3, #3
 800c092:	63bb      	str	r3, [r7, #56]	@ 0x38
				if (is_duplicate_devices(addr) || num_sensors_found == MAX_DEVICES) break;
 800c094:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c096:	f000 fc4f 	bl	800c938 <is_duplicate_devices>
 800c09a:	4603      	mov	r3, r0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	f040 80d2 	bne.w	800c246 <SVCCTL_App_Notification+0x39e>
 800c0a2:	4b08      	ldr	r3, [pc, #32]	@ (800c0c4 <SVCCTL_App_Notification+0x21c>)
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	2b08      	cmp	r3, #8
 800c0a8:	f000 80cd 	beq.w	800c246 <SVCCTL_App_Notification+0x39e>
            	k = 0;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	667b      	str	r3, [r7, #100]	@ 0x64
				while(k < event_data_size)
 800c0b0:	e0ba      	b.n	800c228 <SVCCTL_App_Notification+0x380>
 800c0b2:	bf00      	nop
 800c0b4:	20000bf0 	.word	0x20000bf0
 800c0b8:	08010ef4 	.word	0x08010ef4
 800c0bc:	08011dd0 	.word	0x08011dd0
 800c0c0:	08010f10 	.word	0x08010f10
 800c0c4:	20000be4 	.word	0x20000be4
 800c0c8:	08010fc0 	.word	0x08010fc0
 800c0cc:	20000be5 	.word	0x20000be5
 800c0d0:	20000bf4 	.word	0x20000bf4
 800c0d4:	08010ff4 	.word	0x08010ff4
 800c0d8:	08011020 	.word	0x08011020
 800c0dc:	20000ba4 	.word	0x20000ba4
 800c0e0:	0801103c 	.word	0x0801103c
 800c0e4:	0801105c 	.word	0x0801105c
				  adlength = adv_report_data[k];
 800c0e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c0ec:	4413      	add	r3, r2
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				  adtype = adv_report_data[k + 1];
 800c0f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c0fa:	4413      	add	r3, r2
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
				  switch (adtype)
 800c102:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c106:	3b08      	subs	r3, #8
 800c108:	2b01      	cmp	r3, #1
 800c10a:	f200 8084 	bhi.w	800c216 <SVCCTL_App_Notification+0x36e>
						  char local_name[32] = {0}; // 最大31バイト (BLEの制約)
 800c10e:	2300      	movs	r3, #0
 800c110:	60fb      	str	r3, [r7, #12]
 800c112:	f107 0310 	add.w	r3, r7, #16
 800c116:	2200      	movs	r2, #0
 800c118:	601a      	str	r2, [r3, #0]
 800c11a:	605a      	str	r2, [r3, #4]
 800c11c:	609a      	str	r2, [r3, #8]
 800c11e:	60da      	str	r2, [r3, #12]
 800c120:	611a      	str	r2, [r3, #16]
 800c122:	615a      	str	r2, [r3, #20]
 800c124:	619a      	str	r2, [r3, #24]
						  uint8_t name_length = adlength - 1; // AD Typeの1バイトを除く
 800c126:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c12a:	3b01      	subs	r3, #1
 800c12c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
						  if (name_length > sizeof(local_name) - 1)
 800c130:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800c134:	2b1f      	cmp	r3, #31
 800c136:	d902      	bls.n	800c13e <SVCCTL_App_Notification+0x296>
							 name_length = sizeof(local_name) - 1; // バッファオーバーフロー防止
 800c138:	231f      	movs	r3, #31
 800c13a:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
						 memcpy(local_name, &adv_report_data[k + 2], name_length); // ADデータをコピー
 800c13e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c140:	3302      	adds	r3, #2
 800c142:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c144:	18d1      	adds	r1, r2, r3
 800c146:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 800c14a:	f107 030c 	add.w	r3, r7, #12
 800c14e:	4618      	mov	r0, r3
 800c150:	f002 fec7 	bl	800eee2 <memcpy>
						 local_name[name_length] = '\0'; // NULL終端
 800c154:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800c158:	3368      	adds	r3, #104	@ 0x68
 800c15a:	443b      	add	r3, r7
 800c15c:	2200      	movs	r2, #0
 800c15e:	f803 2c5c 	strb.w	r2, [r3, #-92]
						 if (strcmp(local_name, "ASSIOMA46734L") != 0) break;
 800c162:	f107 030c 	add.w	r3, r7, #12
 800c166:	493b      	ldr	r1, [pc, #236]	@ (800c254 <SVCCTL_App_Notification+0x3ac>)
 800c168:	4618      	mov	r0, r3
 800c16a:	f7f4 f809 	bl	8000180 <strcmp>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d152      	bne.n	800c21a <SVCCTL_App_Notification+0x372>
						 SensorDevices[num_sensors_found].addr_type = addr_type;
 800c174:	4b38      	ldr	r3, [pc, #224]	@ (800c258 <SVCCTL_App_Notification+0x3b0>)
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	4619      	mov	r1, r3
 800c17a:	4a38      	ldr	r2, [pc, #224]	@ (800c25c <SVCCTL_App_Notification+0x3b4>)
 800c17c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c180:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
						 memcpy(SensorDevices[num_sensors_found].bd_addr, addr, 6);
 800c184:	4b34      	ldr	r3, [pc, #208]	@ (800c258 <SVCCTL_App_Notification+0x3b0>)
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	00db      	lsls	r3, r3, #3
 800c18a:	4a34      	ldr	r2, [pc, #208]	@ (800c25c <SVCCTL_App_Notification+0x3b4>)
 800c18c:	4413      	add	r3, r2
 800c18e:	3301      	adds	r3, #1
 800c190:	2206      	movs	r2, #6
 800c192:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c194:	4618      	mov	r0, r3
 800c196:	f002 fea4 	bl	800eee2 <memcpy>
						 SensorDevices[num_sensors_found].connected = 0;
 800c19a:	4b2f      	ldr	r3, [pc, #188]	@ (800c258 <SVCCTL_App_Notification+0x3b0>)
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	4a2f      	ldr	r2, [pc, #188]	@ (800c25c <SVCCTL_App_Notification+0x3b4>)
 800c1a0:	00db      	lsls	r3, r3, #3
 800c1a2:	4413      	add	r3, r2
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	71da      	strb	r2, [r3, #7]
						 APP_DBG_MSG("New device %d found: Addr = %02X:%02X:%02X:%02X:%02X:%02X Name=%s\r\n", num_sensors_found + 1, addr[5], addr[4], addr[3], addr[2], addr[1], addr[0], local_name);
 800c1a8:	482d      	ldr	r0, [pc, #180]	@ (800c260 <SVCCTL_App_Notification+0x3b8>)
 800c1aa:	f7ff fc85 	bl	800bab8 <DbgTraceGetFileName>
 800c1ae:	4601      	mov	r1, r0
 800c1b0:	f240 2321 	movw	r3, #545	@ 0x221
 800c1b4:	4a2b      	ldr	r2, [pc, #172]	@ (800c264 <SVCCTL_App_Notification+0x3bc>)
 800c1b6:	482c      	ldr	r0, [pc, #176]	@ (800c268 <SVCCTL_App_Notification+0x3c0>)
 800c1b8:	f002 fca6 	bl	800eb08 <iprintf>
 800c1bc:	4b26      	ldr	r3, [pc, #152]	@ (800c258 <SVCCTL_App_Notification+0x3b0>)
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	1c59      	adds	r1, r3, #1
 800c1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c4:	3305      	adds	r3, #5
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	461e      	mov	r6, r3
 800c1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1cc:	3304      	adds	r3, #4
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	469c      	mov	ip, r3
 800c1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d4:	3303      	adds	r3, #3
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	461a      	mov	r2, r3
 800c1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1dc:	3302      	adds	r3, #2
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	461c      	mov	r4, r3
 800c1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	461d      	mov	r5, r3
 800c1f0:	f107 030c 	add.w	r3, r7, #12
 800c1f4:	9304      	str	r3, [sp, #16]
 800c1f6:	9503      	str	r5, [sp, #12]
 800c1f8:	9402      	str	r4, [sp, #8]
 800c1fa:	9001      	str	r0, [sp, #4]
 800c1fc:	9200      	str	r2, [sp, #0]
 800c1fe:	4663      	mov	r3, ip
 800c200:	4632      	mov	r2, r6
 800c202:	481a      	ldr	r0, [pc, #104]	@ (800c26c <SVCCTL_App_Notification+0x3c4>)
 800c204:	f002 fc80 	bl	800eb08 <iprintf>
						 num_sensors_found++;
 800c208:	4b13      	ldr	r3, [pc, #76]	@ (800c258 <SVCCTL_App_Notification+0x3b0>)
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	3301      	adds	r3, #1
 800c20e:	b2da      	uxtb	r2, r3
 800c210:	4b11      	ldr	r3, [pc, #68]	@ (800c258 <SVCCTL_App_Notification+0x3b0>)
 800c212:	701a      	strb	r2, [r3, #0]
						 break;
 800c214:	e002      	b.n	800c21c <SVCCTL_App_Notification+0x374>
						  break;
 800c216:	bf00      	nop
 800c218:	e000      	b.n	800c21c <SVCCTL_App_Notification+0x374>
						 if (strcmp(local_name, "ASSIOMA46734L") != 0) break;
 800c21a:	bf00      	nop
				  k += adlength + 1;
 800c21c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c220:	3301      	adds	r3, #1
 800c222:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c224:	4413      	add	r3, r2
 800c226:	667b      	str	r3, [r7, #100]	@ 0x64
				while(k < event_data_size)
 800c228:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c22c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c22e:	429a      	cmp	r2, r3
 800c230:	f6ff af5a 	blt.w	800c0e8 <SVCCTL_App_Notification+0x240>
            break;
 800c234:	e002      	b.n	800c23c <SVCCTL_App_Notification+0x394>
			if (connection_complete_event->Status != 0x00) break;
 800c236:	bf00      	nop
 800c238:	e005      	b.n	800c246 <SVCCTL_App_Notification+0x39e>
            break;
 800c23a:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800c23c:	e003      	b.n	800c246 <SVCCTL_App_Notification+0x39e>
      break;
 800c23e:	bf00      	nop
 800c240:	e002      	b.n	800c248 <SVCCTL_App_Notification+0x3a0>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800c242:	bf00      	nop
 800c244:	e000      	b.n	800c248 <SVCCTL_App_Notification+0x3a0>
      break; /* HCI_LE_META_EVT_CODE */
 800c246:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800c248:	2301      	movs	r3, #1
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	376c      	adds	r7, #108	@ 0x6c
 800c24e:	46bd      	mov	sp, r7
 800c250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c252:	bf00      	nop
 800c254:	0801108c 	.word	0x0801108c
 800c258:	20000be4 	.word	0x20000be4
 800c25c:	20000ba4 	.word	0x20000ba4
 800c260:	08010ef4 	.word	0x08010ef4
 800c264:	08011dd0 	.word	0x08011dd0
 800c268:	08010f10 	.word	0x08010f10
 800c26c:	0801109c 	.word	0x0801109c

0800c270 <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status(uint16_t Connection_Handle)
{
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	4603      	mov	r3, r0
 800c278:	80fb      	strh	r3, [r7, #6]
  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 800c27a:	4b08      	ldr	r3, [pc, #32]	@ (800c29c <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800c27c:	8adb      	ldrh	r3, [r3, #22]
 800c27e:	88fa      	ldrh	r2, [r7, #6]
 800c280:	429a      	cmp	r2, r3
 800c282:	d103      	bne.n	800c28c <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 800c284:	4b05      	ldr	r3, [pc, #20]	@ (800c29c <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800c286:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c28a:	e000      	b.n	800c28e <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	370c      	adds	r7, #12
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr
 800c29a:	bf00      	nop
 800c29c:	20000bf4 	.word	0x20000bf4

0800c2a0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800c2a6:	4b06      	ldr	r3, [pc, #24]	@ (800c2c0 <Ble_Tl_Init+0x20>)
 800c2a8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800c2aa:	4b06      	ldr	r3, [pc, #24]	@ (800c2c4 <Ble_Tl_Init+0x24>)
 800c2ac:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800c2ae:	463b      	mov	r3, r7
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	4805      	ldr	r0, [pc, #20]	@ (800c2c8 <Ble_Tl_Init+0x28>)
 800c2b4:	f7fe fee4 	bl	800b080 <hci_init>

  return;
 800c2b8:	bf00      	nop
}
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	200300d8 	.word	0x200300d8
 800c2c4:	0800c901 	.word	0x0800c901
 800c2c8:	0800c8c9 	.word	0x0800c8c9

0800c2cc <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800c2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2ce:	b08d      	sub	sp, #52	@ 0x34
 800c2d0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;

  uint16_t a_appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	813b      	strh	r3, [r7, #8]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c2d6:	2392      	movs	r3, #146	@ 0x92
 800c2d8:	75fb      	strb	r3, [r7, #23]

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800c2da:	48b6      	ldr	r0, [pc, #728]	@ (800c5b4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c2dc:	f7ff fbec 	bl	800bab8 <DbgTraceGetFileName>
 800c2e0:	4601      	mov	r1, r0
 800c2e2:	f240 236e 	movw	r3, #622	@ 0x26e
 800c2e6:	4ab4      	ldr	r2, [pc, #720]	@ (800c5b8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c2e8:	48b4      	ldr	r0, [pc, #720]	@ (800c5bc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c2ea:	f002 fc0d 	bl	800eb08 <iprintf>
 800c2ee:	48b4      	ldr	r0, [pc, #720]	@ (800c5c0 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800c2f0:	f002 fc72 	bl	800ebd8 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800c2f4:	f7fe fc48 	bl	800ab88 <hci_reset>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c2fc:	7dfb      	ldrb	r3, [r7, #23]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d00f      	beq.n	800c322 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800c302:	48ac      	ldr	r0, [pc, #688]	@ (800c5b4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c304:	f7ff fbd8 	bl	800bab8 <DbgTraceGetFileName>
 800c308:	4601      	mov	r1, r0
 800c30a:	f240 2377 	movw	r3, #631	@ 0x277
 800c30e:	4aaa      	ldr	r2, [pc, #680]	@ (800c5b8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c310:	48aa      	ldr	r0, [pc, #680]	@ (800c5bc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c312:	f002 fbf9 	bl	800eb08 <iprintf>
 800c316:	7dfb      	ldrb	r3, [r7, #23]
 800c318:	4619      	mov	r1, r3
 800c31a:	48aa      	ldr	r0, [pc, #680]	@ (800c5c4 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800c31c:	f002 fbf4 	bl	800eb08 <iprintf>
 800c320:	e00c      	b.n	800c33c <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800c322:	48a4      	ldr	r0, [pc, #656]	@ (800c5b4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c324:	f7ff fbc8 	bl	800bab8 <DbgTraceGetFileName>
 800c328:	4601      	mov	r1, r0
 800c32a:	f240 237b 	movw	r3, #635	@ 0x27b
 800c32e:	4aa2      	ldr	r2, [pc, #648]	@ (800c5b8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c330:	48a2      	ldr	r0, [pc, #648]	@ (800c5bc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c332:	f002 fbe9 	bl	800eb08 <iprintf>
 800c336:	48a4      	ldr	r0, [pc, #656]	@ (800c5c8 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800c338:	f002 fc4e 	bl	800ebd8 <puts>
  }

  uint8_t random_address[6] = {0xC0, 0xFF, 0xEE, 0xAA, 0xBB, 0xCC}; // 任意のランダムアドレス
 800c33c:	4aa3      	ldr	r2, [pc, #652]	@ (800c5cc <Ble_Hci_Gap_Gatt_Init+0x300>)
 800c33e:	463b      	mov	r3, r7
 800c340:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c344:	6018      	str	r0, [r3, #0]
 800c346:	3304      	adds	r3, #4
 800c348:	8019      	strh	r1, [r3, #0]

  ret = aci_hal_write_config_data(CONFIG_DATA_RANDOM_ADDRESS_OFFSET, 6, random_address);
 800c34a:	463b      	mov	r3, r7
 800c34c:	461a      	mov	r2, r3
 800c34e:	2106      	movs	r1, #6
 800c350:	202e      	movs	r0, #46	@ 0x2e
 800c352:	f7fe fb2d 	bl	800a9b0 <aci_hal_write_config_data>
 800c356:	4603      	mov	r3, r0
 800c358:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS) {
 800c35a:	7dfb      	ldrb	r3, [r7, #23]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d00f      	beq.n	800c380 <Ble_Hci_Gap_Gatt_Init+0xb4>
      APP_DBG_MSG("Failed to set random address. Error code: 0x%02X\r\n", ret);
 800c360:	4894      	ldr	r0, [pc, #592]	@ (800c5b4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c362:	f7ff fba9 	bl	800bab8 <DbgTraceGetFileName>
 800c366:	4601      	mov	r1, r0
 800c368:	f240 2382 	movw	r3, #642	@ 0x282
 800c36c:	4a92      	ldr	r2, [pc, #584]	@ (800c5b8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c36e:	4893      	ldr	r0, [pc, #588]	@ (800c5bc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c370:	f002 fbca 	bl	800eb08 <iprintf>
 800c374:	7dfb      	ldrb	r3, [r7, #23]
 800c376:	4619      	mov	r1, r3
 800c378:	4895      	ldr	r0, [pc, #596]	@ (800c5d0 <Ble_Hci_Gap_Gatt_Init+0x304>)
 800c37a:	f002 fbc5 	bl	800eb08 <iprintf>
 800c37e:	e00c      	b.n	800c39a <Ble_Hci_Gap_Gatt_Init+0xce>
  } else {
      APP_DBG_MSG("Random address set successfully.\r\n");
 800c380:	488c      	ldr	r0, [pc, #560]	@ (800c5b4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c382:	f7ff fb99 	bl	800bab8 <DbgTraceGetFileName>
 800c386:	4601      	mov	r1, r0
 800c388:	f44f 7321 	mov.w	r3, #644	@ 0x284
 800c38c:	4a8a      	ldr	r2, [pc, #552]	@ (800c5b8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c38e:	488b      	ldr	r0, [pc, #556]	@ (800c5bc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c390:	f002 fbba 	bl	800eb08 <iprintf>
 800c394:	488f      	ldr	r0, [pc, #572]	@ (800c5d4 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800c396:	f002 fc1f 	bl	800ebd8 <puts>
//   }

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800c39a:	4a8f      	ldr	r2, [pc, #572]	@ (800c5d8 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800c39c:	2110      	movs	r1, #16
 800c39e:	2018      	movs	r0, #24
 800c3a0:	f7fe fb06 	bl	800a9b0 <aci_hal_write_config_data>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00f      	beq.n	800c3ce <Ble_Hci_Gap_Gatt_Init+0x102>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800c3ae:	4881      	ldr	r0, [pc, #516]	@ (800c5b4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c3b0:	f7ff fb82 	bl	800bab8 <DbgTraceGetFileName>
 800c3b4:	4601      	mov	r1, r0
 800c3b6:	f44f 7327 	mov.w	r3, #668	@ 0x29c
 800c3ba:	4a7f      	ldr	r2, [pc, #508]	@ (800c5b8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c3bc:	487f      	ldr	r0, [pc, #508]	@ (800c5bc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c3be:	f002 fba3 	bl	800eb08 <iprintf>
 800c3c2:	7dfb      	ldrb	r3, [r7, #23]
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	4885      	ldr	r0, [pc, #532]	@ (800c5dc <Ble_Hci_Gap_Gatt_Init+0x310>)
 800c3c8:	f002 fb9e 	bl	800eb08 <iprintf>
 800c3cc:	e00c      	b.n	800c3e8 <Ble_Hci_Gap_Gatt_Init+0x11c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800c3ce:	4879      	ldr	r0, [pc, #484]	@ (800c5b4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c3d0:	f7ff fb72 	bl	800bab8 <DbgTraceGetFileName>
 800c3d4:	4601      	mov	r1, r0
 800c3d6:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 800c3da:	4a77      	ldr	r2, [pc, #476]	@ (800c5b8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c3dc:	4877      	ldr	r0, [pc, #476]	@ (800c5bc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c3de:	f002 fb93 	bl	800eb08 <iprintf>
 800c3e2:	487f      	ldr	r0, [pc, #508]	@ (800c5e0 <Ble_Hci_Gap_Gatt_Init+0x314>)
 800c3e4:	f002 fbf8 	bl	800ebd8 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800c3e8:	4a7e      	ldr	r2, [pc, #504]	@ (800c5e4 <Ble_Hci_Gap_Gatt_Init+0x318>)
 800c3ea:	2110      	movs	r1, #16
 800c3ec:	2008      	movs	r0, #8
 800c3ee:	f7fe fadf 	bl	800a9b0 <aci_hal_write_config_data>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c3f6:	7dfb      	ldrb	r3, [r7, #23]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00f      	beq.n	800c41c <Ble_Hci_Gap_Gatt_Init+0x150>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800c3fc:	486d      	ldr	r0, [pc, #436]	@ (800c5b4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c3fe:	f7ff fb5b 	bl	800bab8 <DbgTraceGetFileName>
 800c402:	4601      	mov	r1, r0
 800c404:	f240 23a9 	movw	r3, #681	@ 0x2a9
 800c408:	4a6b      	ldr	r2, [pc, #428]	@ (800c5b8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c40a:	486c      	ldr	r0, [pc, #432]	@ (800c5bc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c40c:	f002 fb7c 	bl	800eb08 <iprintf>
 800c410:	7dfb      	ldrb	r3, [r7, #23]
 800c412:	4619      	mov	r1, r3
 800c414:	4874      	ldr	r0, [pc, #464]	@ (800c5e8 <Ble_Hci_Gap_Gatt_Init+0x31c>)
 800c416:	f002 fb77 	bl	800eb08 <iprintf>
 800c41a:	e00c      	b.n	800c436 <Ble_Hci_Gap_Gatt_Init+0x16a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800c41c:	4865      	ldr	r0, [pc, #404]	@ (800c5b4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c41e:	f7ff fb4b 	bl	800bab8 <DbgTraceGetFileName>
 800c422:	4601      	mov	r1, r0
 800c424:	f240 23ad 	movw	r3, #685	@ 0x2ad
 800c428:	4a63      	ldr	r2, [pc, #396]	@ (800c5b8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c42a:	4864      	ldr	r0, [pc, #400]	@ (800c5bc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c42c:	f002 fb6c 	bl	800eb08 <iprintf>
 800c430:	486e      	ldr	r0, [pc, #440]	@ (800c5ec <Ble_Hci_Gap_Gatt_Init+0x320>)
 800c432:	f002 fbd1 	bl	800ebd8 <puts>
//  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800c436:	2123      	movs	r1, #35	@ 0x23
 800c438:	2001      	movs	r0, #1
 800c43a:	f7fe fb3e 	bl	800aaba <aci_hal_set_tx_power_level>
 800c43e:	4603      	mov	r3, r0
 800c440:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c442:	7dfb      	ldrb	r3, [r7, #23]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00f      	beq.n	800c468 <Ble_Hci_Gap_Gatt_Init+0x19c>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800c448:	485a      	ldr	r0, [pc, #360]	@ (800c5b4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c44a:	f7ff fb35 	bl	800bab8 <DbgTraceGetFileName>
 800c44e:	4601      	mov	r1, r0
 800c450:	f44f 7331 	mov.w	r3, #708	@ 0x2c4
 800c454:	4a58      	ldr	r2, [pc, #352]	@ (800c5b8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c456:	4859      	ldr	r0, [pc, #356]	@ (800c5bc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c458:	f002 fb56 	bl	800eb08 <iprintf>
 800c45c:	7dfb      	ldrb	r3, [r7, #23]
 800c45e:	4619      	mov	r1, r3
 800c460:	4863      	ldr	r0, [pc, #396]	@ (800c5f0 <Ble_Hci_Gap_Gatt_Init+0x324>)
 800c462:	f002 fb51 	bl	800eb08 <iprintf>
 800c466:	e00c      	b.n	800c482 <Ble_Hci_Gap_Gatt_Init+0x1b6>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800c468:	4852      	ldr	r0, [pc, #328]	@ (800c5b4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c46a:	f7ff fb25 	bl	800bab8 <DbgTraceGetFileName>
 800c46e:	4601      	mov	r1, r0
 800c470:	f44f 7332 	mov.w	r3, #712	@ 0x2c8
 800c474:	4a50      	ldr	r2, [pc, #320]	@ (800c5b8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c476:	4851      	ldr	r0, [pc, #324]	@ (800c5bc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c478:	f002 fb46 	bl	800eb08 <iprintf>
 800c47c:	485d      	ldr	r0, [pc, #372]	@ (800c5f4 <Ble_Hci_Gap_Gatt_Init+0x328>)
 800c47e:	f002 fbab 	bl	800ebd8 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800c482:	f7fd ffce 	bl	800a422 <aci_gatt_init>
 800c486:	4603      	mov	r3, r0
 800c488:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c48a:	7dfb      	ldrb	r3, [r7, #23]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00f      	beq.n	800c4b0 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800c490:	4848      	ldr	r0, [pc, #288]	@ (800c5b4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c492:	f7ff fb11 	bl	800bab8 <DbgTraceGetFileName>
 800c496:	4601      	mov	r1, r0
 800c498:	f240 23d1 	movw	r3, #721	@ 0x2d1
 800c49c:	4a46      	ldr	r2, [pc, #280]	@ (800c5b8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c49e:	4847      	ldr	r0, [pc, #284]	@ (800c5bc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c4a0:	f002 fb32 	bl	800eb08 <iprintf>
 800c4a4:	7dfb      	ldrb	r3, [r7, #23]
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	4853      	ldr	r0, [pc, #332]	@ (800c5f8 <Ble_Hci_Gap_Gatt_Init+0x32c>)
 800c4aa:	f002 fb2d 	bl	800eb08 <iprintf>
 800c4ae:	e00c      	b.n	800c4ca <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800c4b0:	4840      	ldr	r0, [pc, #256]	@ (800c5b4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c4b2:	f7ff fb01 	bl	800bab8 <DbgTraceGetFileName>
 800c4b6:	4601      	mov	r1, r0
 800c4b8:	f240 23d5 	movw	r3, #725	@ 0x2d5
 800c4bc:	4a3e      	ldr	r2, [pc, #248]	@ (800c5b8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c4be:	483f      	ldr	r0, [pc, #252]	@ (800c5bc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c4c0:	f002 fb22 	bl	800eb08 <iprintf>
 800c4c4:	484d      	ldr	r0, [pc, #308]	@ (800c5fc <Ble_Hci_Gap_Gatt_Init+0x330>)
 800c4c6:	f002 fb87 	bl	800ebd8 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	75bb      	strb	r3, [r7, #22]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif /* BLE_CFG_PERIPHERAL == 1 */

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 800c4ce:	7dbb      	ldrb	r3, [r7, #22]
 800c4d0:	f043 0304 	orr.w	r3, r3, #4
 800c4d4:	75bb      	strb	r3, [r7, #22]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800c4d6:	7dbb      	ldrb	r3, [r7, #22]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d042      	beq.n	800c562 <Ble_Hci_Gap_Gatt_Init+0x296>
  {
    const char *name = "P2PCLI";
 800c4dc:	4b48      	ldr	r3, [pc, #288]	@ (800c600 <Ble_Hci_Gap_Gatt_Init+0x334>)
 800c4de:	613b      	str	r3, [r7, #16]

    ret = aci_gap_init(role,
 800c4e0:	f107 020e 	add.w	r2, r7, #14
 800c4e4:	7db8      	ldrb	r0, [r7, #22]
 800c4e6:	f107 030a 	add.w	r3, r7, #10
 800c4ea:	9301      	str	r3, [sp, #4]
 800c4ec:	f107 030c 	add.w	r3, r7, #12
 800c4f0:	9300      	str	r3, [sp, #0]
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	2207      	movs	r2, #7
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	f7fd fd53 	bl	8009fa2 <aci_gap_init>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800c500:	7dfb      	ldrb	r3, [r7, #23]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00f      	beq.n	800c526 <Ble_Hci_Gap_Gatt_Init+0x25a>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800c506:	482b      	ldr	r0, [pc, #172]	@ (800c5b4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c508:	f7ff fad6 	bl	800bab8 <DbgTraceGetFileName>
 800c50c:	4601      	mov	r1, r0
 800c50e:	f240 23f6 	movw	r3, #758	@ 0x2f6
 800c512:	4a29      	ldr	r2, [pc, #164]	@ (800c5b8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c514:	4829      	ldr	r0, [pc, #164]	@ (800c5bc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c516:	f002 faf7 	bl	800eb08 <iprintf>
 800c51a:	7dfb      	ldrb	r3, [r7, #23]
 800c51c:	4619      	mov	r1, r3
 800c51e:	4839      	ldr	r0, [pc, #228]	@ (800c604 <Ble_Hci_Gap_Gatt_Init+0x338>)
 800c520:	f002 faf2 	bl	800eb08 <iprintf>
 800c524:	e00c      	b.n	800c540 <Ble_Hci_Gap_Gatt_Init+0x274>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800c526:	4823      	ldr	r0, [pc, #140]	@ (800c5b4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c528:	f7ff fac6 	bl	800bab8 <DbgTraceGetFileName>
 800c52c:	4601      	mov	r1, r0
 800c52e:	f240 23fa 	movw	r3, #762	@ 0x2fa
 800c532:	4a21      	ldr	r2, [pc, #132]	@ (800c5b8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c534:	4821      	ldr	r0, [pc, #132]	@ (800c5bc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c536:	f002 fae7 	bl	800eb08 <iprintf>
 800c53a:	4833      	ldr	r0, [pc, #204]	@ (800c608 <Ble_Hci_Gap_Gatt_Init+0x33c>)
 800c53c:	f002 fb4c 	bl	800ebd8 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800c540:	89fc      	ldrh	r4, [r7, #14]
 800c542:	89bd      	ldrh	r5, [r7, #12]
 800c544:	6938      	ldr	r0, [r7, #16]
 800c546:	f7f3 fe7b 	bl	8000240 <strlen>
 800c54a:	4603      	mov	r3, r0
 800c54c:	b2da      	uxtb	r2, r3
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	4613      	mov	r3, r2
 800c554:	2200      	movs	r2, #0
 800c556:	4629      	mov	r1, r5
 800c558:	4620      	mov	r0, r4
 800c55a:	f7fd ff87 	bl	800a46c <aci_gatt_update_char_value>
 800c55e:	4603      	mov	r3, r0
 800c560:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800c562:	89f8      	ldrh	r0, [r7, #14]
 800c564:	8979      	ldrh	r1, [r7, #10]
 800c566:	f107 0308 	add.w	r3, r7, #8
 800c56a:	9300      	str	r3, [sp, #0]
 800c56c:	2302      	movs	r3, #2
 800c56e:	2200      	movs	r2, #0
 800c570:	f7fd ff7c 	bl	800a46c <aci_gatt_update_char_value>
 800c574:	4603      	mov	r3, r0
 800c576:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800c578:	4b24      	ldr	r3, [pc, #144]	@ (800c60c <Ble_Hci_Gap_Gatt_Init+0x340>)
 800c57a:	2201      	movs	r2, #1
 800c57c:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800c57e:	4b23      	ldr	r3, [pc, #140]	@ (800c60c <Ble_Hci_Gap_Gatt_Init+0x340>)
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	4618      	mov	r0, r3
 800c584:	f7fd fbf5 	bl	8009d72 <aci_gap_set_io_capability>
 800c588:	4603      	mov	r3, r0
 800c58a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c58c:	7dfb      	ldrb	r3, [r7, #23]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d040      	beq.n	800c614 <Ble_Hci_Gap_Gatt_Init+0x348>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800c592:	4808      	ldr	r0, [pc, #32]	@ (800c5b4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c594:	f7ff fa90 	bl	800bab8 <DbgTraceGetFileName>
 800c598:	4601      	mov	r1, r0
 800c59a:	f240 331d 	movw	r3, #797	@ 0x31d
 800c59e:	4a06      	ldr	r2, [pc, #24]	@ (800c5b8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c5a0:	4806      	ldr	r0, [pc, #24]	@ (800c5bc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800c5a2:	f002 fab1 	bl	800eb08 <iprintf>
 800c5a6:	7dfb      	ldrb	r3, [r7, #23]
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	4819      	ldr	r0, [pc, #100]	@ (800c610 <Ble_Hci_Gap_Gatt_Init+0x344>)
 800c5ac:	f002 faac 	bl	800eb08 <iprintf>
 800c5b0:	e03d      	b.n	800c62e <Ble_Hci_Gap_Gatt_Init+0x362>
 800c5b2:	bf00      	nop
 800c5b4:	08010ef4 	.word	0x08010ef4
 800c5b8:	08011de8 	.word	0x08011de8
 800c5bc:	08010f10 	.word	0x08010f10
 800c5c0:	080110e0 	.word	0x080110e0
 800c5c4:	0801110c 	.word	0x0801110c
 800c5c8:	0801113c 	.word	0x0801113c
 800c5cc:	080115a8 	.word	0x080115a8
 800c5d0:	0801115c 	.word	0x0801115c
 800c5d4:	08011190 	.word	0x08011190
 800c5d8:	08011da0 	.word	0x08011da0
 800c5dc:	080111b4 	.word	0x080111b4
 800c5e0:	0801120c 	.word	0x0801120c
 800c5e4:	08011db0 	.word	0x08011db0
 800c5e8:	08011254 	.word	0x08011254
 800c5ec:	080112ac 	.word	0x080112ac
 800c5f0:	080112f4 	.word	0x080112f4
 800c5f4:	08011334 	.word	0x08011334
 800c5f8:	08011364 	.word	0x08011364
 800c5fc:	08011398 	.word	0x08011398
 800c600:	080113bc 	.word	0x080113bc
 800c604:	080113c4 	.word	0x080113c4
 800c608:	080113f4 	.word	0x080113f4
 800c60c:	20000bf4 	.word	0x20000bf4
 800c610:	08011414 	.word	0x08011414
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800c614:	4848      	ldr	r0, [pc, #288]	@ (800c738 <Ble_Hci_Gap_Gatt_Init+0x46c>)
 800c616:	f7ff fa4f 	bl	800bab8 <DbgTraceGetFileName>
 800c61a:	4601      	mov	r1, r0
 800c61c:	f240 3321 	movw	r3, #801	@ 0x321
 800c620:	4a46      	ldr	r2, [pc, #280]	@ (800c73c <Ble_Hci_Gap_Gatt_Init+0x470>)
 800c622:	4847      	ldr	r0, [pc, #284]	@ (800c740 <Ble_Hci_Gap_Gatt_Init+0x474>)
 800c624:	f002 fa70 	bl	800eb08 <iprintf>
 800c628:	4846      	ldr	r0, [pc, #280]	@ (800c744 <Ble_Hci_Gap_Gatt_Init+0x478>)
 800c62a:	f002 fad5 	bl	800ebd8 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800c62e:	4b46      	ldr	r3, [pc, #280]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x47c>)
 800c630:	2201      	movs	r2, #1
 800c632:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800c634:	4b44      	ldr	r3, [pc, #272]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x47c>)
 800c636:	2208      	movs	r2, #8
 800c638:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800c63a:	4b43      	ldr	r3, [pc, #268]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x47c>)
 800c63c:	2210      	movs	r2, #16
 800c63e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800c640:	4b41      	ldr	r3, [pc, #260]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x47c>)
 800c642:	2201      	movs	r2, #1
 800c644:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800c646:	4b40      	ldr	r3, [pc, #256]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x47c>)
 800c648:	4a40      	ldr	r2, [pc, #256]	@ (800c74c <Ble_Hci_Gap_Gatt_Init+0x480>)
 800c64a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800c64c:	4b3e      	ldr	r3, [pc, #248]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x47c>)
 800c64e:	2201      	movs	r2, #1
 800c650:	709a      	strb	r2, [r3, #2]

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800c652:	4b3d      	ldr	r3, [pc, #244]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x47c>)
 800c654:	789c      	ldrb	r4, [r3, #2]
 800c656:	4b3c      	ldr	r3, [pc, #240]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x47c>)
 800c658:	785d      	ldrb	r5, [r3, #1]
 800c65a:	4b3b      	ldr	r3, [pc, #236]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x47c>)
 800c65c:	791b      	ldrb	r3, [r3, #4]
 800c65e:	4a3a      	ldr	r2, [pc, #232]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x47c>)
 800c660:	7952      	ldrb	r2, [r2, #5]
 800c662:	4939      	ldr	r1, [pc, #228]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x47c>)
 800c664:	78c9      	ldrb	r1, [r1, #3]
 800c666:	4838      	ldr	r0, [pc, #224]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x47c>)
 800c668:	6880      	ldr	r0, [r0, #8]
 800c66a:	2601      	movs	r6, #1
 800c66c:	9604      	str	r6, [sp, #16]
 800c66e:	9003      	str	r0, [sp, #12]
 800c670:	9102      	str	r1, [sp, #8]
 800c672:	9201      	str	r2, [sp, #4]
 800c674:	9300      	str	r3, [sp, #0]
 800c676:	2300      	movs	r3, #0
 800c678:	2200      	movs	r2, #0
 800c67a:	4629      	mov	r1, r5
 800c67c:	4620      	mov	r0, r4
 800c67e:	f7fd fbcc 	bl	8009e1a <aci_gap_set_authentication_requirement>
 800c682:	4603      	mov	r3, r0
 800c684:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800c686:	7dfb      	ldrb	r3, [r7, #23]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d00f      	beq.n	800c6ac <Ble_Hci_Gap_Gatt_Init+0x3e0>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800c68c:	482a      	ldr	r0, [pc, #168]	@ (800c738 <Ble_Hci_Gap_Gatt_Init+0x46c>)
 800c68e:	f7ff fa13 	bl	800bab8 <DbgTraceGetFileName>
 800c692:	4601      	mov	r1, r0
 800c694:	f240 3339 	movw	r3, #825	@ 0x339
 800c698:	4a28      	ldr	r2, [pc, #160]	@ (800c73c <Ble_Hci_Gap_Gatt_Init+0x470>)
 800c69a:	4829      	ldr	r0, [pc, #164]	@ (800c740 <Ble_Hci_Gap_Gatt_Init+0x474>)
 800c69c:	f002 fa34 	bl	800eb08 <iprintf>
 800c6a0:	7dfb      	ldrb	r3, [r7, #23]
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	482a      	ldr	r0, [pc, #168]	@ (800c750 <Ble_Hci_Gap_Gatt_Init+0x484>)
 800c6a6:	f002 fa2f 	bl	800eb08 <iprintf>
 800c6aa:	e00c      	b.n	800c6c6 <Ble_Hci_Gap_Gatt_Init+0x3fa>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800c6ac:	4822      	ldr	r0, [pc, #136]	@ (800c738 <Ble_Hci_Gap_Gatt_Init+0x46c>)
 800c6ae:	f7ff fa03 	bl	800bab8 <DbgTraceGetFileName>
 800c6b2:	4601      	mov	r1, r0
 800c6b4:	f240 333d 	movw	r3, #829	@ 0x33d
 800c6b8:	4a20      	ldr	r2, [pc, #128]	@ (800c73c <Ble_Hci_Gap_Gatt_Init+0x470>)
 800c6ba:	4821      	ldr	r0, [pc, #132]	@ (800c740 <Ble_Hci_Gap_Gatt_Init+0x474>)
 800c6bc:	f002 fa24 	bl	800eb08 <iprintf>
 800c6c0:	4824      	ldr	r0, [pc, #144]	@ (800c754 <Ble_Hci_Gap_Gatt_Init+0x488>)
 800c6c2:	f002 fa89 	bl	800ebd8 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800c6c6:	4b20      	ldr	r3, [pc, #128]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x47c>)
 800c6c8:	789b      	ldrb	r3, [r3, #2]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d023      	beq.n	800c716 <Ble_Hci_Gap_Gatt_Init+0x44a>
  {
    ret = aci_gap_configure_whitelist();
 800c6ce:	f7fd fd15 	bl	800a0fc <aci_gap_configure_filter_accept_list>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800c6d6:	7dfb      	ldrb	r3, [r7, #23]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d00f      	beq.n	800c6fc <Ble_Hci_Gap_Gatt_Init+0x430>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800c6dc:	4816      	ldr	r0, [pc, #88]	@ (800c738 <Ble_Hci_Gap_Gatt_Init+0x46c>)
 800c6de:	f7ff f9eb 	bl	800bab8 <DbgTraceGetFileName>
 800c6e2:	4601      	mov	r1, r0
 800c6e4:	f44f 7352 	mov.w	r3, #840	@ 0x348
 800c6e8:	4a14      	ldr	r2, [pc, #80]	@ (800c73c <Ble_Hci_Gap_Gatt_Init+0x470>)
 800c6ea:	4815      	ldr	r0, [pc, #84]	@ (800c740 <Ble_Hci_Gap_Gatt_Init+0x474>)
 800c6ec:	f002 fa0c 	bl	800eb08 <iprintf>
 800c6f0:	7dfb      	ldrb	r3, [r7, #23]
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	4818      	ldr	r0, [pc, #96]	@ (800c758 <Ble_Hci_Gap_Gatt_Init+0x48c>)
 800c6f6:	f002 fa07 	bl	800eb08 <iprintf>
 800c6fa:	e00c      	b.n	800c716 <Ble_Hci_Gap_Gatt_Init+0x44a>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800c6fc:	480e      	ldr	r0, [pc, #56]	@ (800c738 <Ble_Hci_Gap_Gatt_Init+0x46c>)
 800c6fe:	f7ff f9db 	bl	800bab8 <DbgTraceGetFileName>
 800c702:	4601      	mov	r1, r0
 800c704:	f44f 7353 	mov.w	r3, #844	@ 0x34c
 800c708:	4a0c      	ldr	r2, [pc, #48]	@ (800c73c <Ble_Hci_Gap_Gatt_Init+0x470>)
 800c70a:	480d      	ldr	r0, [pc, #52]	@ (800c740 <Ble_Hci_Gap_Gatt_Init+0x474>)
 800c70c:	f002 f9fc 	bl	800eb08 <iprintf>
 800c710:	4812      	ldr	r0, [pc, #72]	@ (800c75c <Ble_Hci_Gap_Gatt_Init+0x490>)
 800c712:	f002 fa61 	bl	800ebd8 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800c716:	4808      	ldr	r0, [pc, #32]	@ (800c738 <Ble_Hci_Gap_Gatt_Init+0x46c>)
 800c718:	f7ff f9ce 	bl	800bab8 <DbgTraceGetFileName>
 800c71c:	4601      	mov	r1, r0
 800c71e:	f240 334f 	movw	r3, #847	@ 0x34f
 800c722:	4a06      	ldr	r2, [pc, #24]	@ (800c73c <Ble_Hci_Gap_Gatt_Init+0x470>)
 800c724:	4806      	ldr	r0, [pc, #24]	@ (800c740 <Ble_Hci_Gap_Gatt_Init+0x474>)
 800c726:	f002 f9ef 	bl	800eb08 <iprintf>
 800c72a:	480d      	ldr	r0, [pc, #52]	@ (800c760 <Ble_Hci_Gap_Gatt_Init+0x494>)
 800c72c:	f002 f9ec 	bl	800eb08 <iprintf>
}
 800c730:	bf00      	nop
 800c732:	371c      	adds	r7, #28
 800c734:	46bd      	mov	sp, r7
 800c736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c738:	08010ef4 	.word	0x08010ef4
 800c73c:	08011de8 	.word	0x08011de8
 800c740:	08010f10 	.word	0x08010f10
 800c744:	08011454 	.word	0x08011454
 800c748:	20000bf4 	.word	0x20000bf4
 800c74c:	0001b207 	.word	0x0001b207
 800c750:	08011484 	.word	0x08011484
 800c754:	080114d0 	.word	0x080114d0
 800c758:	0801150c 	.word	0x0801150c
 800c75c:	0801154c 	.word	0x0801154c
 800c760:	0801157c 	.word	0x0801157c

0800c764 <Scan_Request>:

static void Scan_Request(void)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */
  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800c76a:	4b19      	ldr	r3, [pc, #100]	@ (800c7d0 <Scan_Request+0x6c>)
 800c76c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c770:	2b06      	cmp	r3, #6
 800c772:	d028      	beq.n	800c7c6 <Scan_Request+0x62>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */

    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, CFG_BLE_ADDRESS_TYPE, 1);
 800c774:	2301      	movs	r3, #1
 800c776:	2201      	movs	r2, #1
 800c778:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800c77c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800c780:	f7fd fce0 	bl	800a144 <aci_gap_start_general_discovery_proc>
 800c784:	4603      	mov	r3, r0
 800c786:	71fb      	strb	r3, [r7, #7]
	// result = aci_gap_start_observation_proc(SCAN_P, SCAN_L, 0x00, CFG_BLE_ADDRESS_TYPE, 0, 0x00);
    if (result == BLE_STATUS_SUCCESS)
 800c788:	79fb      	ldrb	r3, [r7, #7]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10d      	bne.n	800c7aa <Scan_Request+0x46>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */

    /* USER CODE END BLE_SCAN_SUCCESS */
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
 800c78e:	4811      	ldr	r0, [pc, #68]	@ (800c7d4 <Scan_Request+0x70>)
 800c790:	f7ff f992 	bl	800bab8 <DbgTraceGetFileName>
 800c794:	4601      	mov	r1, r0
 800c796:	f240 3363 	movw	r3, #867	@ 0x363
 800c79a:	4a0f      	ldr	r2, [pc, #60]	@ (800c7d8 <Scan_Request+0x74>)
 800c79c:	480f      	ldr	r0, [pc, #60]	@ (800c7dc <Scan_Request+0x78>)
 800c79e:	f002 f9b3 	bl	800eb08 <iprintf>
 800c7a2:	480f      	ldr	r0, [pc, #60]	@ (800c7e0 <Scan_Request+0x7c>)
 800c7a4:	f002 f9b0 	bl	800eb08 <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 800c7a8:	e00d      	b.n	800c7c6 <Scan_Request+0x62>
      APP_DBG_MSG("-- BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 800c7aa:	480a      	ldr	r0, [pc, #40]	@ (800c7d4 <Scan_Request+0x70>)
 800c7ac:	f7ff f984 	bl	800bab8 <DbgTraceGetFileName>
 800c7b0:	4601      	mov	r1, r0
 800c7b2:	f240 336a 	movw	r3, #874	@ 0x36a
 800c7b6:	4a08      	ldr	r2, [pc, #32]	@ (800c7d8 <Scan_Request+0x74>)
 800c7b8:	4808      	ldr	r0, [pc, #32]	@ (800c7dc <Scan_Request+0x78>)
 800c7ba:	f002 f9a5 	bl	800eb08 <iprintf>
 800c7be:	4809      	ldr	r0, [pc, #36]	@ (800c7e4 <Scan_Request+0x80>)
 800c7c0:	f002 f9a2 	bl	800eb08 <iprintf>
  return;
 800c7c4:	bf00      	nop
 800c7c6:	bf00      	nop
}
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	20000bf4 	.word	0x20000bf4
 800c7d4:	08010ef4 	.word	0x08010ef4
 800c7d8:	08011e00 	.word	0x08011e00
 800c7dc:	08010f10 	.word	0x08010f10
 800c7e0:	080115b0 	.word	0x080115b0
 800c7e4:	080115e0 	.word	0x080115e0

0800c7e8 <Connect_Request>:

static void Connect_Request(void)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b08a      	sub	sp, #40	@ 0x28
 800c7ec:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;

  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");
 800c7ee:	481e      	ldr	r0, [pc, #120]	@ (800c868 <Connect_Request+0x80>)
 800c7f0:	f7ff f962 	bl	800bab8 <DbgTraceGetFileName>
 800c7f4:	4601      	mov	r1, r0
 800c7f6:	f240 337a 	movw	r3, #890	@ 0x37a
 800c7fa:	4a1c      	ldr	r2, [pc, #112]	@ (800c86c <Connect_Request+0x84>)
 800c7fc:	481c      	ldr	r0, [pc, #112]	@ (800c870 <Connect_Request+0x88>)
 800c7fe:	f002 f983 	bl	800eb08 <iprintf>
 800c802:	481c      	ldr	r0, [pc, #112]	@ (800c874 <Connect_Request+0x8c>)
 800c804:	f002 f980 	bl	800eb08 <iprintf>

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800c808:	4b1b      	ldr	r3, [pc, #108]	@ (800c878 <Connect_Request+0x90>)
 800c80a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c80e:	2b06      	cmp	r3, #6
 800c810:	d026      	beq.n	800c860 <Connect_Request+0x78>
  {
    result = aci_gap_create_connection(SCAN_P,
 800c812:	4b1a      	ldr	r3, [pc, #104]	@ (800c87c <Connect_Request+0x94>)
 800c814:	781a      	ldrb	r2, [r3, #0]
 800c816:	2310      	movs	r3, #16
 800c818:	9306      	str	r3, [sp, #24]
 800c81a:	2310      	movs	r3, #16
 800c81c:	9305      	str	r3, [sp, #20]
 800c81e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800c822:	9304      	str	r3, [sp, #16]
 800c824:	2300      	movs	r3, #0
 800c826:	9303      	str	r3, [sp, #12]
 800c828:	2350      	movs	r3, #80	@ 0x50
 800c82a:	9302      	str	r3, [sp, #8]
 800c82c:	2328      	movs	r3, #40	@ 0x28
 800c82e:	9301      	str	r3, [sp, #4]
 800c830:	2301      	movs	r3, #1
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	4b12      	ldr	r3, [pc, #72]	@ (800c880 <Connect_Request+0x98>)
 800c836:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800c83a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800c83e:	f7fd fd15 	bl	800a26c <aci_gap_create_connection>
 800c842:	4603      	mov	r3, r0
 800c844:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800c846:	79fb      	ldrb	r3, [r7, #7]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d104      	bne.n	800c856 <Connect_Request+0x6e>
    {
      /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

      /* USER CODE END BLE_CONNECT_SUCCESS */
      BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 800c84c:	4b0a      	ldr	r3, [pc, #40]	@ (800c878 <Connect_Request+0x90>)
 800c84e:	2204      	movs	r2, #4
 800c850:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 800c854:	e004      	b.n	800c860 <Connect_Request+0x78>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c856:	4b08      	ldr	r3, [pc, #32]	@ (800c878 <Connect_Request+0x90>)
 800c858:	2200      	movs	r2, #0
 800c85a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  return;
 800c85e:	bf00      	nop
 800c860:	bf00      	nop
}
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	08010ef4 	.word	0x08010ef4
 800c86c:	08011e10 	.word	0x08011e10
 800c870:	08010f10 	.word	0x08010f10
 800c874:	08011610 	.word	0x08011610
 800c878:	20000bf4 	.word	0x20000bf4
 800c87c:	20000bee 	.word	0x20000bee
 800c880:	20000be8 	.word	0x20000be8

0800c884 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800c88c:	2100      	movs	r1, #0
 800c88e:	2010      	movs	r0, #16
 800c890:	f001 fb24 	bl	800dedc <UTIL_SEQ_SetTask>
  return;
 800c894:	bf00      	nop
}
 800c896:	3708      	adds	r7, #8
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c8a4:	2001      	movs	r0, #1
 800c8a6:	f001 fb85 	bl	800dfb4 <UTIL_SEQ_SetEvt>
  return;
 800c8aa:	bf00      	nop
}
 800c8ac:	3708      	adds	r7, #8
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}

0800c8b2 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b082      	sub	sp, #8
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c8ba:	2001      	movs	r0, #1
 800c8bc:	f001 fb9a 	bl	800dff4 <UTIL_SEQ_WaitEvt>
  return;
 800c8c0:	bf00      	nop
}
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void * pPayload)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	3308      	adds	r3, #8
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7fe fa6c 	bl	800adb8 <SVCCTL_UserEvtRx>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800c8e4:	7afb      	ldrb	r3, [r7, #11]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d003      	beq.n	800c8f2 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800c8f0:	e003      	b.n	800c8fa <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	701a      	strb	r2, [r3, #0]
  return;
 800c8f8:	bf00      	nop
}
 800c8fa:	3710      	adds	r7, #16
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t status)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	4603      	mov	r3, r0
 800c908:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800c90a:	79fb      	ldrb	r3, [r7, #7]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d002      	beq.n	800c916 <BLE_StatusNot+0x16>
 800c910:	2b01      	cmp	r3, #1
 800c912:	d006      	beq.n	800c922 <BLE_StatusNot+0x22>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
      break;

    default:
      break;
 800c914:	e00b      	b.n	800c92e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c916:	231f      	movs	r3, #31
 800c918:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f001 fb0a 	bl	800df34 <UTIL_SEQ_PauseTask>
      break;
 800c920:	e005      	b.n	800c92e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c922:	231f      	movs	r3, #31
 800c924:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800c926:	68f8      	ldr	r0, [r7, #12]
 800c928:	f001 fb24 	bl	800df74 <UTIL_SEQ_ResumeTask>
      break;
 800c92c:	bf00      	nop
  }
  return;
 800c92e:	bf00      	nop
}
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
	...

0800c938 <is_duplicate_devices>:
  return;
}

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
// すでにリストにあるデバイスかどうかを確認
uint8_t is_duplicate_devices(uint8_t *addr) {
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < num_sensors_found; i++) {
 800c940:	2300      	movs	r3, #0
 800c942:	73fb      	strb	r3, [r7, #15]
 800c944:	e011      	b.n	800c96a <is_duplicate_devices+0x32>
        if (memcmp(SensorDevices[i].bd_addr, addr, 6) == 0) {
 800c946:	7bfb      	ldrb	r3, [r7, #15]
 800c948:	00db      	lsls	r3, r3, #3
 800c94a:	4a0d      	ldr	r2, [pc, #52]	@ (800c980 <is_duplicate_devices+0x48>)
 800c94c:	4413      	add	r3, r2
 800c94e:	3301      	adds	r3, #1
 800c950:	2206      	movs	r2, #6
 800c952:	6879      	ldr	r1, [r7, #4]
 800c954:	4618      	mov	r0, r3
 800c956:	f002 fa1f 	bl	800ed98 <memcmp>
 800c95a:	4603      	mov	r3, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d101      	bne.n	800c964 <is_duplicate_devices+0x2c>
            return 1; // 重複あり
 800c960:	2301      	movs	r3, #1
 800c962:	e008      	b.n	800c976 <is_duplicate_devices+0x3e>
    for (uint8_t i = 0; i < num_sensors_found; i++) {
 800c964:	7bfb      	ldrb	r3, [r7, #15]
 800c966:	3301      	adds	r3, #1
 800c968:	73fb      	strb	r3, [r7, #15]
 800c96a:	4b06      	ldr	r3, [pc, #24]	@ (800c984 <is_duplicate_devices+0x4c>)
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	7bfa      	ldrb	r2, [r7, #15]
 800c970:	429a      	cmp	r2, r3
 800c972:	d3e8      	bcc.n	800c946 <is_duplicate_devices+0xe>
        }
    }
    return 0; // 重複なし
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	3710      	adds	r7, #16
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	20000ba4 	.word	0x20000ba4
 800c984:	20000be4 	.word	0x20000be4

0800c988 <Connect_To_Next_Sensor>:

void Connect_To_Next_Sensor(void)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b08a      	sub	sp, #40	@ 0x28
 800c98c:	af08      	add	r7, sp, #32
    if (current_connection_index < num_sensors_found)
 800c98e:	4b1d      	ldr	r3, [pc, #116]	@ (800ca04 <Connect_To_Next_Sensor+0x7c>)
 800c990:	781a      	ldrb	r2, [r3, #0]
 800c992:	4b1d      	ldr	r3, [pc, #116]	@ (800ca08 <Connect_To_Next_Sensor+0x80>)
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	429a      	cmp	r2, r3
 800c998:	d22f      	bcs.n	800c9fa <Connect_To_Next_Sensor+0x72>
    {
        SensorDevice_t *sensor = &SensorDevices[current_connection_index];
 800c99a:	4b1a      	ldr	r3, [pc, #104]	@ (800ca04 <Connect_To_Next_Sensor+0x7c>)
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	00db      	lsls	r3, r3, #3
 800c9a0:	4a1a      	ldr	r2, [pc, #104]	@ (800ca0c <Connect_To_Next_Sensor+0x84>)
 800c9a2:	4413      	add	r3, r2
 800c9a4:	607b      	str	r3, [r7, #4]

        APP_DBG_MSG("Connecting to device %d...\r\n", current_connection_index + 1);
 800c9a6:	481a      	ldr	r0, [pc, #104]	@ (800ca10 <Connect_To_Next_Sensor+0x88>)
 800c9a8:	f7ff f886 	bl	800bab8 <DbgTraceGetFileName>
 800c9ac:	4601      	mov	r1, r0
 800c9ae:	f240 433a 	movw	r3, #1082	@ 0x43a
 800c9b2:	4a18      	ldr	r2, [pc, #96]	@ (800ca14 <Connect_To_Next_Sensor+0x8c>)
 800c9b4:	4818      	ldr	r0, [pc, #96]	@ (800ca18 <Connect_To_Next_Sensor+0x90>)
 800c9b6:	f002 f8a7 	bl	800eb08 <iprintf>
 800c9ba:	4b12      	ldr	r3, [pc, #72]	@ (800ca04 <Connect_To_Next_Sensor+0x7c>)
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	4816      	ldr	r0, [pc, #88]	@ (800ca1c <Connect_To_Next_Sensor+0x94>)
 800c9c4:	f002 f8a0 	bl	800eb08 <iprintf>

        aci_gap_create_connection(
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	781a      	ldrb	r2, [r3, #0]
            SCAN_P, SCAN_L,
            sensor->addr_type, sensor->bd_addr,
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	3301      	adds	r3, #1
        aci_gap_create_connection(
 800c9d0:	2110      	movs	r1, #16
 800c9d2:	9106      	str	r1, [sp, #24]
 800c9d4:	2110      	movs	r1, #16
 800c9d6:	9105      	str	r1, [sp, #20]
 800c9d8:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800c9dc:	9104      	str	r1, [sp, #16]
 800c9de:	2100      	movs	r1, #0
 800c9e0:	9103      	str	r1, [sp, #12]
 800c9e2:	2150      	movs	r1, #80	@ 0x50
 800c9e4:	9102      	str	r1, [sp, #8]
 800c9e6:	2128      	movs	r1, #40	@ 0x28
 800c9e8:	9101      	str	r1, [sp, #4]
 800c9ea:	2101      	movs	r1, #1
 800c9ec:	9100      	str	r1, [sp, #0]
 800c9ee:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800c9f2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800c9f6:	f7fd fc39 	bl	800a26c <aci_gap_create_connection>
            CONN_P1, CONN_P2,
            0, SUPERV_TIMEOUT,
            CONN_L1, CONN_L2
        );
    }
}
 800c9fa:	bf00      	nop
 800c9fc:	3708      	adds	r7, #8
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop
 800ca04:	20000be5 	.word	0x20000be5
 800ca08:	20000be4 	.word	0x20000be4
 800ca0c:	20000ba4 	.word	0x20000ba4
 800ca10:	08010ef4 	.word	0x08010ef4
 800ca14:	08011e20 	.word	0x08011e20
 800ca18:	08010f10 	.word	0x08010f10
 800ca1c:	0801163c 	.word	0x0801163c

0800ca20 <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
  uint8_t index =0;
 800ca26:	2300      	movs	r3, #0
 800ca28:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */

/* USER CODE END P2PC_APP_Init_1 */
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	71fb      	strb	r3, [r7, #7]
 800ca2e:	e00b      	b.n	800ca48 <P2PC_APP_Init+0x28>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 800ca30:	79fa      	ldrb	r2, [r7, #7]
 800ca32:	4910      	ldr	r1, [pc, #64]	@ (800ca74 <P2PC_APP_Init+0x54>)
 800ca34:	4613      	mov	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4413      	add	r3, r2
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	440b      	add	r3, r1
 800ca3e:	2200      	movs	r2, #0
 800ca40:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800ca42:	79fb      	ldrb	r3, [r7, #7]
 800ca44:	3301      	adds	r3, #1
 800ca46:	71fb      	strb	r3, [r7, #7]
 800ca48:	79fb      	ldrb	r3, [r7, #7]
 800ca4a:	2b09      	cmp	r3, #9
 800ca4c:	d9f0      	bls.n	800ca30 <P2PC_APP_Init+0x10>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 800ca4e:	480a      	ldr	r0, [pc, #40]	@ (800ca78 <P2PC_APP_Init+0x58>)
 800ca50:	f7fe f996 	bl	800ad80 <SVCCTL_RegisterCltHandler>

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- P2P CLIENT INITIALIZED \n");
 800ca54:	4809      	ldr	r0, [pc, #36]	@ (800ca7c <P2PC_APP_Init+0x5c>)
 800ca56:	f7ff f82f 	bl	800bab8 <DbgTraceGetFileName>
 800ca5a:	4601      	mov	r1, r0
 800ca5c:	23b9      	movs	r3, #185	@ 0xb9
 800ca5e:	4a08      	ldr	r2, [pc, #32]	@ (800ca80 <P2PC_APP_Init+0x60>)
 800ca60:	4808      	ldr	r0, [pc, #32]	@ (800ca84 <P2PC_APP_Init+0x64>)
 800ca62:	f002 f851 	bl	800eb08 <iprintf>
 800ca66:	4808      	ldr	r0, [pc, #32]	@ (800ca88 <P2PC_APP_Init+0x68>)
 800ca68:	f002 f8b6 	bl	800ebd8 <puts>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */

/* USER CODE END P2PC_APP_Init_2 */
  return;
 800ca6c:	bf00      	nop
}
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	20000c88 	.word	0x20000c88
 800ca78:	0800cab9 	.word	0x0800cab9
 800ca7c:	0801165c 	.word	0x0801165c
 800ca80:	08011e38 	.word	0x08011e38
 800ca84:	08011680 	.word	0x08011680
 800ca88:	08011694 	.word	0x08011694

0800ca8c <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d002      	beq.n	800caa2 <P2PC_APP_Notification+0x16>
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d002      	beq.n	800caa6 <P2PC_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 800caa0:	e002      	b.n	800caa8 <P2PC_APP_Notification+0x1c>
      break;
 800caa2:	bf00      	nop
 800caa4:	e000      	b.n	800caa8 <P2PC_APP_Notification+0x1c>
      break;
 800caa6:	bf00      	nop
  }
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
 800caa8:	bf00      	nop
}
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr
 800cab4:	0000      	movs	r0, r0
	...

0800cab8 <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 800cab8:	b5b0      	push	{r4, r5, r7, lr}
 800caba:	b0a6      	sub	sp, #152	@ 0x98
 800cabc:	af02      	add	r7, sp, #8
 800cabe:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800cac0:	2300      	movs	r3, #0
 800cac2:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	3301      	adds	r3, #1
 800caca:	67bb      	str	r3, [r7, #120]	@ 0x78

  switch(event_pckt->evt)
 800cacc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	2bff      	cmp	r3, #255	@ 0xff
 800cad2:	f040 8635 	bne.w	800d740 <Event_Handler+0xc88>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800cad6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cad8:	3302      	adds	r3, #2
 800cada:	677b      	str	r3, [r7, #116]	@ 0x74
      switch(blecore_evt->ecode)
 800cadc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cade:	881b      	ldrh	r3, [r3, #0]
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	f6a3 4304 	subw	r3, r3, #3076	@ 0xc04
 800cae6:	2b0c      	cmp	r3, #12
 800cae8:	f200 861a 	bhi.w	800d720 <Event_Handler+0xc68>
 800caec:	a201      	add	r2, pc, #4	@ (adr r2, 800caf4 <Event_Handler+0x3c>)
 800caee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf2:	bf00      	nop
 800caf4:	0800cf95 	.word	0x0800cf95
 800caf8:	0800d721 	.word	0x0800d721
 800cafc:	0800cda7 	.word	0x0800cda7
 800cb00:	0800d721 	.word	0x0800d721
 800cb04:	0800d721 	.word	0x0800d721
 800cb08:	0800d721 	.word	0x0800d721
 800cb0c:	0800cb29 	.word	0x0800cb29
 800cb10:	0800d721 	.word	0x0800d721
 800cb14:	0800d721 	.word	0x0800d721
 800cb18:	0800d721 	.word	0x0800d721
 800cb1c:	0800d721 	.word	0x0800d721
 800cb20:	0800d13d 	.word	0x0800d13d
 800cb24:	0800d535 	.word	0x0800d535
      {

        case ACI_ATT_READ_BY_GROUP_TYPE_RESP_VSEVT_CODE:
        {
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800cb28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb2a:	3302      	adds	r3, #2
 800cb2c:	63bb      	str	r3, [r7, #56]	@ 0x38
          uint8_t numServ, i, idx;
          uint16_t uuid, handle;

          uint8_t index;
          handle = pr->Connection_Handle;
 800cb2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb30:	781a      	ldrb	r2, [r3, #0]
 800cb32:	785b      	ldrb	r3, [r3, #1]
 800cb34:	021b      	lsls	r3, r3, #8
 800cb36:	4313      	orrs	r3, r2
 800cb38:	86fb      	strh	r3, [r7, #54]	@ 0x36
          index = 0;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cb40:	e052      	b.n	800cbe8 <Event_Handler+0x130>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
          {
            APP_BLE_ConnStatus_t status;

            APP_DBG_MSG("Checking Connection Status: Handle = 0x%04X\n", aP2PClientContext[index].connHandle);
 800cb42:	48bc      	ldr	r0, [pc, #752]	@ (800ce34 <Event_Handler+0x37c>)
 800cb44:	f7fe ffb8 	bl	800bab8 <DbgTraceGetFileName>
 800cb48:	4601      	mov	r1, r0
 800cb4a:	f240 1315 	movw	r3, #277	@ 0x115
 800cb4e:	4aba      	ldr	r2, [pc, #744]	@ (800ce38 <Event_Handler+0x380>)
 800cb50:	48ba      	ldr	r0, [pc, #744]	@ (800ce3c <Event_Handler+0x384>)
 800cb52:	f001 ffd9 	bl	800eb08 <iprintf>
 800cb56:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800cb5a:	49b9      	ldr	r1, [pc, #740]	@ (800ce40 <Event_Handler+0x388>)
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	009b      	lsls	r3, r3, #2
 800cb60:	4413      	add	r3, r2
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	440b      	add	r3, r1
 800cb66:	3302      	adds	r3, #2
 800cb68:	881b      	ldrh	r3, [r3, #0]
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	48b5      	ldr	r0, [pc, #724]	@ (800ce44 <Event_Handler+0x38c>)
 800cb6e:	f001 ffcb 	bl	800eb08 <iprintf>
            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 800cb72:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800cb76:	49b2      	ldr	r1, [pc, #712]	@ (800ce40 <Event_Handler+0x388>)
 800cb78:	4613      	mov	r3, r2
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	4413      	add	r3, r2
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	440b      	add	r3, r1
 800cb82:	3302      	adds	r3, #2
 800cb84:	881b      	ldrh	r3, [r3, #0]
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7ff fb72 	bl	800c270 <APP_BLE_Get_Client_Connection_Status>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 800cb92:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800cb96:	49aa      	ldr	r1, [pc, #680]	@ (800ce40 <Event_Handler+0x388>)
 800cb98:	4613      	mov	r3, r2
 800cb9a:	009b      	lsls	r3, r3, #2
 800cb9c:	4413      	add	r3, r2
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	440b      	add	r3, r1
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	2b06      	cmp	r3, #6
 800cba6:	d11a      	bne.n	800cbde <Event_Handler+0x126>
 800cba8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d116      	bne.n	800cbde <Event_Handler+0x126>
                    (status == APP_BLE_IDLE))
            {
              /* Handle disconnected */
              aP2PClientContext[index].state = APP_BLE_IDLE;
 800cbb0:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800cbb4:	49a2      	ldr	r1, [pc, #648]	@ (800ce40 <Event_Handler+0x388>)
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	4413      	add	r3, r2
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	440b      	add	r3, r1
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 800cbc4:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800cbc8:	499d      	ldr	r1, [pc, #628]	@ (800ce40 <Event_Handler+0x388>)
 800cbca:	4613      	mov	r3, r2
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	4413      	add	r3, r2
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	440b      	add	r3, r1
 800cbd4:	3302      	adds	r3, #2
 800cbd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cbda:	801a      	strh	r2, [r3, #0]
              break;
 800cbdc:	e013      	b.n	800cc06 <Event_Handler+0x14e>
            }
            index++;
 800cbde:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cbe8:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800cbec:	2b09      	cmp	r3, #9
 800cbee:	d80a      	bhi.n	800cc06 <Event_Handler+0x14e>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800cbf0:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800cbf4:	4992      	ldr	r1, [pc, #584]	@ (800ce40 <Event_Handler+0x388>)
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	4413      	add	r3, r2
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	440b      	add	r3, r1
 800cc00:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d19d      	bne.n	800cb42 <Event_Handler+0x8a>
          }

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800cc06:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800cc0a:	2b09      	cmp	r3, #9
 800cc0c:	f200 858a 	bhi.w	800d724 <Event_Handler+0xc6c>
          {
              aP2PClientContext[index].connHandle= handle;
 800cc10:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800cc14:	498a      	ldr	r1, [pc, #552]	@ (800ce40 <Event_Handler+0x388>)
 800cc16:	4613      	mov	r3, r2
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	4413      	add	r3, r2
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	440b      	add	r3, r1
 800cc20:	3302      	adds	r3, #2
 800cc22:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800cc24:	801a      	strh	r2, [r3, #0]

              numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 800cc26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc28:	78da      	ldrb	r2, [r3, #3]
 800cc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2c:	789b      	ldrb	r3, [r3, #2]
 800cc2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc32:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

              APP_DBG_MSG("-- GATT: ACI_ATT_READ_BY_GROUP_TYPE_RESP_VSEVT_CODE: Attribute_Data_Length=%d Data_Length=%d index=%d numServ=%d\n\r", pr->Attribute_Data_Length, pr->Data_Length, index, numServ);
 800cc36:	487f      	ldr	r0, [pc, #508]	@ (800ce34 <Event_Handler+0x37c>)
 800cc38:	f7fe ff3e 	bl	800bab8 <DbgTraceGetFileName>
 800cc3c:	4601      	mov	r1, r0
 800cc3e:	f240 1329 	movw	r3, #297	@ 0x129
 800cc42:	4a7d      	ldr	r2, [pc, #500]	@ (800ce38 <Event_Handler+0x380>)
 800cc44:	487d      	ldr	r0, [pc, #500]	@ (800ce3c <Event_Handler+0x384>)
 800cc46:	f001 ff5f 	bl	800eb08 <iprintf>
 800cc4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4c:	789b      	ldrb	r3, [r3, #2]
 800cc4e:	4619      	mov	r1, r3
 800cc50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc52:	78db      	ldrb	r3, [r3, #3]
 800cc54:	4618      	mov	r0, r3
 800cc56:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800cc5a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800cc5e:	9300      	str	r3, [sp, #0]
 800cc60:	4613      	mov	r3, r2
 800cc62:	4602      	mov	r2, r0
 800cc64:	4878      	ldr	r0, [pc, #480]	@ (800ce48 <Event_Handler+0x390>)
 800cc66:	f001 ff4f 	bl	800eb08 <iprintf>

              if (pr->Attribute_Data_Length != 6) break;
 800cc6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc6c:	789b      	ldrb	r3, [r3, #2]
 800cc6e:	2b06      	cmp	r3, #6
 800cc70:	f040 855a 	bne.w	800d728 <Event_Handler+0xc70>

			  idx = 4;
 800cc74:	2304      	movs	r3, #4
 800cc76:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
			  for (i=0; i<numServ; i++)
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800cc80:	e088      	b.n	800cd94 <Event_Handler+0x2dc>
			  {
				uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 800cc82:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800cc86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc88:	4413      	add	r3, r2
 800cc8a:	791b      	ldrb	r3, [r3, #4]
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800cc92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc94:	4413      	add	r3, r2
 800cc96:	3304      	adds	r3, #4
 800cc98:	3301      	adds	r3, #1
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	021b      	lsls	r3, r3, #8
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	430b      	orrs	r3, r1
 800cca2:	867b      	strh	r3, [r7, #50]	@ 0x32

				APP_DBG_MSG("-- GATT: ACI_ATT_READ_BY_GROUP_TYPE_RESP_VSEVT_CODE: Found UUID: 0x%04X\n\r", uuid);
 800cca4:	4863      	ldr	r0, [pc, #396]	@ (800ce34 <Event_Handler+0x37c>)
 800cca6:	f7fe ff07 	bl	800bab8 <DbgTraceGetFileName>
 800ccaa:	4601      	mov	r1, r0
 800ccac:	f44f 7399 	mov.w	r3, #306	@ 0x132
 800ccb0:	4a61      	ldr	r2, [pc, #388]	@ (800ce38 <Event_Handler+0x380>)
 800ccb2:	4862      	ldr	r0, [pc, #392]	@ (800ce3c <Event_Handler+0x384>)
 800ccb4:	f001 ff28 	bl	800eb08 <iprintf>
 800ccb8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ccba:	4619      	mov	r1, r3
 800ccbc:	4863      	ldr	r0, [pc, #396]	@ (800ce4c <Event_Handler+0x394>)
 800ccbe:	f001 ff23 	bl	800eb08 <iprintf>

				// 0x1816 -> Cycling Speed and Cadence (CSC) サービス
				// 0x1818 -> Cycling Power Service (CPS)
				if(uuid == 0x1816 || uuid == 0x1818)
 800ccc2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ccc4:	f641 0216 	movw	r2, #6166	@ 0x1816
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d004      	beq.n	800ccd6 <Event_Handler+0x21e>
 800cccc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ccce:	f641 0218 	movw	r2, #6168	@ 0x1818
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d154      	bne.n	800cd80 <Event_Handler+0x2c8>
				{
				  APP_DBG_MSG("-- GATT : SERVICE_UUID FOUND: uuid=0x%04X\n", uuid);
 800ccd6:	4857      	ldr	r0, [pc, #348]	@ (800ce34 <Event_Handler+0x37c>)
 800ccd8:	f7fe feee 	bl	800bab8 <DbgTraceGetFileName>
 800ccdc:	4601      	mov	r1, r0
 800ccde:	f44f 739c 	mov.w	r3, #312	@ 0x138
 800cce2:	4a55      	ldr	r2, [pc, #340]	@ (800ce38 <Event_Handler+0x380>)
 800cce4:	4855      	ldr	r0, [pc, #340]	@ (800ce3c <Event_Handler+0x384>)
 800cce6:	f001 ff0f 	bl	800eb08 <iprintf>
 800ccea:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ccec:	4619      	mov	r1, r3
 800ccee:	4858      	ldr	r0, [pc, #352]	@ (800ce50 <Event_Handler+0x398>)
 800ccf0:	f001 ff0a 	bl	800eb08 <iprintf>

				  aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-4]);
 800ccf4:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800ccf8:	3b04      	subs	r3, #4
 800ccfa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccfc:	4413      	add	r3, r2
 800ccfe:	791b      	ldrb	r3, [r3, #4]
 800cd00:	4619      	mov	r1, r3
 800cd02:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800cd06:	3b04      	subs	r3, #4
 800cd08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd0a:	4413      	add	r3, r2
 800cd0c:	3304      	adds	r3, #4
 800cd0e:	3301      	adds	r3, #1
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	021b      	lsls	r3, r3, #8
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800cd1a:	430b      	orrs	r3, r1
 800cd1c:	b298      	uxth	r0, r3
 800cd1e:	4948      	ldr	r1, [pc, #288]	@ (800ce40 <Event_Handler+0x388>)
 800cd20:	4613      	mov	r3, r2
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	4413      	add	r3, r2
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	440b      	add	r3, r1
 800cd2a:	3304      	adds	r3, #4
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	801a      	strh	r2, [r3, #0]
				  aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-2]);
 800cd30:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800cd34:	3b02      	subs	r3, #2
 800cd36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd38:	4413      	add	r3, r2
 800cd3a:	791b      	ldrb	r3, [r3, #4]
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800cd42:	3b02      	subs	r3, #2
 800cd44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd46:	4413      	add	r3, r2
 800cd48:	3304      	adds	r3, #4
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	021b      	lsls	r3, r3, #8
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800cd56:	430b      	orrs	r3, r1
 800cd58:	b298      	uxth	r0, r3
 800cd5a:	4939      	ldr	r1, [pc, #228]	@ (800ce40 <Event_Handler+0x388>)
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	4413      	add	r3, r2
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	440b      	add	r3, r1
 800cd66:	3306      	adds	r3, #6
 800cd68:	4602      	mov	r2, r0
 800cd6a:	801a      	strh	r2, [r3, #0]
				  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 800cd6c:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800cd70:	4933      	ldr	r1, [pc, #204]	@ (800ce40 <Event_Handler+0x388>)
 800cd72:	4613      	mov	r3, r2
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	4413      	add	r3, r2
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	440b      	add	r3, r1
 800cd7c:	2208      	movs	r2, #8
 800cd7e:	701a      	strb	r2, [r3, #0]
				}
				idx += 6;
 800cd80:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800cd84:	3306      	adds	r3, #6
 800cd86:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
			  for (i=0; i<numServ; i++)
 800cd8a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800cd8e:	3301      	adds	r3, #1
 800cd90:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800cd94:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800cd98:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	f4ff af70 	bcc.w	800cc82 <Event_Handler+0x1ca>
			  }
          }
        }
        break;
 800cda2:	f000 bcbf 	b.w	800d724 <Event_Handler+0xc6c>

        case ACI_ATT_READ_BY_TYPE_RESP_VSEVT_CODE:
        {

          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800cda6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cda8:	3302      	adds	r3, #2
 800cdaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
           * 2 or 16 bytes data
           */

          uint8_t index;

          index = 0;
 800cdac:	2300      	movs	r3, #0
 800cdae:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cdb2:	e004      	b.n	800cdbe <Event_Handler+0x306>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800cdb4:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800cdb8:	3301      	adds	r3, #1
 800cdba:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cdbe:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800cdc2:	2b09      	cmp	r3, #9
 800cdc4:	d80e      	bhi.n	800cde4 <Event_Handler+0x32c>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800cdc6:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 800cdca:	491d      	ldr	r1, [pc, #116]	@ (800ce40 <Event_Handler+0x388>)
 800cdcc:	4613      	mov	r3, r2
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	4413      	add	r3, r2
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	440b      	add	r3, r1
 800cdd6:	3302      	adds	r3, #2
 800cdd8:	881a      	ldrh	r2, [r3, #0]
 800cdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cddc:	881b      	ldrh	r3, [r3, #0]
 800cdde:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d1e7      	bne.n	800cdb4 <Event_Handler+0x2fc>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800cde4:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800cde8:	2b09      	cmp	r3, #9
 800cdea:	f200 849f 	bhi.w	800d72c <Event_Handler+0xc74>
          {

        	APP_DBG_MSG("-- GATT: ACI_ATT_READ_BY_TYPE_RESP_VSEVT_CODE: Handle_Value_Pair_Length: %d index: %d\n\r", pr->Handle_Value_Pair_Length, index);
 800cdee:	4811      	ldr	r0, [pc, #68]	@ (800ce34 <Event_Handler+0x37c>)
 800cdf0:	f7fe fe62 	bl	800bab8 <DbgTraceGetFileName>
 800cdf4:	4601      	mov	r1, r0
 800cdf6:	f44f 73ae 	mov.w	r3, #348	@ 0x15c
 800cdfa:	4a0f      	ldr	r2, [pc, #60]	@ (800ce38 <Event_Handler+0x380>)
 800cdfc:	480f      	ldr	r0, [pc, #60]	@ (800ce3c <Event_Handler+0x384>)
 800cdfe:	f001 fe83 	bl	800eb08 <iprintf>
 800ce02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce04:	789b      	ldrb	r3, [r3, #2]
 800ce06:	4619      	mov	r1, r3
 800ce08:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	4811      	ldr	r0, [pc, #68]	@ (800ce54 <Event_Handler+0x39c>)
 800ce10:	f001 fe7a 	bl	800eb08 <iprintf>

        	idx = 5;
 800ce14:	2305      	movs	r3, #5
 800ce16:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            if (pr->Handle_Value_Pair_Length == 7)
 800ce1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce1c:	789b      	ldrb	r3, [r3, #2]
 800ce1e:	2b07      	cmp	r3, #7
 800ce20:	f040 8484 	bne.w	800d72c <Event_Handler+0xc74>
            {
              pr->Data_Length -= 1;
 800ce24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce26:	78db      	ldrb	r3, [r3, #3]
 800ce28:	3b01      	subs	r3, #1
 800ce2a:	b2da      	uxtb	r2, r3
 800ce2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce2e:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 800ce30:	e0aa      	b.n	800cf88 <Event_Handler+0x4d0>
 800ce32:	bf00      	nop
 800ce34:	0801165c 	.word	0x0801165c
 800ce38:	08011e48 	.word	0x08011e48
 800ce3c:	08011680 	.word	0x08011680
 800ce40:	20000c88 	.word	0x20000c88
 800ce44:	080116b0 	.word	0x080116b0
 800ce48:	080116e0 	.word	0x080116e0
 800ce4c:	08011754 	.word	0x08011754
 800ce50:	080117a0 	.word	0x080117a0
 800ce54:	080117cc 	.word	0x080117cc
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 800ce58:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800ce5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce5e:	4413      	add	r3, r2
 800ce60:	791b      	ldrb	r3, [r3, #4]
 800ce62:	4619      	mov	r1, r3
 800ce64:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800ce68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce6a:	4413      	add	r3, r2
 800ce6c:	3304      	adds	r3, #4
 800ce6e:	3301      	adds	r3, #1
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	021b      	lsls	r3, r3, #8
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	430b      	orrs	r3, r1
 800ce78:	857b      	strh	r3, [r7, #42]	@ 0x2a
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-2]);
 800ce7a:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800ce7e:	3b02      	subs	r3, #2
 800ce80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce82:	4413      	add	r3, r2
 800ce84:	791b      	ldrb	r3, [r3, #4]
 800ce86:	4619      	mov	r1, r3
 800ce88:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800ce8c:	3b02      	subs	r3, #2
 800ce8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce90:	4413      	add	r3, r2
 800ce92:	3304      	adds	r3, #4
 800ce94:	3301      	adds	r3, #1
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	021b      	lsls	r3, r3, #8
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	430b      	orrs	r3, r1
 800ce9e:	853b      	strh	r3, [r7, #40]	@ 0x28

                // APP_DBG_MSG("-- GATT : NOTIFICATION_CHAR_UUID - uuid=0x%04x\n", uuid);

                // 0x2A5B -> CSC Measurement (Speed & Cadence)
                // 0x2A63 -> Cycling Power Measurement
                if (uuid == 0x2A5B || uuid == 0x2A63)
 800cea0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cea2:	f642 225b 	movw	r2, #10843	@ 0x2a5b
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d004      	beq.n	800ceb4 <Event_Handler+0x3fc>
 800ceaa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ceac:	f642 2263 	movw	r2, #10851	@ 0x2a63
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d123      	bne.n	800cefc <Event_Handler+0x444>
                {
                  APP_DBG_MSG("-- GATT : NOTIFICATION_CHAR_UUID FOUND - uuid=0x%04x\n", uuid);
 800ceb4:	48a5      	ldr	r0, [pc, #660]	@ (800d14c <Event_Handler+0x694>)
 800ceb6:	f7fe fdff 	bl	800bab8 <DbgTraceGetFileName>
 800ceba:	4601      	mov	r1, r0
 800cebc:	f240 136d 	movw	r3, #365	@ 0x16d
 800cec0:	4aa3      	ldr	r2, [pc, #652]	@ (800d150 <Event_Handler+0x698>)
 800cec2:	48a4      	ldr	r0, [pc, #656]	@ (800d154 <Event_Handler+0x69c>)
 800cec4:	f001 fe20 	bl	800eb08 <iprintf>
 800cec8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ceca:	4619      	mov	r1, r3
 800cecc:	48a2      	ldr	r0, [pc, #648]	@ (800d158 <Event_Handler+0x6a0>)
 800cece:	f001 fe1b 	bl	800eb08 <iprintf>

                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 800ced2:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 800ced6:	49a1      	ldr	r1, [pc, #644]	@ (800d15c <Event_Handler+0x6a4>)
 800ced8:	4613      	mov	r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	4413      	add	r3, r2
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	440b      	add	r3, r1
 800cee2:	220a      	movs	r2, #10
 800cee4:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 800cee6:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 800ceea:	499c      	ldr	r1, [pc, #624]	@ (800d15c <Event_Handler+0x6a4>)
 800ceec:	4613      	mov	r3, r2
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	4413      	add	r3, r2
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	440b      	add	r3, r1
 800cef6:	330c      	adds	r3, #12
 800cef8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cefa:	801a      	strh	r2, [r3, #0]
                }

                if (uuid == 0x2A5B) // CSC Measurement (Speed & Cadence)
 800cefc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cefe:	f642 225b 	movw	r2, #10843	@ 0x2a5b
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d118      	bne.n	800cf38 <Event_Handler+0x480>
                {
                  APP_DBG_MSG("-- GATT : Found CSC Measurement Characteristic\n");
 800cf06:	4891      	ldr	r0, [pc, #580]	@ (800d14c <Event_Handler+0x694>)
 800cf08:	f7fe fdd6 	bl	800bab8 <DbgTraceGetFileName>
 800cf0c:	4601      	mov	r1, r0
 800cf0e:	f240 1375 	movw	r3, #373	@ 0x175
 800cf12:	4a8f      	ldr	r2, [pc, #572]	@ (800d150 <Event_Handler+0x698>)
 800cf14:	488f      	ldr	r0, [pc, #572]	@ (800d154 <Event_Handler+0x69c>)
 800cf16:	f001 fdf7 	bl	800eb08 <iprintf>
 800cf1a:	4891      	ldr	r0, [pc, #580]	@ (800d160 <Event_Handler+0x6a8>)
 800cf1c:	f001 fe5c 	bl	800ebd8 <puts>
                  aP2PClientContext[index].CSC_Handle = handle;
 800cf20:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 800cf24:	498d      	ldr	r1, [pc, #564]	@ (800d15c <Event_Handler+0x6a4>)
 800cf26:	4613      	mov	r3, r2
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	4413      	add	r3, r2
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	440b      	add	r3, r1
 800cf30:	3310      	adds	r3, #16
 800cf32:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cf34:	801a      	strh	r2, [r3, #0]
 800cf36:	e01c      	b.n	800cf72 <Event_Handler+0x4ba>
                }
                else if (uuid == 0x2A63)  // Cycling Power Measurement
 800cf38:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cf3a:	f642 2263 	movw	r2, #10851	@ 0x2a63
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d117      	bne.n	800cf72 <Event_Handler+0x4ba>
                {
                    APP_DBG_MSG("-- GATT : Found Cycling Power Measurement Characteristic\n");
 800cf42:	4882      	ldr	r0, [pc, #520]	@ (800d14c <Event_Handler+0x694>)
 800cf44:	f7fe fdb8 	bl	800bab8 <DbgTraceGetFileName>
 800cf48:	4601      	mov	r1, r0
 800cf4a:	f44f 73bd 	mov.w	r3, #378	@ 0x17a
 800cf4e:	4a80      	ldr	r2, [pc, #512]	@ (800d150 <Event_Handler+0x698>)
 800cf50:	4880      	ldr	r0, [pc, #512]	@ (800d154 <Event_Handler+0x69c>)
 800cf52:	f001 fdd9 	bl	800eb08 <iprintf>
 800cf56:	4883      	ldr	r0, [pc, #524]	@ (800d164 <Event_Handler+0x6ac>)
 800cf58:	f001 fe3e 	bl	800ebd8 <puts>
                    aP2PClientContext[index].CPM_Handle = handle;
 800cf5c:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 800cf60:	497e      	ldr	r1, [pc, #504]	@ (800d15c <Event_Handler+0x6a4>)
 800cf62:	4613      	mov	r3, r2
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	4413      	add	r3, r2
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	440b      	add	r3, r1
 800cf6c:	3312      	adds	r3, #18
 800cf6e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cf70:	801a      	strh	r2, [r3, #0]
                }

                pr->Data_Length -= 7;
 800cf72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf74:	78db      	ldrb	r3, [r3, #3]
 800cf76:	3b07      	subs	r3, #7
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf7c:	70da      	strb	r2, [r3, #3]
                idx += 7;
 800cf7e:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800cf82:	3307      	adds	r3, #7
 800cf84:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
              while(pr->Data_Length > 0)
 800cf88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf8a:	78db      	ldrb	r3, [r3, #3]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f47f af63 	bne.w	800ce58 <Event_Handler+0x3a0>
              }
            }
          }
        }
        break;
 800cf92:	e3cb      	b.n	800d72c <Event_Handler+0xc74>

        case ACI_ATT_FIND_INFO_RESP_VSEVT_CODE:
        {
          aci_att_find_info_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800cf94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf96:	3302      	adds	r3, #2
 800cf98:	627b      	str	r3, [r7, #36]	@ 0x24
           * 2 bytes UUID
           */

          uint8_t index;

          index = 0;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cfa0:	e004      	b.n	800cfac <Event_Handler+0x4f4>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))

            index++;
 800cfa2:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cfac:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800cfb0:	2b09      	cmp	r3, #9
 800cfb2:	d80e      	bhi.n	800cfd2 <Event_Handler+0x51a>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800cfb4:	f897 2088 	ldrb.w	r2, [r7, #136]	@ 0x88
 800cfb8:	4968      	ldr	r1, [pc, #416]	@ (800d15c <Event_Handler+0x6a4>)
 800cfba:	4613      	mov	r3, r2
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	4413      	add	r3, r2
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	440b      	add	r3, r1
 800cfc4:	3302      	adds	r3, #2
 800cfc6:	881a      	ldrh	r2, [r3, #0]
 800cfc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfca:	881b      	ldrh	r3, [r3, #0]
 800cfcc:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d1e7      	bne.n	800cfa2 <Event_Handler+0x4ea>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800cfd2:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800cfd6:	2b09      	cmp	r3, #9
 800cfd8:	f200 83aa 	bhi.w	800d730 <Event_Handler+0xc78>
          {

            numDesc = (pr->Event_Data_Length) / 4;
 800cfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfde:	78db      	ldrb	r3, [r3, #3]
 800cfe0:	089b      	lsrs	r3, r3, #2
 800cfe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            /* we are interested only in 16 bit UUIDs */
            idx = 0;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
            if (pr->Format == UUID_TYPE_16)
 800cfec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfee:	789b      	ldrb	r3, [r3, #2]
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	f040 839d 	bne.w	800d730 <Event_Handler+0xc78>
            {
              for (i=0; i<numDesc; i++)
 800cff6:	2300      	movs	r3, #0
 800cff8:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800cffc:	e096      	b.n	800d12c <Event_Handler+0x674>
              {
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 800cffe:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800d002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d004:	4413      	add	r3, r2
 800d006:	791b      	ldrb	r3, [r3, #4]
 800d008:	4619      	mov	r1, r3
 800d00a:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800d00e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d010:	4413      	add	r3, r2
 800d012:	3304      	adds	r3, #4
 800d014:	3301      	adds	r3, #1
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	021b      	lsls	r3, r3, #8
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	430b      	orrs	r3, r1
 800d01e:	843b      	strh	r3, [r7, #32]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 800d020:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800d024:	3302      	adds	r3, #2
 800d026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d028:	4413      	add	r3, r2
 800d02a:	791b      	ldrb	r3, [r3, #4]
 800d02c:	4619      	mov	r1, r3
 800d02e:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800d032:	3302      	adds	r3, #2
 800d034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d036:	4413      	add	r3, r2
 800d038:	3304      	adds	r3, #4
 800d03a:	3301      	adds	r3, #1
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	021b      	lsls	r3, r3, #8
 800d040:	b29b      	uxth	r3, r3
 800d042:	430b      	orrs	r3, r1
 800d044:	83fb      	strh	r3, [r7, #30]

                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 800d046:	8bfb      	ldrh	r3, [r7, #30]
 800d048:	f642 1202 	movw	r2, #10498	@ 0x2902
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d163      	bne.n	800d118 <Event_Handler+0x660>
                {
                  APP_DBG_MSG("-- GATT : CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID- index: %d\n", index);
 800d050:	483e      	ldr	r0, [pc, #248]	@ (800d14c <Event_Handler+0x694>)
 800d052:	f7fe fd31 	bl	800bab8 <DbgTraceGetFileName>
 800d056:	4601      	mov	r1, r0
 800d058:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d05c:	4a3c      	ldr	r2, [pc, #240]	@ (800d150 <Event_Handler+0x698>)
 800d05e:	483d      	ldr	r0, [pc, #244]	@ (800d154 <Event_Handler+0x69c>)
 800d060:	f001 fd52 	bl	800eb08 <iprintf>
 800d064:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800d068:	4619      	mov	r1, r3
 800d06a:	483f      	ldr	r0, [pc, #252]	@ (800d168 <Event_Handler+0x6b0>)
 800d06c:	f001 fd4c 	bl	800eb08 <iprintf>

                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 800d070:	f897 2088 	ldrb.w	r2, [r7, #136]	@ 0x88
 800d074:	4939      	ldr	r1, [pc, #228]	@ (800d15c <Event_Handler+0x6a4>)
 800d076:	4613      	mov	r3, r2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	4413      	add	r3, r2
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	440b      	add	r3, r1
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	2b0a      	cmp	r3, #10
 800d084:	d148      	bne.n	800d118 <Event_Handler+0x660>
                  {

                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 800d086:	f897 2088 	ldrb.w	r2, [r7, #136]	@ 0x88
 800d08a:	4934      	ldr	r1, [pc, #208]	@ (800d15c <Event_Handler+0x6a4>)
 800d08c:	4613      	mov	r3, r2
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	4413      	add	r3, r2
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	440b      	add	r3, r1
 800d096:	330e      	adds	r3, #14
 800d098:	8c3a      	ldrh	r2, [r7, #32]
 800d09a:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 800d09c:	f897 2088 	ldrb.w	r2, [r7, #136]	@ 0x88
 800d0a0:	492e      	ldr	r1, [pc, #184]	@ (800d15c <Event_Handler+0x6a4>)
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	4413      	add	r3, r2
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	440b      	add	r3, r1
 800d0ac:	220b      	movs	r2, #11
 800d0ae:	701a      	strb	r2, [r3, #0]

                    uint8_t enable_notification[] = {0x01, 0x00};
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	81bb      	strh	r3, [r7, #12]
                    tBleStatus status = aci_gatt_write_char_desc(
 800d0b4:	f897 2088 	ldrb.w	r2, [r7, #136]	@ 0x88
 800d0b8:	4928      	ldr	r1, [pc, #160]	@ (800d15c <Event_Handler+0x6a4>)
 800d0ba:	4613      	mov	r3, r2
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	4413      	add	r3, r2
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	440b      	add	r3, r1
 800d0c4:	3302      	adds	r3, #2
 800d0c6:	8818      	ldrh	r0, [r3, #0]
 800d0c8:	f107 030c 	add.w	r3, r7, #12
 800d0cc:	8c39      	ldrh	r1, [r7, #32]
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	f7fd fbcf 	bl	800a872 <aci_gatt_write_char_desc>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	777b      	strb	r3, [r7, #29]
                        handle,
                        2,
                        enable_notification
                    );

                    if (status == BLE_STATUS_SUCCESS)
 800d0d8:	7f7b      	ldrb	r3, [r7, #29]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d10d      	bne.n	800d0fa <Event_Handler+0x642>
                    {
                        APP_DBG_MSG("-- GATT: CSC Measurement Notification Enabled!\n\r");
 800d0de:	481b      	ldr	r0, [pc, #108]	@ (800d14c <Event_Handler+0x694>)
 800d0e0:	f7fe fcea 	bl	800bab8 <DbgTraceGetFileName>
 800d0e4:	4601      	mov	r1, r0
 800d0e6:	f44f 73de 	mov.w	r3, #444	@ 0x1bc
 800d0ea:	4a19      	ldr	r2, [pc, #100]	@ (800d150 <Event_Handler+0x698>)
 800d0ec:	4819      	ldr	r0, [pc, #100]	@ (800d154 <Event_Handler+0x69c>)
 800d0ee:	f001 fd0b 	bl	800eb08 <iprintf>
 800d0f2:	481e      	ldr	r0, [pc, #120]	@ (800d16c <Event_Handler+0x6b4>)
 800d0f4:	f001 fd08 	bl	800eb08 <iprintf>
 800d0f8:	e00e      	b.n	800d118 <Event_Handler+0x660>
                    }
                    else
                    {
                        APP_DBG_MSG("-- GATT: Failed to Enable Notification: 0x%02X\n\r", status);
 800d0fa:	4814      	ldr	r0, [pc, #80]	@ (800d14c <Event_Handler+0x694>)
 800d0fc:	f7fe fcdc 	bl	800bab8 <DbgTraceGetFileName>
 800d100:	4601      	mov	r1, r0
 800d102:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800d106:	4a12      	ldr	r2, [pc, #72]	@ (800d150 <Event_Handler+0x698>)
 800d108:	4812      	ldr	r0, [pc, #72]	@ (800d154 <Event_Handler+0x69c>)
 800d10a:	f001 fcfd 	bl	800eb08 <iprintf>
 800d10e:	7f7b      	ldrb	r3, [r7, #29]
 800d110:	4619      	mov	r1, r3
 800d112:	4817      	ldr	r0, [pc, #92]	@ (800d170 <Event_Handler+0x6b8>)
 800d114:	f001 fcf8 	bl	800eb08 <iprintf>
                    }
                  }
                }
                idx += 4;
 800d118:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 800d11c:	3304      	adds	r3, #4
 800d11e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
              for (i=0; i<numDesc; i++)
 800d122:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800d126:	3301      	adds	r3, #1
 800d128:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800d12c:	f897 2089 	ldrb.w	r2, [r7, #137]	@ 0x89
 800d130:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d134:	429a      	cmp	r2, r3
 800d136:	f4ff af62 	bcc.w	800cffe <Event_Handler+0x546>
              }
            }
          }
        }
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 800d13a:	e2f9      	b.n	800d730 <Event_Handler+0xc78>

        case ACI_GATT_NOTIFICATION_VSEVT_CODE:
        {
			aci_gatt_notification_event_rp0 *pr = (void*)blecore_evt->data;
 800d13c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d13e:	3302      	adds	r3, #2
 800d140:	66bb      	str	r3, [r7, #104]	@ 0x68
			uint8_t index;

			index = 0;
 800d142:	2300      	movs	r3, #0
 800d144:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d148:	e019      	b.n	800d17e <Event_Handler+0x6c6>
 800d14a:	bf00      	nop
 800d14c:	0801165c 	.word	0x0801165c
 800d150:	08011e48 	.word	0x08011e48
 800d154:	08011680 	.word	0x08011680
 800d158:	08011824 	.word	0x08011824
 800d15c:	20000c88 	.word	0x20000c88
 800d160:	0801185c 	.word	0x0801185c
 800d164:	0801188c 	.word	0x0801188c
 800d168:	080118c8 	.word	0x080118c8
 800d16c:	08011904 	.word	0x08011904
 800d170:	08011938 	.word	0x08011938
				  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
			index++;
 800d174:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d178:	3301      	adds	r3, #1
 800d17a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d17e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d182:	2b09      	cmp	r3, #9
 800d184:	d80e      	bhi.n	800d1a4 <Event_Handler+0x6ec>
				  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d186:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800d18a:	49bd      	ldr	r1, [pc, #756]	@ (800d480 <Event_Handler+0x9c8>)
 800d18c:	4613      	mov	r3, r2
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	4413      	add	r3, r2
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	440b      	add	r3, r1
 800d196:	3302      	adds	r3, #2
 800d198:	881a      	ldrh	r2, [r3, #0]
 800d19a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d19c:	881b      	ldrh	r3, [r3, #0]
 800d19e:	b29b      	uxth	r3, r3
			while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d1e7      	bne.n	800d174 <Event_Handler+0x6bc>

			if(index >= BLE_CFG_CLT_MAX_NBR_CB) break;
 800d1a4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d1a8:	2b09      	cmp	r3, #9
 800d1aa:	f200 82c3 	bhi.w	800d734 <Event_Handler+0xc7c>

            // APP_DBG_MSG("-- GATT : ACI_GATT_NOTIFICATION_VSEVT_CODE - index: %d, Length: %d\n", index, pr->Attribute_Value_Length);

			// 受信データの Attribute Handle でどのキャラクタリスティックか判別
	        if (pr->Attribute_Handle == aP2PClientContext[index].CSC_Handle) // CSC Measurement (Speed & Cadence)
 800d1ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d1b0:	885b      	ldrh	r3, [r3, #2]
 800d1b2:	b299      	uxth	r1, r3
 800d1b4:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800d1b8:	48b1      	ldr	r0, [pc, #708]	@ (800d480 <Event_Handler+0x9c8>)
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	4413      	add	r3, r2
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	4403      	add	r3, r0
 800d1c4:	3310      	adds	r3, #16
 800d1c6:	881b      	ldrh	r3, [r3, #0]
 800d1c8:	4299      	cmp	r1, r3
 800d1ca:	f040 80e0 	bne.w	800d38e <Event_Handler+0x8d6>
	        {
				uint8_t flags = pr->Attribute_Value[0];
 800d1ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d1d0:	795b      	ldrb	r3, [r3, #5]
 800d1d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				uint8_t offset = 1;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

				if (flags & 0x01)  // Bit 0: Wheel Revolution Data Present
 800d1dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d1e0:	f003 0301 	and.w	r3, r3, #1
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f000 80d2 	beq.w	800d38e <Event_Handler+0x8d6>
				{
					// Cumulative Wheel Revolutions (4バイト)
					uint32_t wheelRevolutions = (pr->Attribute_Value[offset] |
 800d1ea:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800d1ee:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d1f0:	4413      	add	r3, r2
 800d1f2:	795b      	ldrb	r3, [r3, #5]
 800d1f4:	4619      	mov	r1, r3
										(pr->Attribute_Value[offset + 1] << 8) |
 800d1f6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d1fe:	4413      	add	r3, r2
 800d200:	795b      	ldrb	r3, [r3, #5]
 800d202:	021b      	lsls	r3, r3, #8
					uint32_t wheelRevolutions = (pr->Attribute_Value[offset] |
 800d204:	ea41 0203 	orr.w	r2, r1, r3
										(pr->Attribute_Value[offset + 2] << 16) |
 800d208:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800d20c:	3302      	adds	r3, #2
 800d20e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d210:	440b      	add	r3, r1
 800d212:	795b      	ldrb	r3, [r3, #5]
 800d214:	041b      	lsls	r3, r3, #16
										(pr->Attribute_Value[offset + 1] << 8) |
 800d216:	431a      	orrs	r2, r3
										(pr->Attribute_Value[offset + 3] << 24));
 800d218:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800d21c:	3303      	adds	r3, #3
 800d21e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d220:	440b      	add	r3, r1
 800d222:	795b      	ldrb	r3, [r3, #5]
 800d224:	061b      	lsls	r3, r3, #24
										(pr->Attribute_Value[offset + 2] << 16) |
 800d226:	4313      	orrs	r3, r2
					uint32_t wheelRevolutions = (pr->Attribute_Value[offset] |
 800d228:	663b      	str	r3, [r7, #96]	@ 0x60
					offset += 4;
 800d22a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800d22e:	3304      	adds	r3, #4
 800d230:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

					// Last Wheel Event Time (2バイト)
					uint16_t wheelEventTime = (pr->Attribute_Value[offset] |
 800d234:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800d238:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d23a:	4413      	add	r3, r2
 800d23c:	795b      	ldrb	r3, [r3, #5]
 800d23e:	b21a      	sxth	r2, r3
									  (pr->Attribute_Value[offset + 1] << 8));
 800d240:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800d244:	3301      	adds	r3, #1
 800d246:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d248:	440b      	add	r3, r1
 800d24a:	795b      	ldrb	r3, [r3, #5]
 800d24c:	021b      	lsls	r3, r3, #8
					uint16_t wheelEventTime = (pr->Attribute_Value[offset] |
 800d24e:	b21b      	sxth	r3, r3
 800d250:	4313      	orrs	r3, r2
 800d252:	b21b      	sxth	r3, r3
 800d254:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
					offset += 2;
 800d258:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800d25c:	3302      	adds	r3, #2
 800d25e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

					uint32_t wheelRevDiff = wheelRevolutions - prevWheelRevolutions;
 800d262:	4b88      	ldr	r3, [pc, #544]	@ (800d484 <Event_Handler+0x9cc>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d268:	1ad3      	subs	r3, r2, r3
 800d26a:	65bb      	str	r3, [r7, #88]	@ 0x58
					uint16_t timeDiff = (wheelEventTime >= prevWheelEventTime) ?
										 (wheelEventTime - prevWheelEventTime) :
 800d26c:	4b86      	ldr	r3, [pc, #536]	@ (800d488 <Event_Handler+0x9d0>)
 800d26e:	881b      	ldrh	r3, [r3, #0]
					uint16_t timeDiff = (wheelEventTime >= prevWheelEventTime) ?
 800d270:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800d274:	1ad3      	subs	r3, r2, r3
 800d276:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
										 ((65536 + wheelEventTime) - prevWheelEventTime); // 16bit のオーバーフロー対応

					float timeSeconds = timeDiff / 1024.0;  // CSC は 1/1024 秒単位
 800d27a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d27e:	4618      	mov	r0, r3
 800d280:	f7f3 f938 	bl	80004f4 <__aeabi_i2d>
 800d284:	f04f 0200 	mov.w	r2, #0
 800d288:	4b80      	ldr	r3, [pc, #512]	@ (800d48c <Event_Handler+0x9d4>)
 800d28a:	f7f3 fac7 	bl	800081c <__aeabi_ddiv>
 800d28e:	4602      	mov	r2, r0
 800d290:	460b      	mov	r3, r1
 800d292:	4610      	mov	r0, r2
 800d294:	4619      	mov	r1, r3
 800d296:	f7f3 fc6f 	bl	8000b78 <__aeabi_d2f>
 800d29a:	4603      	mov	r3, r0
 800d29c:	653b      	str	r3, [r7, #80]	@ 0x50
					float speed_mps = (wheelRevDiff * WHEEL_CIRCUMFERENCE) / timeSeconds;
 800d29e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d2a0:	f7f3 f918 	bl	80004d4 <__aeabi_ui2d>
 800d2a4:	a372      	add	r3, pc, #456	@ (adr r3, 800d470 <Event_Handler+0x9b8>)
 800d2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2aa:	f7f3 f98d 	bl	80005c8 <__aeabi_dmul>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	4614      	mov	r4, r2
 800d2b4:	461d      	mov	r5, r3
 800d2b6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d2b8:	f7f3 f92e 	bl	8000518 <__aeabi_f2d>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	460b      	mov	r3, r1
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	4629      	mov	r1, r5
 800d2c4:	f7f3 faaa 	bl	800081c <__aeabi_ddiv>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	460b      	mov	r3, r1
 800d2cc:	4610      	mov	r0, r2
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	f7f3 fc52 	bl	8000b78 <__aeabi_d2f>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
					float speed_kmh = speed_mps * 3.6;
 800d2d8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800d2da:	f7f3 f91d 	bl	8000518 <__aeabi_f2d>
 800d2de:	a366      	add	r3, pc, #408	@ (adr r3, 800d478 <Event_Handler+0x9c0>)
 800d2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e4:	f7f3 f970 	bl	80005c8 <__aeabi_dmul>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	4610      	mov	r0, r2
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	f7f3 fc42 	bl	8000b78 <__aeabi_d2f>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

					if (wheelRevDiff == 0) {
 800d2fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d106      	bne.n	800d30e <Event_Handler+0x856>
						prevZeroWheelRevCount++;
 800d300:	4b63      	ldr	r3, [pc, #396]	@ (800d490 <Event_Handler+0x9d8>)
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	3301      	adds	r3, #1
 800d306:	b2da      	uxtb	r2, r3
 800d308:	4b61      	ldr	r3, [pc, #388]	@ (800d490 <Event_Handler+0x9d8>)
 800d30a:	701a      	strb	r2, [r3, #0]
 800d30c:	e002      	b.n	800d314 <Event_Handler+0x85c>
					} else {
						prevZeroWheelRevCount = 0;
 800d30e:	4b60      	ldr	r3, [pc, #384]	@ (800d490 <Event_Handler+0x9d8>)
 800d310:	2200      	movs	r2, #0
 800d312:	701a      	strb	r2, [r3, #0]
					}

					if ((prevWheelRevolutions == 0 && prevWheelEventTime == 0) || prevZeroWheelRevCount > WHEEL_ZERO_COUNT) {
 800d314:	4b5b      	ldr	r3, [pc, #364]	@ (800d484 <Event_Handler+0x9cc>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d103      	bne.n	800d324 <Event_Handler+0x86c>
 800d31c:	4b5a      	ldr	r3, [pc, #360]	@ (800d488 <Event_Handler+0x9d0>)
 800d31e:	881b      	ldrh	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d003      	beq.n	800d32c <Event_Handler+0x874>
 800d324:	4b5a      	ldr	r3, [pc, #360]	@ (800d490 <Event_Handler+0x9d8>)
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	2b02      	cmp	r3, #2
 800d32a:	d904      	bls.n	800d336 <Event_Handler+0x87e>
						// APP_DBG_MSG("0 km/h");
						speed_kmh = 0.0;
 800d32c:	f04f 0300 	mov.w	r3, #0
 800d330:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d334:	e00a      	b.n	800d34c <Event_Handler+0x894>
					} else if (0 < prevZeroWheelRevCount && prevZeroWheelRevCount <= WHEEL_ZERO_COUNT) {
 800d336:	4b56      	ldr	r3, [pc, #344]	@ (800d490 <Event_Handler+0x9d8>)
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d006      	beq.n	800d34c <Event_Handler+0x894>
 800d33e:	4b54      	ldr	r3, [pc, #336]	@ (800d490 <Event_Handler+0x9d8>)
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	2b02      	cmp	r3, #2
 800d344:	d802      	bhi.n	800d34c <Event_Handler+0x894>
						// APP_DBG_MSG("ignore");
						speed_kmh = -1.0;
 800d346:	4b53      	ldr	r3, [pc, #332]	@ (800d494 <Event_Handler+0x9dc>)
 800d348:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					}

					if (speed_kmh >= 0) {
 800d34c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800d350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d358:	db12      	blt.n	800d380 <Event_Handler+0x8c8>
						APP_DBG_MSG("Speed: %.2f km/h", speed_kmh);
 800d35a:	484f      	ldr	r0, [pc, #316]	@ (800d498 <Event_Handler+0x9e0>)
 800d35c:	f7fe fbac 	bl	800bab8 <DbgTraceGetFileName>
 800d360:	4601      	mov	r1, r0
 800d362:	f240 2305 	movw	r3, #517	@ 0x205
 800d366:	4a4d      	ldr	r2, [pc, #308]	@ (800d49c <Event_Handler+0x9e4>)
 800d368:	484d      	ldr	r0, [pc, #308]	@ (800d4a0 <Event_Handler+0x9e8>)
 800d36a:	f001 fbcd 	bl	800eb08 <iprintf>
 800d36e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800d372:	f7f3 f8d1 	bl	8000518 <__aeabi_f2d>
 800d376:	4602      	mov	r2, r0
 800d378:	460b      	mov	r3, r1
 800d37a:	484a      	ldr	r0, [pc, #296]	@ (800d4a4 <Event_Handler+0x9ec>)
 800d37c:	f001 fbc4 	bl	800eb08 <iprintf>
			//	        			APP_DBG_MSG("Speed: %.2f km/h, wheelRevolution=%u, prevWheelRevolutions=%u, wheelRevDiff=%u, wheelEventTime=%u, prevWheelEventTime=%u, timeDiff=%u, prevZeroWheelRevCount=%d\n",
			//	        					speed_kmh ,wheelRevolutions, prevWheelRevolutions, wheelRevDiff, wheelEventTime, prevWheelEventTime, timeDiff, prevZeroWheelRevCount);
					}

					// 現在のデータを保存
					prevWheelRevolutions = wheelRevolutions;
 800d380:	4a40      	ldr	r2, [pc, #256]	@ (800d484 <Event_Handler+0x9cc>)
 800d382:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d384:	6013      	str	r3, [r2, #0]
					prevWheelEventTime = wheelEventTime;
 800d386:	4a40      	ldr	r2, [pc, #256]	@ (800d488 <Event_Handler+0x9d0>)
 800d388:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800d38c:	8013      	strh	r3, [r2, #0]
				}
			}

	        if (pr->Attribute_Handle == aP2PClientContext[index].CPM_Handle) // Cycling Power Measurement
 800d38e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d390:	885b      	ldrh	r3, [r3, #2]
 800d392:	b299      	uxth	r1, r3
 800d394:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800d398:	4839      	ldr	r0, [pc, #228]	@ (800d480 <Event_Handler+0x9c8>)
 800d39a:	4613      	mov	r3, r2
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	4413      	add	r3, r2
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	4403      	add	r3, r0
 800d3a4:	3312      	adds	r3, #18
 800d3a6:	881b      	ldrh	r3, [r3, #0]
 800d3a8:	4299      	cmp	r1, r3
 800d3aa:	f040 81c5 	bne.w	800d738 <Event_Handler+0xc80>
			{
			    // **パワーの取得**
			    int16_t power = (int16_t)(pr->Attribute_Value[2] | (pr->Attribute_Value[3] << 8));
 800d3ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3b0:	79db      	ldrb	r3, [r3, #7]
 800d3b2:	b21a      	sxth	r2, r3
 800d3b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3b6:	7a1b      	ldrb	r3, [r3, #8]
 800d3b8:	021b      	lsls	r3, r3, #8
 800d3ba:	b21b      	sxth	r3, r3
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

				// **ケイデンスの取得**
				uint16_t cumulativeCrankRevolutions = pr->Attribute_Value[5] | (pr->Attribute_Value[6] << 8);
 800d3c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3c4:	7a9b      	ldrb	r3, [r3, #10]
 800d3c6:	b21a      	sxth	r2, r3
 800d3c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3ca:	7adb      	ldrb	r3, [r3, #11]
 800d3cc:	021b      	lsls	r3, r3, #8
 800d3ce:	b21b      	sxth	r3, r3
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	b21b      	sxth	r3, r3
 800d3d4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
				uint16_t lastCrankEventTime = pr->Attribute_Value[7] | (pr->Attribute_Value[8] << 8);
 800d3d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3da:	7b1b      	ldrb	r3, [r3, #12]
 800d3dc:	b21a      	sxth	r2, r3
 800d3de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3e0:	7b5b      	ldrb	r3, [r3, #13]
 800d3e2:	021b      	lsls	r3, r3, #8
 800d3e4:	b21b      	sxth	r3, r3
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	b21b      	sxth	r3, r3
 800d3ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
				uint16_t crankDiff = cumulativeCrankRevolutions - prevCrankRevolutions;
 800d3ee:	4b2e      	ldr	r3, [pc, #184]	@ (800d4a8 <Event_Handler+0x9f0>)
 800d3f0:	881b      	ldrh	r3, [r3, #0]
 800d3f2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800d3f6:	1ad3      	subs	r3, r2, r3
 800d3f8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
				uint16_t timeDiff = (lastCrankEventTime >= prevCrankEventTime) ?
									 (lastCrankEventTime - prevCrankEventTime) :
 800d3fc:	4b2b      	ldr	r3, [pc, #172]	@ (800d4ac <Event_Handler+0x9f4>)
 800d3fe:	881b      	ldrh	r3, [r3, #0]
				uint16_t timeDiff = (lastCrankEventTime >= prevCrankEventTime) ?
 800d400:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d404:	1ad3      	subs	r3, r2, r3
 800d406:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
									 ((65536 + lastCrankEventTime) - prevCrankEventTime); // 16bit のオーバーフロー対策
				float timeSeconds = timeDiff / 1024.0;  // 1/1024 秒単位
 800d40a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d40e:	4618      	mov	r0, r3
 800d410:	f7f3 f870 	bl	80004f4 <__aeabi_i2d>
 800d414:	f04f 0200 	mov.w	r2, #0
 800d418:	4b1c      	ldr	r3, [pc, #112]	@ (800d48c <Event_Handler+0x9d4>)
 800d41a:	f7f3 f9ff 	bl	800081c <__aeabi_ddiv>
 800d41e:	4602      	mov	r2, r0
 800d420:	460b      	mov	r3, r1
 800d422:	4610      	mov	r0, r2
 800d424:	4619      	mov	r1, r3
 800d426:	f7f3 fba7 	bl	8000b78 <__aeabi_d2f>
 800d42a:	4603      	mov	r3, r0
 800d42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
				int16_t cadence = (crankDiff / timeSeconds) * 60;  // 回転数/分 (RPM)
 800d42e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d432:	ee07 3a90 	vmov	s15, r3
 800d436:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d43a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800d43e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d442:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800d4b0 <Event_Handler+0x9f8>
 800d446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d44a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d44e:	ee17 3a90 	vmov	r3, s15
 800d452:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

				if (crankDiff == 0) {
 800d456:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d12c      	bne.n	800d4b8 <Event_Handler+0xa00>
					prevZeroCrankRevCount++;
 800d45e:	4b15      	ldr	r3, [pc, #84]	@ (800d4b4 <Event_Handler+0x9fc>)
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	3301      	adds	r3, #1
 800d464:	b2da      	uxtb	r2, r3
 800d466:	4b13      	ldr	r3, [pc, #76]	@ (800d4b4 <Event_Handler+0x9fc>)
 800d468:	701a      	strb	r2, [r3, #0]
 800d46a:	e028      	b.n	800d4be <Event_Handler+0xa06>
 800d46c:	f3af 8000 	nop.w
 800d470:	70a3d70a 	.word	0x70a3d70a
 800d474:	40010a3d 	.word	0x40010a3d
 800d478:	cccccccd 	.word	0xcccccccd
 800d47c:	400ccccc 	.word	0x400ccccc
 800d480:	20000c88 	.word	0x20000c88
 800d484:	20000c78 	.word	0x20000c78
 800d488:	20000c7c 	.word	0x20000c7c
 800d48c:	40900000 	.word	0x40900000
 800d490:	20000c7e 	.word	0x20000c7e
 800d494:	bf800000 	.word	0xbf800000
 800d498:	0801165c 	.word	0x0801165c
 800d49c:	08011e48 	.word	0x08011e48
 800d4a0:	08011680 	.word	0x08011680
 800d4a4:	0801196c 	.word	0x0801196c
 800d4a8:	20000c80 	.word	0x20000c80
 800d4ac:	20000c82 	.word	0x20000c82
 800d4b0:	42700000 	.word	0x42700000
 800d4b4:	20000c84 	.word	0x20000c84
				} else {
					prevZeroCrankRevCount = 0;
 800d4b8:	4ba5      	ldr	r3, [pc, #660]	@ (800d750 <Event_Handler+0xc98>)
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	701a      	strb	r2, [r3, #0]
				}

				if ((prevCrankRevolutions == 0 && prevCrankEventTime == 0) || prevZeroCrankRevCount > CRANK_ZERO_COUNT) {
 800d4be:	4ba5      	ldr	r3, [pc, #660]	@ (800d754 <Event_Handler+0xc9c>)
 800d4c0:	881b      	ldrh	r3, [r3, #0]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d103      	bne.n	800d4ce <Event_Handler+0xa16>
 800d4c6:	4ba4      	ldr	r3, [pc, #656]	@ (800d758 <Event_Handler+0xca0>)
 800d4c8:	881b      	ldrh	r3, [r3, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d003      	beq.n	800d4d6 <Event_Handler+0xa1e>
 800d4ce:	4ba0      	ldr	r3, [pc, #640]	@ (800d750 <Event_Handler+0xc98>)
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	2b02      	cmp	r3, #2
 800d4d4:	d903      	bls.n	800d4de <Event_Handler+0xa26>
					cadence = 0;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 800d4dc:	e00b      	b.n	800d4f6 <Event_Handler+0xa3e>
				} else if (0 < prevZeroCrankRevCount && prevZeroCrankRevCount <= CRANK_ZERO_COUNT) {
 800d4de:	4b9c      	ldr	r3, [pc, #624]	@ (800d750 <Event_Handler+0xc98>)
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d007      	beq.n	800d4f6 <Event_Handler+0xa3e>
 800d4e6:	4b9a      	ldr	r3, [pc, #616]	@ (800d750 <Event_Handler+0xc98>)
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	2b02      	cmp	r3, #2
 800d4ec:	d803      	bhi.n	800d4f6 <Event_Handler+0xa3e>
					cadence = -1;
 800d4ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d4f2:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
				}

				if (cadence >= 0) {
 800d4f6:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	db11      	blt.n	800d522 <Event_Handler+0xa6a>
					APP_DBG_MSG("Power: %d W, Cadence: %d rpm\n", power, cadence);
 800d4fe:	4897      	ldr	r0, [pc, #604]	@ (800d75c <Event_Handler+0xca4>)
 800d500:	f7fe fada 	bl	800bab8 <DbgTraceGetFileName>
 800d504:	4601      	mov	r1, r0
 800d506:	f44f 730b 	mov.w	r3, #556	@ 0x22c
 800d50a:	4a95      	ldr	r2, [pc, #596]	@ (800d760 <Event_Handler+0xca8>)
 800d50c:	4895      	ldr	r0, [pc, #596]	@ (800d764 <Event_Handler+0xcac>)
 800d50e:	f001 fafb 	bl	800eb08 <iprintf>
 800d512:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800d516:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	@ 0x7e
 800d51a:	4619      	mov	r1, r3
 800d51c:	4892      	ldr	r0, [pc, #584]	@ (800d768 <Event_Handler+0xcb0>)
 800d51e:	f001 faf3 	bl	800eb08 <iprintf>
//						pr->Attribute_Value[4],
//						pr->Attribute_Value[5], pr->Attribute_Value[6],
//						pr->Attribute_Value[7], pr->Attribute_Value[8]
//				);

				prevCrankRevolutions = cumulativeCrankRevolutions;
 800d522:	4a8c      	ldr	r2, [pc, #560]	@ (800d754 <Event_Handler+0xc9c>)
 800d524:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800d528:	8013      	strh	r3, [r2, #0]
				prevCrankEventTime = lastCrankEventTime;
 800d52a:	4a8b      	ldr	r2, [pc, #556]	@ (800d758 <Event_Handler+0xca0>)
 800d52c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d530:	8013      	strh	r3, [r2, #0]
			}
        }
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 800d532:	e101      	b.n	800d738 <Event_Handler+0xc80>

        case ACI_GATT_PROC_COMPLETE_VSEVT_CODE:
        {
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blecore_evt->data;
 800d534:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d536:	3302      	adds	r3, #2
 800d538:	673b      	str	r3, [r7, #112]	@ 0x70
#if(CFG_DEBUG_APP_TRACE != 0)
          APP_DBG_MSG("-- GATT : ACI_GATT_PROC_COMPLETE_VSEVT_CODE \n");
 800d53a:	4888      	ldr	r0, [pc, #544]	@ (800d75c <Event_Handler+0xca4>)
 800d53c:	f7fe fabc 	bl	800bab8 <DbgTraceGetFileName>
 800d540:	4601      	mov	r1, r0
 800d542:	f44f 7311 	mov.w	r3, #580	@ 0x244
 800d546:	4a86      	ldr	r2, [pc, #536]	@ (800d760 <Event_Handler+0xca8>)
 800d548:	4886      	ldr	r0, [pc, #536]	@ (800d764 <Event_Handler+0xcac>)
 800d54a:	f001 fadd 	bl	800eb08 <iprintf>
 800d54e:	4887      	ldr	r0, [pc, #540]	@ (800d76c <Event_Handler+0xcb4>)
 800d550:	f001 fb42 	bl	800ebd8 <puts>
#endif

          uint8_t index;

          index = 0;
 800d554:	2300      	movs	r3, #0
 800d556:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) && (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d55a:	e004      	b.n	800d566 <Event_Handler+0xaae>
          {
              index++;
 800d55c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800d560:	3301      	adds	r3, #1
 800d562:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) && (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d566:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800d56a:	2b09      	cmp	r3, #9
 800d56c:	d80e      	bhi.n	800d58c <Event_Handler+0xad4>
 800d56e:	f897 207d 	ldrb.w	r2, [r7, #125]	@ 0x7d
 800d572:	497f      	ldr	r1, [pc, #508]	@ (800d770 <Event_Handler+0xcb8>)
 800d574:	4613      	mov	r3, r2
 800d576:	009b      	lsls	r3, r3, #2
 800d578:	4413      	add	r3, r2
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	440b      	add	r3, r1
 800d57e:	3302      	adds	r3, #2
 800d580:	881a      	ldrh	r2, [r3, #0]
 800d582:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d584:	881b      	ldrh	r3, [r3, #0]
 800d586:	b29b      	uxth	r3, r3
 800d588:	429a      	cmp	r2, r3
 800d58a:	d1e7      	bne.n	800d55c <Event_Handler+0xaa4>
          }

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d58c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800d590:	2b09      	cmp	r3, #9
 800d592:	f200 80d3 	bhi.w	800d73c <Event_Handler+0xc84>
          {
			APP_DBG_MSG("-- GATT : ACI_GATT_PROC_COMPLETE_VSEVT_CODE (Service discovery complete) index: %d\n\r", index);
 800d596:	4871      	ldr	r0, [pc, #452]	@ (800d75c <Event_Handler+0xca4>)
 800d598:	f7fe fa8e 	bl	800bab8 <DbgTraceGetFileName>
 800d59c:	4601      	mov	r1, r0
 800d59e:	f240 2351 	movw	r3, #593	@ 0x251
 800d5a2:	4a6f      	ldr	r2, [pc, #444]	@ (800d760 <Event_Handler+0xca8>)
 800d5a4:	486f      	ldr	r0, [pc, #444]	@ (800d764 <Event_Handler+0xcac>)
 800d5a6:	f001 faaf 	bl	800eb08 <iprintf>
 800d5aa:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	4870      	ldr	r0, [pc, #448]	@ (800d774 <Event_Handler+0xcbc>)
 800d5b2:	f001 faa9 	bl	800eb08 <iprintf>

			if (aP2PClientContext[index].state == APP_BLE_DISCOVER_CHARACS)
 800d5b6:	f897 207d 	ldrb.w	r2, [r7, #125]	@ 0x7d
 800d5ba:	496d      	ldr	r1, [pc, #436]	@ (800d770 <Event_Handler+0xcb8>)
 800d5bc:	4613      	mov	r3, r2
 800d5be:	009b      	lsls	r3, r3, #2
 800d5c0:	4413      	add	r3, r2
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	440b      	add	r3, r1
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	2b08      	cmp	r3, #8
 800d5ca:	d145      	bne.n	800d658 <Event_Handler+0xba0>
			{
			  // サービスの探索が終わったら、キャラクタリスティックの探索を開始
			  tBleStatus status = aci_gatt_disc_all_char_of_service(
 800d5cc:	f897 207d 	ldrb.w	r2, [r7, #125]	@ 0x7d
 800d5d0:	4967      	ldr	r1, [pc, #412]	@ (800d770 <Event_Handler+0xcb8>)
 800d5d2:	4613      	mov	r3, r2
 800d5d4:	009b      	lsls	r3, r3, #2
 800d5d6:	4413      	add	r3, r2
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	440b      	add	r3, r1
 800d5dc:	3302      	adds	r3, #2
 800d5de:	8818      	ldrh	r0, [r3, #0]
 800d5e0:	f897 207d 	ldrb.w	r2, [r7, #125]	@ 0x7d
 800d5e4:	4962      	ldr	r1, [pc, #392]	@ (800d770 <Event_Handler+0xcb8>)
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	4413      	add	r3, r2
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	440b      	add	r3, r1
 800d5f0:	3304      	adds	r3, #4
 800d5f2:	8819      	ldrh	r1, [r3, #0]
 800d5f4:	f897 207d 	ldrb.w	r2, [r7, #125]	@ 0x7d
 800d5f8:	4c5d      	ldr	r4, [pc, #372]	@ (800d770 <Event_Handler+0xcb8>)
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	4413      	add	r3, r2
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	4423      	add	r3, r4
 800d604:	3306      	adds	r3, #6
 800d606:	881b      	ldrh	r3, [r3, #0]
 800d608:	461a      	mov	r2, r3
 800d60a:	f7fd f830 	bl	800a66e <aci_gatt_disc_all_char_of_service>
 800d60e:	4603      	mov	r3, r0
 800d610:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				  aP2PClientContext[index].connHandle,
				  aP2PClientContext[index].P2PServiceHandle,
				  aP2PClientContext[index].P2PServiceEndHandle);

			  if (status == BLE_STATUS_SUCCESS)
 800d614:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d10d      	bne.n	800d638 <Event_Handler+0xb80>
			  {
				  APP_DBG_MSG("-- GATT : Start discovering characteristics\n\r");
 800d61c:	484f      	ldr	r0, [pc, #316]	@ (800d75c <Event_Handler+0xca4>)
 800d61e:	f7fe fa4b 	bl	800bab8 <DbgTraceGetFileName>
 800d622:	4601      	mov	r1, r0
 800d624:	f240 235d 	movw	r3, #605	@ 0x25d
 800d628:	4a4d      	ldr	r2, [pc, #308]	@ (800d760 <Event_Handler+0xca8>)
 800d62a:	484e      	ldr	r0, [pc, #312]	@ (800d764 <Event_Handler+0xcac>)
 800d62c:	f001 fa6c 	bl	800eb08 <iprintf>
 800d630:	4851      	ldr	r0, [pc, #324]	@ (800d778 <Event_Handler+0xcc0>)
 800d632:	f001 fa69 	bl	800eb08 <iprintf>
 800d636:	e00f      	b.n	800d658 <Event_Handler+0xba0>
			  }
			  else
			  {
				  APP_DBG_MSG("-- GATT : Failed to start characteristic discovery: 0x%02X\n\r", status);
 800d638:	4848      	ldr	r0, [pc, #288]	@ (800d75c <Event_Handler+0xca4>)
 800d63a:	f7fe fa3d 	bl	800bab8 <DbgTraceGetFileName>
 800d63e:	4601      	mov	r1, r0
 800d640:	f240 2361 	movw	r3, #609	@ 0x261
 800d644:	4a46      	ldr	r2, [pc, #280]	@ (800d760 <Event_Handler+0xca8>)
 800d646:	4847      	ldr	r0, [pc, #284]	@ (800d764 <Event_Handler+0xcac>)
 800d648:	f001 fa5e 	bl	800eb08 <iprintf>
 800d64c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d650:	4619      	mov	r1, r3
 800d652:	484a      	ldr	r0, [pc, #296]	@ (800d77c <Event_Handler+0xcc4>)
 800d654:	f001 fa58 	bl	800eb08 <iprintf>
			  }
			}

			if (aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 800d658:	f897 207d 	ldrb.w	r2, [r7, #125]	@ 0x7d
 800d65c:	4944      	ldr	r1, [pc, #272]	@ (800d770 <Event_Handler+0xcb8>)
 800d65e:	4613      	mov	r3, r2
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	4413      	add	r3, r2
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	440b      	add	r3, r1
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	2b0a      	cmp	r3, #10
 800d66c:	d166      	bne.n	800d73c <Event_Handler+0xc84>
			{
			  APP_DBG_MSG("-- GATT : APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC (Service discovery complete) index: %d\n\r", index);
 800d66e:	483b      	ldr	r0, [pc, #236]	@ (800d75c <Event_Handler+0xca4>)
 800d670:	f7fe fa22 	bl	800bab8 <DbgTraceGetFileName>
 800d674:	4601      	mov	r1, r0
 800d676:	f240 2367 	movw	r3, #615	@ 0x267
 800d67a:	4a39      	ldr	r2, [pc, #228]	@ (800d760 <Event_Handler+0xca8>)
 800d67c:	4839      	ldr	r0, [pc, #228]	@ (800d764 <Event_Handler+0xcac>)
 800d67e:	f001 fa43 	bl	800eb08 <iprintf>
 800d682:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800d686:	4619      	mov	r1, r3
 800d688:	483d      	ldr	r0, [pc, #244]	@ (800d780 <Event_Handler+0xcc8>)
 800d68a:	f001 fa3d 	bl	800eb08 <iprintf>

			  tBleStatus status = aci_gatt_disc_all_char_desc(
 800d68e:	f897 207d 	ldrb.w	r2, [r7, #125]	@ 0x7d
 800d692:	4937      	ldr	r1, [pc, #220]	@ (800d770 <Event_Handler+0xcb8>)
 800d694:	4613      	mov	r3, r2
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	4413      	add	r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	440b      	add	r3, r1
 800d69e:	3302      	adds	r3, #2
 800d6a0:	8818      	ldrh	r0, [r3, #0]
 800d6a2:	f897 207d 	ldrb.w	r2, [r7, #125]	@ 0x7d
 800d6a6:	4932      	ldr	r1, [pc, #200]	@ (800d770 <Event_Handler+0xcb8>)
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	4413      	add	r3, r2
 800d6ae:	009b      	lsls	r3, r3, #2
 800d6b0:	440b      	add	r3, r1
 800d6b2:	330c      	adds	r3, #12
 800d6b4:	8819      	ldrh	r1, [r3, #0]
				  aP2PClientContext[index].connHandle,
				  aP2PClientContext[index].P2PNotificationCharHdle,
				  aP2PClientContext[index].P2PNotificationCharHdle+2);
 800d6b6:	f897 207d 	ldrb.w	r2, [r7, #125]	@ 0x7d
 800d6ba:	4c2d      	ldr	r4, [pc, #180]	@ (800d770 <Event_Handler+0xcb8>)
 800d6bc:	4613      	mov	r3, r2
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	4413      	add	r3, r2
 800d6c2:	009b      	lsls	r3, r3, #2
 800d6c4:	4423      	add	r3, r4
 800d6c6:	330c      	adds	r3, #12
 800d6c8:	881b      	ldrh	r3, [r3, #0]
			  tBleStatus status = aci_gatt_disc_all_char_desc(
 800d6ca:	3302      	adds	r3, #2
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	f7fd f84e 	bl	800a770 <aci_gatt_disc_all_char_desc>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

			  if (status == BLE_STATUS_SUCCESS)
 800d6da:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d10d      	bne.n	800d6fe <Event_Handler+0xc46>
			  {
				  APP_DBG_MSG("-- GATT: Start aci_gatt_disc_all_char_desc\n\r");
 800d6e2:	481e      	ldr	r0, [pc, #120]	@ (800d75c <Event_Handler+0xca4>)
 800d6e4:	f7fe f9e8 	bl	800bab8 <DbgTraceGetFileName>
 800d6e8:	4601      	mov	r1, r0
 800d6ea:	f44f 731c 	mov.w	r3, #624	@ 0x270
 800d6ee:	4a1c      	ldr	r2, [pc, #112]	@ (800d760 <Event_Handler+0xca8>)
 800d6f0:	481c      	ldr	r0, [pc, #112]	@ (800d764 <Event_Handler+0xcac>)
 800d6f2:	f001 fa09 	bl	800eb08 <iprintf>
 800d6f6:	4823      	ldr	r0, [pc, #140]	@ (800d784 <Event_Handler+0xccc>)
 800d6f8:	f001 fa06 	bl	800eb08 <iprintf>
				  APP_DBG_MSG("-- GATT: Failed to start aci_gatt_disc_all_char_desc: 0x%02X\n\r", status);
			  }
			}
          }
        }
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800d6fc:	e01e      	b.n	800d73c <Event_Handler+0xc84>
				  APP_DBG_MSG("-- GATT: Failed to start aci_gatt_disc_all_char_desc: 0x%02X\n\r", status);
 800d6fe:	4817      	ldr	r0, [pc, #92]	@ (800d75c <Event_Handler+0xca4>)
 800d700:	f7fe f9da 	bl	800bab8 <DbgTraceGetFileName>
 800d704:	4601      	mov	r1, r0
 800d706:	f44f 731d 	mov.w	r3, #628	@ 0x274
 800d70a:	4a15      	ldr	r2, [pc, #84]	@ (800d760 <Event_Handler+0xca8>)
 800d70c:	4815      	ldr	r0, [pc, #84]	@ (800d764 <Event_Handler+0xcac>)
 800d70e:	f001 f9fb 	bl	800eb08 <iprintf>
 800d712:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800d716:	4619      	mov	r1, r3
 800d718:	481b      	ldr	r0, [pc, #108]	@ (800d788 <Event_Handler+0xcd0>)
 800d71a:	f001 f9f5 	bl	800eb08 <iprintf>
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800d71e:	e00d      	b.n	800d73c <Event_Handler+0xc84>
        default:
          break;
 800d720:	bf00      	nop
 800d722:	e00e      	b.n	800d742 <Event_Handler+0xc8a>
        break;
 800d724:	bf00      	nop
 800d726:	e00c      	b.n	800d742 <Event_Handler+0xc8a>
              if (pr->Attribute_Data_Length != 6) break;
 800d728:	bf00      	nop
 800d72a:	e00a      	b.n	800d742 <Event_Handler+0xc8a>
        break;
 800d72c:	bf00      	nop
 800d72e:	e008      	b.n	800d742 <Event_Handler+0xc8a>
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 800d730:	bf00      	nop
 800d732:	e006      	b.n	800d742 <Event_Handler+0xc8a>
			if(index >= BLE_CFG_CLT_MAX_NBR_CB) break;
 800d734:	bf00      	nop
 800d736:	e004      	b.n	800d742 <Event_Handler+0xc8a>
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 800d738:	bf00      	nop
 800d73a:	e002      	b.n	800d742 <Event_Handler+0xc8a>
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800d73c:	bf00      	nop
      }
    }

    break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d73e:	e000      	b.n	800d742 <Event_Handler+0xc8a>

    default:
      break;
 800d740:	bf00      	nop
  }

  return(return_value);
 800d742:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 800d746:	4618      	mov	r0, r3
 800d748:	3790      	adds	r7, #144	@ 0x90
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bdb0      	pop	{r4, r5, r7, pc}
 800d74e:	bf00      	nop
 800d750:	20000c84 	.word	0x20000c84
 800d754:	20000c80 	.word	0x20000c80
 800d758:	20000c82 	.word	0x20000c82
 800d75c:	0801165c 	.word	0x0801165c
 800d760:	08011e48 	.word	0x08011e48
 800d764:	08011680 	.word	0x08011680
 800d768:	08011980 	.word	0x08011980
 800d76c:	080119a0 	.word	0x080119a0
 800d770:	20000c88 	.word	0x20000c88
 800d774:	080119d0 	.word	0x080119d0
 800d778:	08011a28 	.word	0x08011a28
 800d77c:	08011a58 	.word	0x08011a58
 800d780:	08011a98 	.word	0x08011a98
 800d784:	08011af4 	.word	0x08011af4
 800d788:	08011b24 	.word	0x08011b24

0800d78c <LL_PWR_EnableBootC2>:
{
 800d78c:	b480      	push	{r7}
 800d78e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d790:	4b05      	ldr	r3, [pc, #20]	@ (800d7a8 <LL_PWR_EnableBootC2+0x1c>)
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	4a04      	ldr	r2, [pc, #16]	@ (800d7a8 <LL_PWR_EnableBootC2+0x1c>)
 800d796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d79a:	60d3      	str	r3, [r2, #12]
}
 800d79c:	bf00      	nop
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	58000400 	.word	0x58000400

0800d7ac <LL_C2_EXTI_EnableEvent_32_63>:
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800d7b4:	4b06      	ldr	r3, [pc, #24]	@ (800d7d0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d7b6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800d7ba:	4905      	ldr	r1, [pc, #20]	@ (800d7d0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800d7c4:	bf00      	nop
 800d7c6:	370c      	adds	r7, #12
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr
 800d7d0:	58000800 	.word	0x58000800

0800d7d4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d7dc:	4b05      	ldr	r3, [pc, #20]	@ (800d7f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d7de:	6a1a      	ldr	r2, [r3, #32]
 800d7e0:	4904      	ldr	r1, [pc, #16]	@ (800d7f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	620b      	str	r3, [r1, #32]
}
 800d7e8:	bf00      	nop
 800d7ea:	370c      	adds	r7, #12
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr
 800d7f4:	58000800 	.word	0x58000800

0800d7f8 <LL_AHB3_GRP1_EnableClock>:
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b085      	sub	sp, #20
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d804:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d806:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4313      	orrs	r3, r2
 800d80e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d814:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4013      	ands	r3, r2
 800d81a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d81c:	68fb      	ldr	r3, [r7, #12]
}
 800d81e:	bf00      	nop
 800d820:	3714      	adds	r7, #20
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr

0800d82a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800d82a:	b480      	push	{r7}
 800d82c:	b085      	sub	sp, #20
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800d832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d836:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800d83a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4313      	orrs	r3, r2
 800d842:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800d846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d84a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4013      	ands	r3, r2
 800d852:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d854:	68fb      	ldr	r3, [r7, #12]
}
 800d856:	bf00      	nop
 800d858:	3714      	adds	r7, #20
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr

0800d862 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d862:	b480      	push	{r7}
 800d864:	b083      	sub	sp, #12
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	601a      	str	r2, [r3, #0]
}
 800d876:	bf00      	nop
 800d878:	370c      	adds	r7, #12
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr

0800d882 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d882:	b480      	push	{r7}
 800d884:	b083      	sub	sp, #12
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f043 0201 	orr.w	r2, r3, #1
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	601a      	str	r2, [r3, #0]
}
 800d896:	bf00      	nop
 800d898:	370c      	adds	r7, #12
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr

0800d8a2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d8a2:	b480      	push	{r7}
 800d8a4:	b083      	sub	sp, #12
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
 800d8aa:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	685a      	ldr	r2, [r3, #4]
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	041b      	lsls	r3, r3, #16
 800d8b4:	43db      	mvns	r3, r3
 800d8b6:	401a      	ands	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	605a      	str	r2, [r3, #4]
}
 800d8bc:	bf00      	nop
 800d8be:	370c      	adds	r7, #12
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr

0800d8c8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	685a      	ldr	r2, [r3, #4]
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	041b      	lsls	r3, r3, #16
 800d8da:	431a      	orrs	r2, r3
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	605a      	str	r2, [r3, #4]
}
 800d8e0:	bf00      	nop
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b083      	sub	sp, #12
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	685a      	ldr	r2, [r3, #4]
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	43db      	mvns	r3, r3
 800d8fe:	401a      	ands	r2, r3
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	605a      	str	r2, [r3, #4]
}
 800d904:	bf00      	nop
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	683a      	ldr	r2, [r7, #0]
 800d91e:	609a      	str	r2, [r3, #8]
}
 800d920:	bf00      	nop
 800d922:	370c      	adds	r7, #12
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b083      	sub	sp, #12
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	041a      	lsls	r2, r3, #16
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	609a      	str	r2, [r3, #8]
}
 800d93e:	bf00      	nop
 800d940:	370c      	adds	r7, #12
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d94a:	b480      	push	{r7}
 800d94c:	b083      	sub	sp, #12
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
 800d952:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	68da      	ldr	r2, [r3, #12]
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	4013      	ands	r3, r2
 800d95c:	683a      	ldr	r2, [r7, #0]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d101      	bne.n	800d966 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d962:	2301      	movs	r3, #1
 800d964:	e000      	b.n	800d968 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d966:	2300      	movs	r3, #0
}
 800d968:	4618      	mov	r0, r3
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr

0800d974 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	69da      	ldr	r2, [r3, #28]
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	4013      	ands	r3, r2
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d101      	bne.n	800d990 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d98c:	2301      	movs	r3, #1
 800d98e:	e000      	b.n	800d992 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d990:	2300      	movs	r3, #0
}
 800d992:	4618      	mov	r0, r3
 800d994:	370c      	adds	r7, #12
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr
	...

0800d9a0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d9a4:	2102      	movs	r1, #2
 800d9a6:	4818      	ldr	r0, [pc, #96]	@ (800da08 <HW_IPCC_Rx_Handler+0x68>)
 800d9a8:	f7ff ffe4 	bl	800d974 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d008      	beq.n	800d9c4 <HW_IPCC_Rx_Handler+0x24>
 800d9b2:	4b15      	ldr	r3, [pc, #84]	@ (800da08 <HW_IPCC_Rx_Handler+0x68>)
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	f003 0302 	and.w	r3, r3, #2
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d102      	bne.n	800d9c4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800d9be:	f000 f8d5 	bl	800db6c <HW_IPCC_SYS_EvtHandler>
 800d9c2:	e01e      	b.n	800da02 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d9c4:	2101      	movs	r1, #1
 800d9c6:	4810      	ldr	r0, [pc, #64]	@ (800da08 <HW_IPCC_Rx_Handler+0x68>)
 800d9c8:	f7ff ffd4 	bl	800d974 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d008      	beq.n	800d9e4 <HW_IPCC_Rx_Handler+0x44>
 800d9d2:	4b0d      	ldr	r3, [pc, #52]	@ (800da08 <HW_IPCC_Rx_Handler+0x68>)
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	f003 0301 	and.w	r3, r3, #1
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d102      	bne.n	800d9e4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800d9de:	f000 f889 	bl	800daf4 <HW_IPCC_BLE_EvtHandler>
 800d9e2:	e00e      	b.n	800da02 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d9e4:	2108      	movs	r1, #8
 800d9e6:	4808      	ldr	r0, [pc, #32]	@ (800da08 <HW_IPCC_Rx_Handler+0x68>)
 800d9e8:	f7ff ffc4 	bl	800d974 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d008      	beq.n	800da04 <HW_IPCC_Rx_Handler+0x64>
 800d9f2:	4b05      	ldr	r3, [pc, #20]	@ (800da08 <HW_IPCC_Rx_Handler+0x68>)
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	f003 0308 	and.w	r3, r3, #8
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d102      	bne.n	800da04 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d9fe:	f000 f901 	bl	800dc04 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800da02:	bf00      	nop
 800da04:	bf00      	nop
}
 800da06:	bd80      	pop	{r7, pc}
 800da08:	58000c00 	.word	0x58000c00

0800da0c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800da10:	2102      	movs	r1, #2
 800da12:	4818      	ldr	r0, [pc, #96]	@ (800da74 <HW_IPCC_Tx_Handler+0x68>)
 800da14:	f7ff ff99 	bl	800d94a <LL_C1_IPCC_IsActiveFlag_CHx>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d108      	bne.n	800da30 <HW_IPCC_Tx_Handler+0x24>
 800da1e:	4b15      	ldr	r3, [pc, #84]	@ (800da74 <HW_IPCC_Tx_Handler+0x68>)
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da26:	2b00      	cmp	r3, #0
 800da28:	d102      	bne.n	800da30 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800da2a:	f000 f893 	bl	800db54 <HW_IPCC_SYS_CmdEvtHandler>
 800da2e:	e01e      	b.n	800da6e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800da30:	2108      	movs	r1, #8
 800da32:	4810      	ldr	r0, [pc, #64]	@ (800da74 <HW_IPCC_Tx_Handler+0x68>)
 800da34:	f7ff ff89 	bl	800d94a <LL_C1_IPCC_IsActiveFlag_CHx>
 800da38:	4603      	mov	r3, r0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d108      	bne.n	800da50 <HW_IPCC_Tx_Handler+0x44>
 800da3e:	4b0d      	ldr	r3, [pc, #52]	@ (800da74 <HW_IPCC_Tx_Handler+0x68>)
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800da46:	2b00      	cmp	r3, #0
 800da48:	d102      	bne.n	800da50 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800da4a:	f000 f8bd 	bl	800dbc8 <HW_IPCC_MM_FreeBufHandler>
 800da4e:	e00e      	b.n	800da6e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800da50:	2120      	movs	r1, #32
 800da52:	4808      	ldr	r0, [pc, #32]	@ (800da74 <HW_IPCC_Tx_Handler+0x68>)
 800da54:	f7ff ff79 	bl	800d94a <LL_C1_IPCC_IsActiveFlag_CHx>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d108      	bne.n	800da70 <HW_IPCC_Tx_Handler+0x64>
 800da5e:	4b05      	ldr	r3, [pc, #20]	@ (800da74 <HW_IPCC_Tx_Handler+0x68>)
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800da66:	2b00      	cmp	r3, #0
 800da68:	d102      	bne.n	800da70 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800da6a:	f000 f84f 	bl	800db0c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800da6e:	bf00      	nop
 800da70:	bf00      	nop
}
 800da72:	bd80      	pop	{r7, pc}
 800da74:	58000c00 	.word	0x58000c00

0800da78 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800da7c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800da80:	f7ff fed3 	bl	800d82a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800da84:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800da88:	f7ff fea4 	bl	800d7d4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800da8c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800da90:	f7ff fe8c 	bl	800d7ac <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800da94:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800da96:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800da98:	f7ff fe78 	bl	800d78c <LL_PWR_EnableBootC2>

  return;
 800da9c:	bf00      	nop
}
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800daa4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800daa8:	f7ff fea6 	bl	800d7f8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800daac:	4806      	ldr	r0, [pc, #24]	@ (800dac8 <HW_IPCC_Init+0x28>)
 800daae:	f7ff fee8 	bl	800d882 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800dab2:	4805      	ldr	r0, [pc, #20]	@ (800dac8 <HW_IPCC_Init+0x28>)
 800dab4:	f7ff fed5 	bl	800d862 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800dab8:	202c      	movs	r0, #44	@ 0x2c
 800daba:	f7f6 fc3c 	bl	8004336 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800dabe:	202d      	movs	r0, #45	@ 0x2d
 800dac0:	f7f6 fc39 	bl	8004336 <HAL_NVIC_EnableIRQ>

  return;
 800dac4:	bf00      	nop
}
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	58000c00 	.word	0x58000c00

0800dacc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800dad0:	2101      	movs	r1, #1
 800dad2:	4802      	ldr	r0, [pc, #8]	@ (800dadc <HW_IPCC_BLE_Init+0x10>)
 800dad4:	f7ff ff0a 	bl	800d8ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800dad8:	bf00      	nop
}
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	58000c00 	.word	0x58000c00

0800dae0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800dae4:	2101      	movs	r1, #1
 800dae6:	4802      	ldr	r0, [pc, #8]	@ (800daf0 <HW_IPCC_BLE_SendCmd+0x10>)
 800dae8:	f7ff ff20 	bl	800d92c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800daec:	bf00      	nop
}
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	58000c00 	.word	0x58000c00

0800daf4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800daf8:	f7fd fe26 	bl	800b748 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800dafc:	2101      	movs	r1, #1
 800dafe:	4802      	ldr	r0, [pc, #8]	@ (800db08 <HW_IPCC_BLE_EvtHandler+0x14>)
 800db00:	f7ff ff06 	bl	800d910 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800db04:	bf00      	nop
}
 800db06:	bd80      	pop	{r7, pc}
 800db08:	58000c00 	.word	0x58000c00

0800db0c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800db10:	2120      	movs	r1, #32
 800db12:	4803      	ldr	r0, [pc, #12]	@ (800db20 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800db14:	f7ff fed8 	bl	800d8c8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800db18:	f7fd fe46 	bl	800b7a8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800db1c:	bf00      	nop
}
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	58000c00 	.word	0x58000c00

0800db24 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800db24:	b580      	push	{r7, lr}
 800db26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800db28:	2102      	movs	r1, #2
 800db2a:	4802      	ldr	r0, [pc, #8]	@ (800db34 <HW_IPCC_SYS_Init+0x10>)
 800db2c:	f7ff fede 	bl	800d8ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800db30:	bf00      	nop
}
 800db32:	bd80      	pop	{r7, pc}
 800db34:	58000c00 	.word	0x58000c00

0800db38 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800db3c:	2102      	movs	r1, #2
 800db3e:	4804      	ldr	r0, [pc, #16]	@ (800db50 <HW_IPCC_SYS_SendCmd+0x18>)
 800db40:	f7ff fef4 	bl	800d92c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800db44:	2102      	movs	r1, #2
 800db46:	4802      	ldr	r0, [pc, #8]	@ (800db50 <HW_IPCC_SYS_SendCmd+0x18>)
 800db48:	f7ff feab 	bl	800d8a2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800db4c:	bf00      	nop
}
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	58000c00 	.word	0x58000c00

0800db54 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800db54:	b580      	push	{r7, lr}
 800db56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800db58:	2102      	movs	r1, #2
 800db5a:	4803      	ldr	r0, [pc, #12]	@ (800db68 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800db5c:	f7ff feb4 	bl	800d8c8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800db60:	f7fd fe72 	bl	800b848 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800db64:	bf00      	nop
}
 800db66:	bd80      	pop	{r7, pc}
 800db68:	58000c00 	.word	0x58000c00

0800db6c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800db70:	f7fd fe80 	bl	800b874 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800db74:	2102      	movs	r1, #2
 800db76:	4802      	ldr	r0, [pc, #8]	@ (800db80 <HW_IPCC_SYS_EvtHandler+0x14>)
 800db78:	f7ff feca 	bl	800d910 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800db7c:	bf00      	nop
}
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	58000c00 	.word	0x58000c00

0800db84 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800db8c:	2108      	movs	r1, #8
 800db8e:	480c      	ldr	r0, [pc, #48]	@ (800dbc0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800db90:	f7ff fedb 	bl	800d94a <LL_C1_IPCC_IsActiveFlag_CHx>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d007      	beq.n	800dbaa <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800db9a:	4a0a      	ldr	r2, [pc, #40]	@ (800dbc4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dba0:	2108      	movs	r1, #8
 800dba2:	4807      	ldr	r0, [pc, #28]	@ (800dbc0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800dba4:	f7ff fe7d 	bl	800d8a2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800dba8:	e006      	b.n	800dbb8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dbae:	2108      	movs	r1, #8
 800dbb0:	4803      	ldr	r0, [pc, #12]	@ (800dbc0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800dbb2:	f7ff febb 	bl	800d92c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800dbb6:	bf00      	nop
}
 800dbb8:	3708      	adds	r7, #8
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	58000c00 	.word	0x58000c00
 800dbc4:	20000d50 	.word	0x20000d50

0800dbc8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dbcc:	2108      	movs	r1, #8
 800dbce:	4806      	ldr	r0, [pc, #24]	@ (800dbe8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800dbd0:	f7ff fe7a 	bl	800d8c8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800dbd4:	4b05      	ldr	r3, [pc, #20]	@ (800dbec <HW_IPCC_MM_FreeBufHandler+0x24>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dbda:	2108      	movs	r1, #8
 800dbdc:	4802      	ldr	r0, [pc, #8]	@ (800dbe8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800dbde:	f7ff fea5 	bl	800d92c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800dbe2:	bf00      	nop
}
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	58000c00 	.word	0x58000c00
 800dbec:	20000d50 	.word	0x20000d50

0800dbf0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800dbf4:	2108      	movs	r1, #8
 800dbf6:	4802      	ldr	r0, [pc, #8]	@ (800dc00 <HW_IPCC_TRACES_Init+0x10>)
 800dbf8:	f7ff fe78 	bl	800d8ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800dbfc:	bf00      	nop
}
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	58000c00 	.word	0x58000c00

0800dc04 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800dc08:	f7fd fedc 	bl	800b9c4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800dc0c:	2108      	movs	r1, #8
 800dc0e:	4802      	ldr	r0, [pc, #8]	@ (800dc18 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800dc10:	f7ff fe7e 	bl	800d910 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800dc14:	bf00      	nop
}
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	58000c00 	.word	0x58000c00

0800dc1c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800dc20:	4b05      	ldr	r3, [pc, #20]	@ (800dc38 <UTIL_LPM_Init+0x1c>)
 800dc22:	2200      	movs	r2, #0
 800dc24:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800dc26:	4b05      	ldr	r3, [pc, #20]	@ (800dc3c <UTIL_LPM_Init+0x20>)
 800dc28:	2200      	movs	r2, #0
 800dc2a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800dc2c:	bf00      	nop
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	20000d54 	.word	0x20000d54
 800dc3c:	20000d58 	.word	0x20000d58

0800dc40 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800dc40:	b480      	push	{r7}
 800dc42:	b087      	sub	sp, #28
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	460b      	mov	r3, r1
 800dc4a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc4c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc50:	613b      	str	r3, [r7, #16]
  return(result);
 800dc52:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800dc54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc56:	b672      	cpsid	i
}
 800dc58:	bf00      	nop
  
  switch(state)
 800dc5a:	78fb      	ldrb	r3, [r7, #3]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d008      	beq.n	800dc72 <UTIL_LPM_SetOffMode+0x32>
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d10e      	bne.n	800dc82 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800dc64:	4b0d      	ldr	r3, [pc, #52]	@ (800dc9c <UTIL_LPM_SetOffMode+0x5c>)
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	4313      	orrs	r3, r2
 800dc6c:	4a0b      	ldr	r2, [pc, #44]	@ (800dc9c <UTIL_LPM_SetOffMode+0x5c>)
 800dc6e:	6013      	str	r3, [r2, #0]
      break;
 800dc70:	e008      	b.n	800dc84 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	43da      	mvns	r2, r3
 800dc76:	4b09      	ldr	r3, [pc, #36]	@ (800dc9c <UTIL_LPM_SetOffMode+0x5c>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4013      	ands	r3, r2
 800dc7c:	4a07      	ldr	r2, [pc, #28]	@ (800dc9c <UTIL_LPM_SetOffMode+0x5c>)
 800dc7e:	6013      	str	r3, [r2, #0]
      break;
 800dc80:	e000      	b.n	800dc84 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800dc82:	bf00      	nop
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f383 8810 	msr	PRIMASK, r3
}
 800dc8e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800dc90:	bf00      	nop
 800dc92:	371c      	adds	r7, #28
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr
 800dc9c:	20000d58 	.word	0x20000d58

0800dca0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b090      	sub	sp, #64	@ 0x40
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800dca8:	4b73      	ldr	r3, [pc, #460]	@ (800de78 <UTIL_SEQ_Run+0x1d8>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800dcae:	4b72      	ldr	r3, [pc, #456]	@ (800de78 <UTIL_SEQ_Run+0x1d8>)
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	4013      	ands	r3, r2
 800dcb6:	4a70      	ldr	r2, [pc, #448]	@ (800de78 <UTIL_SEQ_Run+0x1d8>)
 800dcb8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800dcba:	4b70      	ldr	r3, [pc, #448]	@ (800de7c <UTIL_SEQ_Run+0x1dc>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800dcc0:	4b6f      	ldr	r3, [pc, #444]	@ (800de80 <UTIL_SEQ_Run+0x1e0>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800dcc6:	4b6f      	ldr	r3, [pc, #444]	@ (800de84 <UTIL_SEQ_Run+0x1e4>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800dccc:	4b6e      	ldr	r3, [pc, #440]	@ (800de88 <UTIL_SEQ_Run+0x1e8>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800dcd2:	e08d      	b.n	800ddf0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800dcd8:	e002      	b.n	800dce0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800dcda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcdc:	3301      	adds	r3, #1
 800dcde:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800dce0:	4a6a      	ldr	r2, [pc, #424]	@ (800de8c <UTIL_SEQ_Run+0x1ec>)
 800dce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dce4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800dce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcea:	401a      	ands	r2, r3
 800dcec:	4b62      	ldr	r3, [pc, #392]	@ (800de78 <UTIL_SEQ_Run+0x1d8>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4013      	ands	r3, r2
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d0f1      	beq.n	800dcda <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800dcf6:	4a65      	ldr	r2, [pc, #404]	@ (800de8c <UTIL_SEQ_Run+0x1ec>)
 800dcf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcfa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800dcfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd00:	401a      	ands	r2, r3
 800dd02:	4b5d      	ldr	r3, [pc, #372]	@ (800de78 <UTIL_SEQ_Run+0x1d8>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4013      	ands	r3, r2
 800dd08:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800dd0a:	4a60      	ldr	r2, [pc, #384]	@ (800de8c <UTIL_SEQ_Run+0x1ec>)
 800dd0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd0e:	00db      	lsls	r3, r3, #3
 800dd10:	4413      	add	r3, r2
 800dd12:	685a      	ldr	r2, [r3, #4]
 800dd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd16:	4013      	ands	r3, r2
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d106      	bne.n	800dd2a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800dd1c:	4a5b      	ldr	r2, [pc, #364]	@ (800de8c <UTIL_SEQ_Run+0x1ec>)
 800dd1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd20:	00db      	lsls	r3, r3, #3
 800dd22:	4413      	add	r3, r2
 800dd24:	f04f 32ff 	mov.w	r2, #4294967295
 800dd28:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800dd2a:	4a58      	ldr	r2, [pc, #352]	@ (800de8c <UTIL_SEQ_Run+0x1ec>)
 800dd2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd2e:	00db      	lsls	r3, r3, #3
 800dd30:	4413      	add	r3, r2
 800dd32:	685a      	ldr	r2, [r3, #4]
 800dd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd36:	4013      	ands	r3, r2
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f000 f9b3 	bl	800e0a4 <SEQ_BitPosition>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	461a      	mov	r2, r3
 800dd42:	4b53      	ldr	r3, [pc, #332]	@ (800de90 <UTIL_SEQ_Run+0x1f0>)
 800dd44:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800dd46:	4a51      	ldr	r2, [pc, #324]	@ (800de8c <UTIL_SEQ_Run+0x1ec>)
 800dd48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd4a:	00db      	lsls	r3, r3, #3
 800dd4c:	4413      	add	r3, r2
 800dd4e:	685a      	ldr	r2, [r3, #4]
 800dd50:	4b4f      	ldr	r3, [pc, #316]	@ (800de90 <UTIL_SEQ_Run+0x1f0>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2101      	movs	r1, #1
 800dd56:	fa01 f303 	lsl.w	r3, r1, r3
 800dd5a:	43db      	mvns	r3, r3
 800dd5c:	401a      	ands	r2, r3
 800dd5e:	494b      	ldr	r1, [pc, #300]	@ (800de8c <UTIL_SEQ_Run+0x1ec>)
 800dd60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd62:	00db      	lsls	r3, r3, #3
 800dd64:	440b      	add	r3, r1
 800dd66:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd68:	f3ef 8310 	mrs	r3, PRIMASK
 800dd6c:	61bb      	str	r3, [r7, #24]
  return(result);
 800dd6e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dd70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800dd72:	b672      	cpsid	i
}
 800dd74:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800dd76:	4b46      	ldr	r3, [pc, #280]	@ (800de90 <UTIL_SEQ_Run+0x1f0>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	fa02 f303 	lsl.w	r3, r2, r3
 800dd80:	43da      	mvns	r2, r3
 800dd82:	4b3e      	ldr	r3, [pc, #248]	@ (800de7c <UTIL_SEQ_Run+0x1dc>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4013      	ands	r3, r2
 800dd88:	4a3c      	ldr	r2, [pc, #240]	@ (800de7c <UTIL_SEQ_Run+0x1dc>)
 800dd8a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd90:	e013      	b.n	800ddba <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800dd92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd94:	3b01      	subs	r3, #1
 800dd96:	4a3d      	ldr	r2, [pc, #244]	@ (800de8c <UTIL_SEQ_Run+0x1ec>)
 800dd98:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800dd9c:	4b3c      	ldr	r3, [pc, #240]	@ (800de90 <UTIL_SEQ_Run+0x1f0>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	2201      	movs	r2, #1
 800dda2:	fa02 f303 	lsl.w	r3, r2, r3
 800dda6:	43da      	mvns	r2, r3
 800dda8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddaa:	3b01      	subs	r3, #1
 800ddac:	400a      	ands	r2, r1
 800ddae:	4937      	ldr	r1, [pc, #220]	@ (800de8c <UTIL_SEQ_Run+0x1ec>)
 800ddb0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800ddb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddb6:	3b01      	subs	r3, #1
 800ddb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ddba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d1e8      	bne.n	800dd92 <UTIL_SEQ_Run+0xf2>
 800ddc0:	6a3b      	ldr	r3, [r7, #32]
 800ddc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	f383 8810 	msr	PRIMASK, r3
}
 800ddca:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800ddcc:	4b30      	ldr	r3, [pc, #192]	@ (800de90 <UTIL_SEQ_Run+0x1f0>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4a30      	ldr	r2, [pc, #192]	@ (800de94 <UTIL_SEQ_Run+0x1f4>)
 800ddd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddd6:	4798      	blx	r3

    local_taskset = TaskSet;
 800ddd8:	4b28      	ldr	r3, [pc, #160]	@ (800de7c <UTIL_SEQ_Run+0x1dc>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800ddde:	4b28      	ldr	r3, [pc, #160]	@ (800de80 <UTIL_SEQ_Run+0x1e0>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800dde4:	4b27      	ldr	r3, [pc, #156]	@ (800de84 <UTIL_SEQ_Run+0x1e4>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800ddea:	4b27      	ldr	r3, [pc, #156]	@ (800de88 <UTIL_SEQ_Run+0x1e8>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800ddf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ddf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf4:	401a      	ands	r2, r3
 800ddf6:	4b20      	ldr	r3, [pc, #128]	@ (800de78 <UTIL_SEQ_Run+0x1d8>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4013      	ands	r3, r2
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d005      	beq.n	800de0c <UTIL_SEQ_Run+0x16c>
 800de00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de04:	4013      	ands	r3, r2
 800de06:	2b00      	cmp	r3, #0
 800de08:	f43f af64 	beq.w	800dcd4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800de0c:	4b20      	ldr	r3, [pc, #128]	@ (800de90 <UTIL_SEQ_Run+0x1f0>)
 800de0e:	f04f 32ff 	mov.w	r2, #4294967295
 800de12:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800de14:	f000 f938 	bl	800e088 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de18:	f3ef 8310 	mrs	r3, PRIMASK
 800de1c:	613b      	str	r3, [r7, #16]
  return(result);
 800de1e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800de20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800de22:	b672      	cpsid	i
}
 800de24:	bf00      	nop
  local_taskset = TaskSet;
 800de26:	4b15      	ldr	r3, [pc, #84]	@ (800de7c <UTIL_SEQ_Run+0x1dc>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800de2c:	4b14      	ldr	r3, [pc, #80]	@ (800de80 <UTIL_SEQ_Run+0x1e0>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800de32:	4b14      	ldr	r3, [pc, #80]	@ (800de84 <UTIL_SEQ_Run+0x1e4>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800de38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de3c:	401a      	ands	r2, r3
 800de3e:	4b0e      	ldr	r3, [pc, #56]	@ (800de78 <UTIL_SEQ_Run+0x1d8>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4013      	ands	r3, r2
 800de44:	2b00      	cmp	r3, #0
 800de46:	d107      	bne.n	800de58 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800de48:	4b0f      	ldr	r3, [pc, #60]	@ (800de88 <UTIL_SEQ_Run+0x1e8>)
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de4e:	4013      	ands	r3, r2
 800de50:	2b00      	cmp	r3, #0
 800de52:	d101      	bne.n	800de58 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800de54:	f7f3 fbcc 	bl	80015f0 <UTIL_SEQ_Idle>
 800de58:	69fb      	ldr	r3, [r7, #28]
 800de5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f383 8810 	msr	PRIMASK, r3
}
 800de62:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800de64:	f000 f917 	bl	800e096 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800de68:	4a03      	ldr	r2, [pc, #12]	@ (800de78 <UTIL_SEQ_Run+0x1d8>)
 800de6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de6c:	6013      	str	r3, [r2, #0]

  return;
 800de6e:	bf00      	nop
}
 800de70:	3740      	adds	r7, #64	@ 0x40
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	20000018 	.word	0x20000018
 800de7c:	20000d5c 	.word	0x20000d5c
 800de80:	20000d60 	.word	0x20000d60
 800de84:	20000014 	.word	0x20000014
 800de88:	20000d64 	.word	0x20000d64
 800de8c:	20000dec 	.word	0x20000dec
 800de90:	20000d68 	.word	0x20000d68
 800de94:	20000d6c 	.word	0x20000d6c

0800de98 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b088      	sub	sp, #32
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dea4:	f3ef 8310 	mrs	r3, PRIMASK
 800dea8:	617b      	str	r3, [r7, #20]
  return(result);
 800deaa:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800deac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800deae:	b672      	cpsid	i
}
 800deb0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f000 f8f6 	bl	800e0a4 <SEQ_BitPosition>
 800deb8:	4603      	mov	r3, r0
 800deba:	4619      	mov	r1, r3
 800debc:	4a06      	ldr	r2, [pc, #24]	@ (800ded8 <UTIL_SEQ_RegTask+0x40>)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dec8:	69bb      	ldr	r3, [r7, #24]
 800deca:	f383 8810 	msr	PRIMASK, r3
}
 800dece:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800ded0:	bf00      	nop
}
 800ded2:	3720      	adds	r7, #32
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	20000d6c 	.word	0x20000d6c

0800dedc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800dedc:	b480      	push	{r7}
 800dede:	b087      	sub	sp, #28
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dee6:	f3ef 8310 	mrs	r3, PRIMASK
 800deea:	60fb      	str	r3, [r7, #12]
  return(result);
 800deec:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800deee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800def0:	b672      	cpsid	i
}
 800def2:	bf00      	nop

  TaskSet |= TaskId_bm;
 800def4:	4b0d      	ldr	r3, [pc, #52]	@ (800df2c <UTIL_SEQ_SetTask+0x50>)
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	4313      	orrs	r3, r2
 800defc:	4a0b      	ldr	r2, [pc, #44]	@ (800df2c <UTIL_SEQ_SetTask+0x50>)
 800defe:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800df00:	4a0b      	ldr	r2, [pc, #44]	@ (800df30 <UTIL_SEQ_SetTask+0x54>)
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	431a      	orrs	r2, r3
 800df0c:	4908      	ldr	r1, [pc, #32]	@ (800df30 <UTIL_SEQ_SetTask+0x54>)
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	f383 8810 	msr	PRIMASK, r3
}
 800df1e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800df20:	bf00      	nop
}
 800df22:	371c      	adds	r7, #28
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr
 800df2c:	20000d5c 	.word	0x20000d5c
 800df30:	20000dec 	.word	0x20000dec

0800df34 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800df34:	b480      	push	{r7}
 800df36:	b087      	sub	sp, #28
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df3c:	f3ef 8310 	mrs	r3, PRIMASK
 800df40:	60fb      	str	r3, [r7, #12]
  return(result);
 800df42:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800df44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800df46:	b672      	cpsid	i
}
 800df48:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	43da      	mvns	r2, r3
 800df4e:	4b08      	ldr	r3, [pc, #32]	@ (800df70 <UTIL_SEQ_PauseTask+0x3c>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4013      	ands	r3, r2
 800df54:	4a06      	ldr	r2, [pc, #24]	@ (800df70 <UTIL_SEQ_PauseTask+0x3c>)
 800df56:	6013      	str	r3, [r2, #0]
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	f383 8810 	msr	PRIMASK, r3
}
 800df62:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800df64:	bf00      	nop
}
 800df66:	371c      	adds	r7, #28
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr
 800df70:	20000014 	.word	0x20000014

0800df74 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800df74:	b480      	push	{r7}
 800df76:	b087      	sub	sp, #28
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df7c:	f3ef 8310 	mrs	r3, PRIMASK
 800df80:	60fb      	str	r3, [r7, #12]
  return(result);
 800df82:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800df84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800df86:	b672      	cpsid	i
}
 800df88:	bf00      	nop

  TaskMask |= TaskId_bm;
 800df8a:	4b09      	ldr	r3, [pc, #36]	@ (800dfb0 <UTIL_SEQ_ResumeTask+0x3c>)
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	4313      	orrs	r3, r2
 800df92:	4a07      	ldr	r2, [pc, #28]	@ (800dfb0 <UTIL_SEQ_ResumeTask+0x3c>)
 800df94:	6013      	str	r3, [r2, #0]
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	f383 8810 	msr	PRIMASK, r3
}
 800dfa0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dfa2:	bf00      	nop
}
 800dfa4:	371c      	adds	r7, #28
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr
 800dfae:	bf00      	nop
 800dfb0:	20000014 	.word	0x20000014

0800dfb4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b087      	sub	sp, #28
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfbc:	f3ef 8310 	mrs	r3, PRIMASK
 800dfc0:	60fb      	str	r3, [r7, #12]
  return(result);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dfc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dfc6:	b672      	cpsid	i
}
 800dfc8:	bf00      	nop

  EvtSet |= EvtId_bm;
 800dfca:	4b09      	ldr	r3, [pc, #36]	@ (800dff0 <UTIL_SEQ_SetEvt+0x3c>)
 800dfcc:	681a      	ldr	r2, [r3, #0]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	4a07      	ldr	r2, [pc, #28]	@ (800dff0 <UTIL_SEQ_SetEvt+0x3c>)
 800dfd4:	6013      	str	r3, [r2, #0]
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	f383 8810 	msr	PRIMASK, r3
}
 800dfe0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dfe2:	bf00      	nop
}
 800dfe4:	371c      	adds	r7, #28
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	20000d60 	.word	0x20000d60

0800dff4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b088      	sub	sp, #32
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800dffc:	4b1f      	ldr	r3, [pc, #124]	@ (800e07c <UTIL_SEQ_WaitEvt+0x88>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800e002:	4b1e      	ldr	r3, [pc, #120]	@ (800e07c <UTIL_SEQ_WaitEvt+0x88>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e00a:	d102      	bne.n	800e012 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800e00c:	2300      	movs	r3, #0
 800e00e:	61fb      	str	r3, [r7, #28]
 800e010:	e005      	b.n	800e01e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800e012:	4b1a      	ldr	r3, [pc, #104]	@ (800e07c <UTIL_SEQ_WaitEvt+0x88>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2201      	movs	r2, #1
 800e018:	fa02 f303 	lsl.w	r3, r2, r3
 800e01c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800e01e:	4b18      	ldr	r3, [pc, #96]	@ (800e080 <UTIL_SEQ_WaitEvt+0x8c>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800e024:	4a16      	ldr	r2, [pc, #88]	@ (800e080 <UTIL_SEQ_WaitEvt+0x8c>)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800e02a:	e003      	b.n	800e034 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800e02c:	6879      	ldr	r1, [r7, #4]
 800e02e:	69f8      	ldr	r0, [r7, #28]
 800e030:	f7f3 fae5 	bl	80015fe <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800e034:	4b13      	ldr	r3, [pc, #76]	@ (800e084 <UTIL_SEQ_WaitEvt+0x90>)
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	4013      	ands	r3, r2
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d0f5      	beq.n	800e02c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800e040:	4a0e      	ldr	r2, [pc, #56]	@ (800e07c <UTIL_SEQ_WaitEvt+0x88>)
 800e042:	69bb      	ldr	r3, [r7, #24]
 800e044:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e046:	f3ef 8310 	mrs	r3, PRIMASK
 800e04a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e04c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e04e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e050:	b672      	cpsid	i
}
 800e052:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	43da      	mvns	r2, r3
 800e058:	4b0a      	ldr	r3, [pc, #40]	@ (800e084 <UTIL_SEQ_WaitEvt+0x90>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4013      	ands	r3, r2
 800e05e:	4a09      	ldr	r2, [pc, #36]	@ (800e084 <UTIL_SEQ_WaitEvt+0x90>)
 800e060:	6013      	str	r3, [r2, #0]
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f383 8810 	msr	PRIMASK, r3
}
 800e06c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800e06e:	4a04      	ldr	r2, [pc, #16]	@ (800e080 <UTIL_SEQ_WaitEvt+0x8c>)
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	6013      	str	r3, [r2, #0]
  return;
 800e074:	bf00      	nop
}
 800e076:	3720      	adds	r7, #32
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	20000d68 	.word	0x20000d68
 800e080:	20000d64 	.word	0x20000d64
 800e084:	20000d60 	.word	0x20000d60

0800e088 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800e088:	b480      	push	{r7}
 800e08a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800e08c:	bf00      	nop
}
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr

0800e096 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800e096:	b480      	push	{r7}
 800e098:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800e09a:	bf00      	nop
}
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b085      	sub	sp, #20
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d101      	bne.n	800e0ba <SEQ_BitPosition+0x16>
    return 32U;
 800e0b6:	2320      	movs	r3, #32
 800e0b8:	e003      	b.n	800e0c2 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	fab3 f383 	clz	r3, r3
 800e0c0:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800e0c2:	f1c3 031f 	rsb	r3, r3, #31
 800e0c6:	b2db      	uxtb	r3, r3
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3714      	adds	r7, #20
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <__cvt>:
 800e0d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0d8:	ec57 6b10 	vmov	r6, r7, d0
 800e0dc:	2f00      	cmp	r7, #0
 800e0de:	460c      	mov	r4, r1
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	463b      	mov	r3, r7
 800e0e4:	bfbb      	ittet	lt
 800e0e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e0ea:	461f      	movlt	r7, r3
 800e0ec:	2300      	movge	r3, #0
 800e0ee:	232d      	movlt	r3, #45	@ 0x2d
 800e0f0:	700b      	strb	r3, [r1, #0]
 800e0f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e0f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e0f8:	4691      	mov	r9, r2
 800e0fa:	f023 0820 	bic.w	r8, r3, #32
 800e0fe:	bfbc      	itt	lt
 800e100:	4632      	movlt	r2, r6
 800e102:	4616      	movlt	r6, r2
 800e104:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e108:	d005      	beq.n	800e116 <__cvt+0x42>
 800e10a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e10e:	d100      	bne.n	800e112 <__cvt+0x3e>
 800e110:	3401      	adds	r4, #1
 800e112:	2102      	movs	r1, #2
 800e114:	e000      	b.n	800e118 <__cvt+0x44>
 800e116:	2103      	movs	r1, #3
 800e118:	ab03      	add	r3, sp, #12
 800e11a:	9301      	str	r3, [sp, #4]
 800e11c:	ab02      	add	r3, sp, #8
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	ec47 6b10 	vmov	d0, r6, r7
 800e124:	4653      	mov	r3, sl
 800e126:	4622      	mov	r2, r4
 800e128:	f000 ff72 	bl	800f010 <_dtoa_r>
 800e12c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e130:	4605      	mov	r5, r0
 800e132:	d119      	bne.n	800e168 <__cvt+0x94>
 800e134:	f019 0f01 	tst.w	r9, #1
 800e138:	d00e      	beq.n	800e158 <__cvt+0x84>
 800e13a:	eb00 0904 	add.w	r9, r0, r4
 800e13e:	2200      	movs	r2, #0
 800e140:	2300      	movs	r3, #0
 800e142:	4630      	mov	r0, r6
 800e144:	4639      	mov	r1, r7
 800e146:	f7f2 fca7 	bl	8000a98 <__aeabi_dcmpeq>
 800e14a:	b108      	cbz	r0, 800e150 <__cvt+0x7c>
 800e14c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e150:	2230      	movs	r2, #48	@ 0x30
 800e152:	9b03      	ldr	r3, [sp, #12]
 800e154:	454b      	cmp	r3, r9
 800e156:	d31e      	bcc.n	800e196 <__cvt+0xc2>
 800e158:	9b03      	ldr	r3, [sp, #12]
 800e15a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e15c:	1b5b      	subs	r3, r3, r5
 800e15e:	4628      	mov	r0, r5
 800e160:	6013      	str	r3, [r2, #0]
 800e162:	b004      	add	sp, #16
 800e164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e168:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e16c:	eb00 0904 	add.w	r9, r0, r4
 800e170:	d1e5      	bne.n	800e13e <__cvt+0x6a>
 800e172:	7803      	ldrb	r3, [r0, #0]
 800e174:	2b30      	cmp	r3, #48	@ 0x30
 800e176:	d10a      	bne.n	800e18e <__cvt+0xba>
 800e178:	2200      	movs	r2, #0
 800e17a:	2300      	movs	r3, #0
 800e17c:	4630      	mov	r0, r6
 800e17e:	4639      	mov	r1, r7
 800e180:	f7f2 fc8a 	bl	8000a98 <__aeabi_dcmpeq>
 800e184:	b918      	cbnz	r0, 800e18e <__cvt+0xba>
 800e186:	f1c4 0401 	rsb	r4, r4, #1
 800e18a:	f8ca 4000 	str.w	r4, [sl]
 800e18e:	f8da 3000 	ldr.w	r3, [sl]
 800e192:	4499      	add	r9, r3
 800e194:	e7d3      	b.n	800e13e <__cvt+0x6a>
 800e196:	1c59      	adds	r1, r3, #1
 800e198:	9103      	str	r1, [sp, #12]
 800e19a:	701a      	strb	r2, [r3, #0]
 800e19c:	e7d9      	b.n	800e152 <__cvt+0x7e>

0800e19e <__exponent>:
 800e19e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1a0:	2900      	cmp	r1, #0
 800e1a2:	bfba      	itte	lt
 800e1a4:	4249      	neglt	r1, r1
 800e1a6:	232d      	movlt	r3, #45	@ 0x2d
 800e1a8:	232b      	movge	r3, #43	@ 0x2b
 800e1aa:	2909      	cmp	r1, #9
 800e1ac:	7002      	strb	r2, [r0, #0]
 800e1ae:	7043      	strb	r3, [r0, #1]
 800e1b0:	dd29      	ble.n	800e206 <__exponent+0x68>
 800e1b2:	f10d 0307 	add.w	r3, sp, #7
 800e1b6:	461d      	mov	r5, r3
 800e1b8:	270a      	movs	r7, #10
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	fbb1 f6f7 	udiv	r6, r1, r7
 800e1c0:	fb07 1416 	mls	r4, r7, r6, r1
 800e1c4:	3430      	adds	r4, #48	@ 0x30
 800e1c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e1ca:	460c      	mov	r4, r1
 800e1cc:	2c63      	cmp	r4, #99	@ 0x63
 800e1ce:	f103 33ff 	add.w	r3, r3, #4294967295
 800e1d2:	4631      	mov	r1, r6
 800e1d4:	dcf1      	bgt.n	800e1ba <__exponent+0x1c>
 800e1d6:	3130      	adds	r1, #48	@ 0x30
 800e1d8:	1e94      	subs	r4, r2, #2
 800e1da:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e1de:	1c41      	adds	r1, r0, #1
 800e1e0:	4623      	mov	r3, r4
 800e1e2:	42ab      	cmp	r3, r5
 800e1e4:	d30a      	bcc.n	800e1fc <__exponent+0x5e>
 800e1e6:	f10d 0309 	add.w	r3, sp, #9
 800e1ea:	1a9b      	subs	r3, r3, r2
 800e1ec:	42ac      	cmp	r4, r5
 800e1ee:	bf88      	it	hi
 800e1f0:	2300      	movhi	r3, #0
 800e1f2:	3302      	adds	r3, #2
 800e1f4:	4403      	add	r3, r0
 800e1f6:	1a18      	subs	r0, r3, r0
 800e1f8:	b003      	add	sp, #12
 800e1fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e200:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e204:	e7ed      	b.n	800e1e2 <__exponent+0x44>
 800e206:	2330      	movs	r3, #48	@ 0x30
 800e208:	3130      	adds	r1, #48	@ 0x30
 800e20a:	7083      	strb	r3, [r0, #2]
 800e20c:	70c1      	strb	r1, [r0, #3]
 800e20e:	1d03      	adds	r3, r0, #4
 800e210:	e7f1      	b.n	800e1f6 <__exponent+0x58>
	...

0800e214 <_printf_float>:
 800e214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e218:	b08d      	sub	sp, #52	@ 0x34
 800e21a:	460c      	mov	r4, r1
 800e21c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e220:	4616      	mov	r6, r2
 800e222:	461f      	mov	r7, r3
 800e224:	4605      	mov	r5, r0
 800e226:	f000 fde5 	bl	800edf4 <_localeconv_r>
 800e22a:	6803      	ldr	r3, [r0, #0]
 800e22c:	9304      	str	r3, [sp, #16]
 800e22e:	4618      	mov	r0, r3
 800e230:	f7f2 f806 	bl	8000240 <strlen>
 800e234:	2300      	movs	r3, #0
 800e236:	930a      	str	r3, [sp, #40]	@ 0x28
 800e238:	f8d8 3000 	ldr.w	r3, [r8]
 800e23c:	9005      	str	r0, [sp, #20]
 800e23e:	3307      	adds	r3, #7
 800e240:	f023 0307 	bic.w	r3, r3, #7
 800e244:	f103 0208 	add.w	r2, r3, #8
 800e248:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e24c:	f8d4 b000 	ldr.w	fp, [r4]
 800e250:	f8c8 2000 	str.w	r2, [r8]
 800e254:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e258:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e25c:	9307      	str	r3, [sp, #28]
 800e25e:	f8cd 8018 	str.w	r8, [sp, #24]
 800e262:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e266:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e26a:	4b9c      	ldr	r3, [pc, #624]	@ (800e4dc <_printf_float+0x2c8>)
 800e26c:	f04f 32ff 	mov.w	r2, #4294967295
 800e270:	f7f2 fc44 	bl	8000afc <__aeabi_dcmpun>
 800e274:	bb70      	cbnz	r0, 800e2d4 <_printf_float+0xc0>
 800e276:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e27a:	4b98      	ldr	r3, [pc, #608]	@ (800e4dc <_printf_float+0x2c8>)
 800e27c:	f04f 32ff 	mov.w	r2, #4294967295
 800e280:	f7f2 fc1e 	bl	8000ac0 <__aeabi_dcmple>
 800e284:	bb30      	cbnz	r0, 800e2d4 <_printf_float+0xc0>
 800e286:	2200      	movs	r2, #0
 800e288:	2300      	movs	r3, #0
 800e28a:	4640      	mov	r0, r8
 800e28c:	4649      	mov	r1, r9
 800e28e:	f7f2 fc0d 	bl	8000aac <__aeabi_dcmplt>
 800e292:	b110      	cbz	r0, 800e29a <_printf_float+0x86>
 800e294:	232d      	movs	r3, #45	@ 0x2d
 800e296:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e29a:	4a91      	ldr	r2, [pc, #580]	@ (800e4e0 <_printf_float+0x2cc>)
 800e29c:	4b91      	ldr	r3, [pc, #580]	@ (800e4e4 <_printf_float+0x2d0>)
 800e29e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e2a2:	bf94      	ite	ls
 800e2a4:	4690      	movls	r8, r2
 800e2a6:	4698      	movhi	r8, r3
 800e2a8:	2303      	movs	r3, #3
 800e2aa:	6123      	str	r3, [r4, #16]
 800e2ac:	f02b 0304 	bic.w	r3, fp, #4
 800e2b0:	6023      	str	r3, [r4, #0]
 800e2b2:	f04f 0900 	mov.w	r9, #0
 800e2b6:	9700      	str	r7, [sp, #0]
 800e2b8:	4633      	mov	r3, r6
 800e2ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e2bc:	4621      	mov	r1, r4
 800e2be:	4628      	mov	r0, r5
 800e2c0:	f000 f9d2 	bl	800e668 <_printf_common>
 800e2c4:	3001      	adds	r0, #1
 800e2c6:	f040 808d 	bne.w	800e3e4 <_printf_float+0x1d0>
 800e2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ce:	b00d      	add	sp, #52	@ 0x34
 800e2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2d4:	4642      	mov	r2, r8
 800e2d6:	464b      	mov	r3, r9
 800e2d8:	4640      	mov	r0, r8
 800e2da:	4649      	mov	r1, r9
 800e2dc:	f7f2 fc0e 	bl	8000afc <__aeabi_dcmpun>
 800e2e0:	b140      	cbz	r0, 800e2f4 <_printf_float+0xe0>
 800e2e2:	464b      	mov	r3, r9
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	bfbc      	itt	lt
 800e2e8:	232d      	movlt	r3, #45	@ 0x2d
 800e2ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e2ee:	4a7e      	ldr	r2, [pc, #504]	@ (800e4e8 <_printf_float+0x2d4>)
 800e2f0:	4b7e      	ldr	r3, [pc, #504]	@ (800e4ec <_printf_float+0x2d8>)
 800e2f2:	e7d4      	b.n	800e29e <_printf_float+0x8a>
 800e2f4:	6863      	ldr	r3, [r4, #4]
 800e2f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e2fa:	9206      	str	r2, [sp, #24]
 800e2fc:	1c5a      	adds	r2, r3, #1
 800e2fe:	d13b      	bne.n	800e378 <_printf_float+0x164>
 800e300:	2306      	movs	r3, #6
 800e302:	6063      	str	r3, [r4, #4]
 800e304:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e308:	2300      	movs	r3, #0
 800e30a:	6022      	str	r2, [r4, #0]
 800e30c:	9303      	str	r3, [sp, #12]
 800e30e:	ab0a      	add	r3, sp, #40	@ 0x28
 800e310:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e314:	ab09      	add	r3, sp, #36	@ 0x24
 800e316:	9300      	str	r3, [sp, #0]
 800e318:	6861      	ldr	r1, [r4, #4]
 800e31a:	ec49 8b10 	vmov	d0, r8, r9
 800e31e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e322:	4628      	mov	r0, r5
 800e324:	f7ff fed6 	bl	800e0d4 <__cvt>
 800e328:	9b06      	ldr	r3, [sp, #24]
 800e32a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e32c:	2b47      	cmp	r3, #71	@ 0x47
 800e32e:	4680      	mov	r8, r0
 800e330:	d129      	bne.n	800e386 <_printf_float+0x172>
 800e332:	1cc8      	adds	r0, r1, #3
 800e334:	db02      	blt.n	800e33c <_printf_float+0x128>
 800e336:	6863      	ldr	r3, [r4, #4]
 800e338:	4299      	cmp	r1, r3
 800e33a:	dd41      	ble.n	800e3c0 <_printf_float+0x1ac>
 800e33c:	f1aa 0a02 	sub.w	sl, sl, #2
 800e340:	fa5f fa8a 	uxtb.w	sl, sl
 800e344:	3901      	subs	r1, #1
 800e346:	4652      	mov	r2, sl
 800e348:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e34c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e34e:	f7ff ff26 	bl	800e19e <__exponent>
 800e352:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e354:	1813      	adds	r3, r2, r0
 800e356:	2a01      	cmp	r2, #1
 800e358:	4681      	mov	r9, r0
 800e35a:	6123      	str	r3, [r4, #16]
 800e35c:	dc02      	bgt.n	800e364 <_printf_float+0x150>
 800e35e:	6822      	ldr	r2, [r4, #0]
 800e360:	07d2      	lsls	r2, r2, #31
 800e362:	d501      	bpl.n	800e368 <_printf_float+0x154>
 800e364:	3301      	adds	r3, #1
 800e366:	6123      	str	r3, [r4, #16]
 800e368:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d0a2      	beq.n	800e2b6 <_printf_float+0xa2>
 800e370:	232d      	movs	r3, #45	@ 0x2d
 800e372:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e376:	e79e      	b.n	800e2b6 <_printf_float+0xa2>
 800e378:	9a06      	ldr	r2, [sp, #24]
 800e37a:	2a47      	cmp	r2, #71	@ 0x47
 800e37c:	d1c2      	bne.n	800e304 <_printf_float+0xf0>
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d1c0      	bne.n	800e304 <_printf_float+0xf0>
 800e382:	2301      	movs	r3, #1
 800e384:	e7bd      	b.n	800e302 <_printf_float+0xee>
 800e386:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e38a:	d9db      	bls.n	800e344 <_printf_float+0x130>
 800e38c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e390:	d118      	bne.n	800e3c4 <_printf_float+0x1b0>
 800e392:	2900      	cmp	r1, #0
 800e394:	6863      	ldr	r3, [r4, #4]
 800e396:	dd0b      	ble.n	800e3b0 <_printf_float+0x19c>
 800e398:	6121      	str	r1, [r4, #16]
 800e39a:	b913      	cbnz	r3, 800e3a2 <_printf_float+0x18e>
 800e39c:	6822      	ldr	r2, [r4, #0]
 800e39e:	07d0      	lsls	r0, r2, #31
 800e3a0:	d502      	bpl.n	800e3a8 <_printf_float+0x194>
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	440b      	add	r3, r1
 800e3a6:	6123      	str	r3, [r4, #16]
 800e3a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e3aa:	f04f 0900 	mov.w	r9, #0
 800e3ae:	e7db      	b.n	800e368 <_printf_float+0x154>
 800e3b0:	b913      	cbnz	r3, 800e3b8 <_printf_float+0x1a4>
 800e3b2:	6822      	ldr	r2, [r4, #0]
 800e3b4:	07d2      	lsls	r2, r2, #31
 800e3b6:	d501      	bpl.n	800e3bc <_printf_float+0x1a8>
 800e3b8:	3302      	adds	r3, #2
 800e3ba:	e7f4      	b.n	800e3a6 <_printf_float+0x192>
 800e3bc:	2301      	movs	r3, #1
 800e3be:	e7f2      	b.n	800e3a6 <_printf_float+0x192>
 800e3c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e3c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3c6:	4299      	cmp	r1, r3
 800e3c8:	db05      	blt.n	800e3d6 <_printf_float+0x1c2>
 800e3ca:	6823      	ldr	r3, [r4, #0]
 800e3cc:	6121      	str	r1, [r4, #16]
 800e3ce:	07d8      	lsls	r0, r3, #31
 800e3d0:	d5ea      	bpl.n	800e3a8 <_printf_float+0x194>
 800e3d2:	1c4b      	adds	r3, r1, #1
 800e3d4:	e7e7      	b.n	800e3a6 <_printf_float+0x192>
 800e3d6:	2900      	cmp	r1, #0
 800e3d8:	bfd4      	ite	le
 800e3da:	f1c1 0202 	rsble	r2, r1, #2
 800e3de:	2201      	movgt	r2, #1
 800e3e0:	4413      	add	r3, r2
 800e3e2:	e7e0      	b.n	800e3a6 <_printf_float+0x192>
 800e3e4:	6823      	ldr	r3, [r4, #0]
 800e3e6:	055a      	lsls	r2, r3, #21
 800e3e8:	d407      	bmi.n	800e3fa <_printf_float+0x1e6>
 800e3ea:	6923      	ldr	r3, [r4, #16]
 800e3ec:	4642      	mov	r2, r8
 800e3ee:	4631      	mov	r1, r6
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	47b8      	blx	r7
 800e3f4:	3001      	adds	r0, #1
 800e3f6:	d12b      	bne.n	800e450 <_printf_float+0x23c>
 800e3f8:	e767      	b.n	800e2ca <_printf_float+0xb6>
 800e3fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e3fe:	f240 80dd 	bls.w	800e5bc <_printf_float+0x3a8>
 800e402:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e406:	2200      	movs	r2, #0
 800e408:	2300      	movs	r3, #0
 800e40a:	f7f2 fb45 	bl	8000a98 <__aeabi_dcmpeq>
 800e40e:	2800      	cmp	r0, #0
 800e410:	d033      	beq.n	800e47a <_printf_float+0x266>
 800e412:	4a37      	ldr	r2, [pc, #220]	@ (800e4f0 <_printf_float+0x2dc>)
 800e414:	2301      	movs	r3, #1
 800e416:	4631      	mov	r1, r6
 800e418:	4628      	mov	r0, r5
 800e41a:	47b8      	blx	r7
 800e41c:	3001      	adds	r0, #1
 800e41e:	f43f af54 	beq.w	800e2ca <_printf_float+0xb6>
 800e422:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e426:	4543      	cmp	r3, r8
 800e428:	db02      	blt.n	800e430 <_printf_float+0x21c>
 800e42a:	6823      	ldr	r3, [r4, #0]
 800e42c:	07d8      	lsls	r0, r3, #31
 800e42e:	d50f      	bpl.n	800e450 <_printf_float+0x23c>
 800e430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e434:	4631      	mov	r1, r6
 800e436:	4628      	mov	r0, r5
 800e438:	47b8      	blx	r7
 800e43a:	3001      	adds	r0, #1
 800e43c:	f43f af45 	beq.w	800e2ca <_printf_float+0xb6>
 800e440:	f04f 0900 	mov.w	r9, #0
 800e444:	f108 38ff 	add.w	r8, r8, #4294967295
 800e448:	f104 0a1a 	add.w	sl, r4, #26
 800e44c:	45c8      	cmp	r8, r9
 800e44e:	dc09      	bgt.n	800e464 <_printf_float+0x250>
 800e450:	6823      	ldr	r3, [r4, #0]
 800e452:	079b      	lsls	r3, r3, #30
 800e454:	f100 8103 	bmi.w	800e65e <_printf_float+0x44a>
 800e458:	68e0      	ldr	r0, [r4, #12]
 800e45a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e45c:	4298      	cmp	r0, r3
 800e45e:	bfb8      	it	lt
 800e460:	4618      	movlt	r0, r3
 800e462:	e734      	b.n	800e2ce <_printf_float+0xba>
 800e464:	2301      	movs	r3, #1
 800e466:	4652      	mov	r2, sl
 800e468:	4631      	mov	r1, r6
 800e46a:	4628      	mov	r0, r5
 800e46c:	47b8      	blx	r7
 800e46e:	3001      	adds	r0, #1
 800e470:	f43f af2b 	beq.w	800e2ca <_printf_float+0xb6>
 800e474:	f109 0901 	add.w	r9, r9, #1
 800e478:	e7e8      	b.n	800e44c <_printf_float+0x238>
 800e47a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	dc39      	bgt.n	800e4f4 <_printf_float+0x2e0>
 800e480:	4a1b      	ldr	r2, [pc, #108]	@ (800e4f0 <_printf_float+0x2dc>)
 800e482:	2301      	movs	r3, #1
 800e484:	4631      	mov	r1, r6
 800e486:	4628      	mov	r0, r5
 800e488:	47b8      	blx	r7
 800e48a:	3001      	adds	r0, #1
 800e48c:	f43f af1d 	beq.w	800e2ca <_printf_float+0xb6>
 800e490:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e494:	ea59 0303 	orrs.w	r3, r9, r3
 800e498:	d102      	bne.n	800e4a0 <_printf_float+0x28c>
 800e49a:	6823      	ldr	r3, [r4, #0]
 800e49c:	07d9      	lsls	r1, r3, #31
 800e49e:	d5d7      	bpl.n	800e450 <_printf_float+0x23c>
 800e4a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4a4:	4631      	mov	r1, r6
 800e4a6:	4628      	mov	r0, r5
 800e4a8:	47b8      	blx	r7
 800e4aa:	3001      	adds	r0, #1
 800e4ac:	f43f af0d 	beq.w	800e2ca <_printf_float+0xb6>
 800e4b0:	f04f 0a00 	mov.w	sl, #0
 800e4b4:	f104 0b1a 	add.w	fp, r4, #26
 800e4b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4ba:	425b      	negs	r3, r3
 800e4bc:	4553      	cmp	r3, sl
 800e4be:	dc01      	bgt.n	800e4c4 <_printf_float+0x2b0>
 800e4c0:	464b      	mov	r3, r9
 800e4c2:	e793      	b.n	800e3ec <_printf_float+0x1d8>
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	465a      	mov	r2, fp
 800e4c8:	4631      	mov	r1, r6
 800e4ca:	4628      	mov	r0, r5
 800e4cc:	47b8      	blx	r7
 800e4ce:	3001      	adds	r0, #1
 800e4d0:	f43f aefb 	beq.w	800e2ca <_printf_float+0xb6>
 800e4d4:	f10a 0a01 	add.w	sl, sl, #1
 800e4d8:	e7ee      	b.n	800e4b8 <_printf_float+0x2a4>
 800e4da:	bf00      	nop
 800e4dc:	7fefffff 	.word	0x7fefffff
 800e4e0:	08011e56 	.word	0x08011e56
 800e4e4:	08011e5a 	.word	0x08011e5a
 800e4e8:	08011e5e 	.word	0x08011e5e
 800e4ec:	08011e62 	.word	0x08011e62
 800e4f0:	08011e66 	.word	0x08011e66
 800e4f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e4f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e4fa:	4553      	cmp	r3, sl
 800e4fc:	bfa8      	it	ge
 800e4fe:	4653      	movge	r3, sl
 800e500:	2b00      	cmp	r3, #0
 800e502:	4699      	mov	r9, r3
 800e504:	dc36      	bgt.n	800e574 <_printf_float+0x360>
 800e506:	f04f 0b00 	mov.w	fp, #0
 800e50a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e50e:	f104 021a 	add.w	r2, r4, #26
 800e512:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e514:	9306      	str	r3, [sp, #24]
 800e516:	eba3 0309 	sub.w	r3, r3, r9
 800e51a:	455b      	cmp	r3, fp
 800e51c:	dc31      	bgt.n	800e582 <_printf_float+0x36e>
 800e51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e520:	459a      	cmp	sl, r3
 800e522:	dc3a      	bgt.n	800e59a <_printf_float+0x386>
 800e524:	6823      	ldr	r3, [r4, #0]
 800e526:	07da      	lsls	r2, r3, #31
 800e528:	d437      	bmi.n	800e59a <_printf_float+0x386>
 800e52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e52c:	ebaa 0903 	sub.w	r9, sl, r3
 800e530:	9b06      	ldr	r3, [sp, #24]
 800e532:	ebaa 0303 	sub.w	r3, sl, r3
 800e536:	4599      	cmp	r9, r3
 800e538:	bfa8      	it	ge
 800e53a:	4699      	movge	r9, r3
 800e53c:	f1b9 0f00 	cmp.w	r9, #0
 800e540:	dc33      	bgt.n	800e5aa <_printf_float+0x396>
 800e542:	f04f 0800 	mov.w	r8, #0
 800e546:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e54a:	f104 0b1a 	add.w	fp, r4, #26
 800e54e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e550:	ebaa 0303 	sub.w	r3, sl, r3
 800e554:	eba3 0309 	sub.w	r3, r3, r9
 800e558:	4543      	cmp	r3, r8
 800e55a:	f77f af79 	ble.w	800e450 <_printf_float+0x23c>
 800e55e:	2301      	movs	r3, #1
 800e560:	465a      	mov	r2, fp
 800e562:	4631      	mov	r1, r6
 800e564:	4628      	mov	r0, r5
 800e566:	47b8      	blx	r7
 800e568:	3001      	adds	r0, #1
 800e56a:	f43f aeae 	beq.w	800e2ca <_printf_float+0xb6>
 800e56e:	f108 0801 	add.w	r8, r8, #1
 800e572:	e7ec      	b.n	800e54e <_printf_float+0x33a>
 800e574:	4642      	mov	r2, r8
 800e576:	4631      	mov	r1, r6
 800e578:	4628      	mov	r0, r5
 800e57a:	47b8      	blx	r7
 800e57c:	3001      	adds	r0, #1
 800e57e:	d1c2      	bne.n	800e506 <_printf_float+0x2f2>
 800e580:	e6a3      	b.n	800e2ca <_printf_float+0xb6>
 800e582:	2301      	movs	r3, #1
 800e584:	4631      	mov	r1, r6
 800e586:	4628      	mov	r0, r5
 800e588:	9206      	str	r2, [sp, #24]
 800e58a:	47b8      	blx	r7
 800e58c:	3001      	adds	r0, #1
 800e58e:	f43f ae9c 	beq.w	800e2ca <_printf_float+0xb6>
 800e592:	9a06      	ldr	r2, [sp, #24]
 800e594:	f10b 0b01 	add.w	fp, fp, #1
 800e598:	e7bb      	b.n	800e512 <_printf_float+0x2fe>
 800e59a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e59e:	4631      	mov	r1, r6
 800e5a0:	4628      	mov	r0, r5
 800e5a2:	47b8      	blx	r7
 800e5a4:	3001      	adds	r0, #1
 800e5a6:	d1c0      	bne.n	800e52a <_printf_float+0x316>
 800e5a8:	e68f      	b.n	800e2ca <_printf_float+0xb6>
 800e5aa:	9a06      	ldr	r2, [sp, #24]
 800e5ac:	464b      	mov	r3, r9
 800e5ae:	4442      	add	r2, r8
 800e5b0:	4631      	mov	r1, r6
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	47b8      	blx	r7
 800e5b6:	3001      	adds	r0, #1
 800e5b8:	d1c3      	bne.n	800e542 <_printf_float+0x32e>
 800e5ba:	e686      	b.n	800e2ca <_printf_float+0xb6>
 800e5bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e5c0:	f1ba 0f01 	cmp.w	sl, #1
 800e5c4:	dc01      	bgt.n	800e5ca <_printf_float+0x3b6>
 800e5c6:	07db      	lsls	r3, r3, #31
 800e5c8:	d536      	bpl.n	800e638 <_printf_float+0x424>
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	4642      	mov	r2, r8
 800e5ce:	4631      	mov	r1, r6
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	47b8      	blx	r7
 800e5d4:	3001      	adds	r0, #1
 800e5d6:	f43f ae78 	beq.w	800e2ca <_printf_float+0xb6>
 800e5da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5de:	4631      	mov	r1, r6
 800e5e0:	4628      	mov	r0, r5
 800e5e2:	47b8      	blx	r7
 800e5e4:	3001      	adds	r0, #1
 800e5e6:	f43f ae70 	beq.w	800e2ca <_printf_float+0xb6>
 800e5ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e5f6:	f7f2 fa4f 	bl	8000a98 <__aeabi_dcmpeq>
 800e5fa:	b9c0      	cbnz	r0, 800e62e <_printf_float+0x41a>
 800e5fc:	4653      	mov	r3, sl
 800e5fe:	f108 0201 	add.w	r2, r8, #1
 800e602:	4631      	mov	r1, r6
 800e604:	4628      	mov	r0, r5
 800e606:	47b8      	blx	r7
 800e608:	3001      	adds	r0, #1
 800e60a:	d10c      	bne.n	800e626 <_printf_float+0x412>
 800e60c:	e65d      	b.n	800e2ca <_printf_float+0xb6>
 800e60e:	2301      	movs	r3, #1
 800e610:	465a      	mov	r2, fp
 800e612:	4631      	mov	r1, r6
 800e614:	4628      	mov	r0, r5
 800e616:	47b8      	blx	r7
 800e618:	3001      	adds	r0, #1
 800e61a:	f43f ae56 	beq.w	800e2ca <_printf_float+0xb6>
 800e61e:	f108 0801 	add.w	r8, r8, #1
 800e622:	45d0      	cmp	r8, sl
 800e624:	dbf3      	blt.n	800e60e <_printf_float+0x3fa>
 800e626:	464b      	mov	r3, r9
 800e628:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e62c:	e6df      	b.n	800e3ee <_printf_float+0x1da>
 800e62e:	f04f 0800 	mov.w	r8, #0
 800e632:	f104 0b1a 	add.w	fp, r4, #26
 800e636:	e7f4      	b.n	800e622 <_printf_float+0x40e>
 800e638:	2301      	movs	r3, #1
 800e63a:	4642      	mov	r2, r8
 800e63c:	e7e1      	b.n	800e602 <_printf_float+0x3ee>
 800e63e:	2301      	movs	r3, #1
 800e640:	464a      	mov	r2, r9
 800e642:	4631      	mov	r1, r6
 800e644:	4628      	mov	r0, r5
 800e646:	47b8      	blx	r7
 800e648:	3001      	adds	r0, #1
 800e64a:	f43f ae3e 	beq.w	800e2ca <_printf_float+0xb6>
 800e64e:	f108 0801 	add.w	r8, r8, #1
 800e652:	68e3      	ldr	r3, [r4, #12]
 800e654:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e656:	1a5b      	subs	r3, r3, r1
 800e658:	4543      	cmp	r3, r8
 800e65a:	dcf0      	bgt.n	800e63e <_printf_float+0x42a>
 800e65c:	e6fc      	b.n	800e458 <_printf_float+0x244>
 800e65e:	f04f 0800 	mov.w	r8, #0
 800e662:	f104 0919 	add.w	r9, r4, #25
 800e666:	e7f4      	b.n	800e652 <_printf_float+0x43e>

0800e668 <_printf_common>:
 800e668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e66c:	4616      	mov	r6, r2
 800e66e:	4698      	mov	r8, r3
 800e670:	688a      	ldr	r2, [r1, #8]
 800e672:	690b      	ldr	r3, [r1, #16]
 800e674:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e678:	4293      	cmp	r3, r2
 800e67a:	bfb8      	it	lt
 800e67c:	4613      	movlt	r3, r2
 800e67e:	6033      	str	r3, [r6, #0]
 800e680:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e684:	4607      	mov	r7, r0
 800e686:	460c      	mov	r4, r1
 800e688:	b10a      	cbz	r2, 800e68e <_printf_common+0x26>
 800e68a:	3301      	adds	r3, #1
 800e68c:	6033      	str	r3, [r6, #0]
 800e68e:	6823      	ldr	r3, [r4, #0]
 800e690:	0699      	lsls	r1, r3, #26
 800e692:	bf42      	ittt	mi
 800e694:	6833      	ldrmi	r3, [r6, #0]
 800e696:	3302      	addmi	r3, #2
 800e698:	6033      	strmi	r3, [r6, #0]
 800e69a:	6825      	ldr	r5, [r4, #0]
 800e69c:	f015 0506 	ands.w	r5, r5, #6
 800e6a0:	d106      	bne.n	800e6b0 <_printf_common+0x48>
 800e6a2:	f104 0a19 	add.w	sl, r4, #25
 800e6a6:	68e3      	ldr	r3, [r4, #12]
 800e6a8:	6832      	ldr	r2, [r6, #0]
 800e6aa:	1a9b      	subs	r3, r3, r2
 800e6ac:	42ab      	cmp	r3, r5
 800e6ae:	dc26      	bgt.n	800e6fe <_printf_common+0x96>
 800e6b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e6b4:	6822      	ldr	r2, [r4, #0]
 800e6b6:	3b00      	subs	r3, #0
 800e6b8:	bf18      	it	ne
 800e6ba:	2301      	movne	r3, #1
 800e6bc:	0692      	lsls	r2, r2, #26
 800e6be:	d42b      	bmi.n	800e718 <_printf_common+0xb0>
 800e6c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e6c4:	4641      	mov	r1, r8
 800e6c6:	4638      	mov	r0, r7
 800e6c8:	47c8      	blx	r9
 800e6ca:	3001      	adds	r0, #1
 800e6cc:	d01e      	beq.n	800e70c <_printf_common+0xa4>
 800e6ce:	6823      	ldr	r3, [r4, #0]
 800e6d0:	6922      	ldr	r2, [r4, #16]
 800e6d2:	f003 0306 	and.w	r3, r3, #6
 800e6d6:	2b04      	cmp	r3, #4
 800e6d8:	bf02      	ittt	eq
 800e6da:	68e5      	ldreq	r5, [r4, #12]
 800e6dc:	6833      	ldreq	r3, [r6, #0]
 800e6de:	1aed      	subeq	r5, r5, r3
 800e6e0:	68a3      	ldr	r3, [r4, #8]
 800e6e2:	bf0c      	ite	eq
 800e6e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6e8:	2500      	movne	r5, #0
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	bfc4      	itt	gt
 800e6ee:	1a9b      	subgt	r3, r3, r2
 800e6f0:	18ed      	addgt	r5, r5, r3
 800e6f2:	2600      	movs	r6, #0
 800e6f4:	341a      	adds	r4, #26
 800e6f6:	42b5      	cmp	r5, r6
 800e6f8:	d11a      	bne.n	800e730 <_printf_common+0xc8>
 800e6fa:	2000      	movs	r0, #0
 800e6fc:	e008      	b.n	800e710 <_printf_common+0xa8>
 800e6fe:	2301      	movs	r3, #1
 800e700:	4652      	mov	r2, sl
 800e702:	4641      	mov	r1, r8
 800e704:	4638      	mov	r0, r7
 800e706:	47c8      	blx	r9
 800e708:	3001      	adds	r0, #1
 800e70a:	d103      	bne.n	800e714 <_printf_common+0xac>
 800e70c:	f04f 30ff 	mov.w	r0, #4294967295
 800e710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e714:	3501      	adds	r5, #1
 800e716:	e7c6      	b.n	800e6a6 <_printf_common+0x3e>
 800e718:	18e1      	adds	r1, r4, r3
 800e71a:	1c5a      	adds	r2, r3, #1
 800e71c:	2030      	movs	r0, #48	@ 0x30
 800e71e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e722:	4422      	add	r2, r4
 800e724:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e728:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e72c:	3302      	adds	r3, #2
 800e72e:	e7c7      	b.n	800e6c0 <_printf_common+0x58>
 800e730:	2301      	movs	r3, #1
 800e732:	4622      	mov	r2, r4
 800e734:	4641      	mov	r1, r8
 800e736:	4638      	mov	r0, r7
 800e738:	47c8      	blx	r9
 800e73a:	3001      	adds	r0, #1
 800e73c:	d0e6      	beq.n	800e70c <_printf_common+0xa4>
 800e73e:	3601      	adds	r6, #1
 800e740:	e7d9      	b.n	800e6f6 <_printf_common+0x8e>
	...

0800e744 <_printf_i>:
 800e744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e748:	7e0f      	ldrb	r7, [r1, #24]
 800e74a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e74c:	2f78      	cmp	r7, #120	@ 0x78
 800e74e:	4691      	mov	r9, r2
 800e750:	4680      	mov	r8, r0
 800e752:	460c      	mov	r4, r1
 800e754:	469a      	mov	sl, r3
 800e756:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e75a:	d807      	bhi.n	800e76c <_printf_i+0x28>
 800e75c:	2f62      	cmp	r7, #98	@ 0x62
 800e75e:	d80a      	bhi.n	800e776 <_printf_i+0x32>
 800e760:	2f00      	cmp	r7, #0
 800e762:	f000 80d2 	beq.w	800e90a <_printf_i+0x1c6>
 800e766:	2f58      	cmp	r7, #88	@ 0x58
 800e768:	f000 80b9 	beq.w	800e8de <_printf_i+0x19a>
 800e76c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e770:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e774:	e03a      	b.n	800e7ec <_printf_i+0xa8>
 800e776:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e77a:	2b15      	cmp	r3, #21
 800e77c:	d8f6      	bhi.n	800e76c <_printf_i+0x28>
 800e77e:	a101      	add	r1, pc, #4	@ (adr r1, 800e784 <_printf_i+0x40>)
 800e780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e784:	0800e7dd 	.word	0x0800e7dd
 800e788:	0800e7f1 	.word	0x0800e7f1
 800e78c:	0800e76d 	.word	0x0800e76d
 800e790:	0800e76d 	.word	0x0800e76d
 800e794:	0800e76d 	.word	0x0800e76d
 800e798:	0800e76d 	.word	0x0800e76d
 800e79c:	0800e7f1 	.word	0x0800e7f1
 800e7a0:	0800e76d 	.word	0x0800e76d
 800e7a4:	0800e76d 	.word	0x0800e76d
 800e7a8:	0800e76d 	.word	0x0800e76d
 800e7ac:	0800e76d 	.word	0x0800e76d
 800e7b0:	0800e8f1 	.word	0x0800e8f1
 800e7b4:	0800e81b 	.word	0x0800e81b
 800e7b8:	0800e8ab 	.word	0x0800e8ab
 800e7bc:	0800e76d 	.word	0x0800e76d
 800e7c0:	0800e76d 	.word	0x0800e76d
 800e7c4:	0800e913 	.word	0x0800e913
 800e7c8:	0800e76d 	.word	0x0800e76d
 800e7cc:	0800e81b 	.word	0x0800e81b
 800e7d0:	0800e76d 	.word	0x0800e76d
 800e7d4:	0800e76d 	.word	0x0800e76d
 800e7d8:	0800e8b3 	.word	0x0800e8b3
 800e7dc:	6833      	ldr	r3, [r6, #0]
 800e7de:	1d1a      	adds	r2, r3, #4
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	6032      	str	r2, [r6, #0]
 800e7e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e7e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	e09d      	b.n	800e92c <_printf_i+0x1e8>
 800e7f0:	6833      	ldr	r3, [r6, #0]
 800e7f2:	6820      	ldr	r0, [r4, #0]
 800e7f4:	1d19      	adds	r1, r3, #4
 800e7f6:	6031      	str	r1, [r6, #0]
 800e7f8:	0606      	lsls	r6, r0, #24
 800e7fa:	d501      	bpl.n	800e800 <_printf_i+0xbc>
 800e7fc:	681d      	ldr	r5, [r3, #0]
 800e7fe:	e003      	b.n	800e808 <_printf_i+0xc4>
 800e800:	0645      	lsls	r5, r0, #25
 800e802:	d5fb      	bpl.n	800e7fc <_printf_i+0xb8>
 800e804:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e808:	2d00      	cmp	r5, #0
 800e80a:	da03      	bge.n	800e814 <_printf_i+0xd0>
 800e80c:	232d      	movs	r3, #45	@ 0x2d
 800e80e:	426d      	negs	r5, r5
 800e810:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e814:	4859      	ldr	r0, [pc, #356]	@ (800e97c <_printf_i+0x238>)
 800e816:	230a      	movs	r3, #10
 800e818:	e011      	b.n	800e83e <_printf_i+0xfa>
 800e81a:	6821      	ldr	r1, [r4, #0]
 800e81c:	6833      	ldr	r3, [r6, #0]
 800e81e:	0608      	lsls	r0, r1, #24
 800e820:	f853 5b04 	ldr.w	r5, [r3], #4
 800e824:	d402      	bmi.n	800e82c <_printf_i+0xe8>
 800e826:	0649      	lsls	r1, r1, #25
 800e828:	bf48      	it	mi
 800e82a:	b2ad      	uxthmi	r5, r5
 800e82c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e82e:	4853      	ldr	r0, [pc, #332]	@ (800e97c <_printf_i+0x238>)
 800e830:	6033      	str	r3, [r6, #0]
 800e832:	bf14      	ite	ne
 800e834:	230a      	movne	r3, #10
 800e836:	2308      	moveq	r3, #8
 800e838:	2100      	movs	r1, #0
 800e83a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e83e:	6866      	ldr	r6, [r4, #4]
 800e840:	60a6      	str	r6, [r4, #8]
 800e842:	2e00      	cmp	r6, #0
 800e844:	bfa2      	ittt	ge
 800e846:	6821      	ldrge	r1, [r4, #0]
 800e848:	f021 0104 	bicge.w	r1, r1, #4
 800e84c:	6021      	strge	r1, [r4, #0]
 800e84e:	b90d      	cbnz	r5, 800e854 <_printf_i+0x110>
 800e850:	2e00      	cmp	r6, #0
 800e852:	d04b      	beq.n	800e8ec <_printf_i+0x1a8>
 800e854:	4616      	mov	r6, r2
 800e856:	fbb5 f1f3 	udiv	r1, r5, r3
 800e85a:	fb03 5711 	mls	r7, r3, r1, r5
 800e85e:	5dc7      	ldrb	r7, [r0, r7]
 800e860:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e864:	462f      	mov	r7, r5
 800e866:	42bb      	cmp	r3, r7
 800e868:	460d      	mov	r5, r1
 800e86a:	d9f4      	bls.n	800e856 <_printf_i+0x112>
 800e86c:	2b08      	cmp	r3, #8
 800e86e:	d10b      	bne.n	800e888 <_printf_i+0x144>
 800e870:	6823      	ldr	r3, [r4, #0]
 800e872:	07df      	lsls	r7, r3, #31
 800e874:	d508      	bpl.n	800e888 <_printf_i+0x144>
 800e876:	6923      	ldr	r3, [r4, #16]
 800e878:	6861      	ldr	r1, [r4, #4]
 800e87a:	4299      	cmp	r1, r3
 800e87c:	bfde      	ittt	le
 800e87e:	2330      	movle	r3, #48	@ 0x30
 800e880:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e884:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e888:	1b92      	subs	r2, r2, r6
 800e88a:	6122      	str	r2, [r4, #16]
 800e88c:	f8cd a000 	str.w	sl, [sp]
 800e890:	464b      	mov	r3, r9
 800e892:	aa03      	add	r2, sp, #12
 800e894:	4621      	mov	r1, r4
 800e896:	4640      	mov	r0, r8
 800e898:	f7ff fee6 	bl	800e668 <_printf_common>
 800e89c:	3001      	adds	r0, #1
 800e89e:	d14a      	bne.n	800e936 <_printf_i+0x1f2>
 800e8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a4:	b004      	add	sp, #16
 800e8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8aa:	6823      	ldr	r3, [r4, #0]
 800e8ac:	f043 0320 	orr.w	r3, r3, #32
 800e8b0:	6023      	str	r3, [r4, #0]
 800e8b2:	4833      	ldr	r0, [pc, #204]	@ (800e980 <_printf_i+0x23c>)
 800e8b4:	2778      	movs	r7, #120	@ 0x78
 800e8b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e8ba:	6823      	ldr	r3, [r4, #0]
 800e8bc:	6831      	ldr	r1, [r6, #0]
 800e8be:	061f      	lsls	r7, r3, #24
 800e8c0:	f851 5b04 	ldr.w	r5, [r1], #4
 800e8c4:	d402      	bmi.n	800e8cc <_printf_i+0x188>
 800e8c6:	065f      	lsls	r7, r3, #25
 800e8c8:	bf48      	it	mi
 800e8ca:	b2ad      	uxthmi	r5, r5
 800e8cc:	6031      	str	r1, [r6, #0]
 800e8ce:	07d9      	lsls	r1, r3, #31
 800e8d0:	bf44      	itt	mi
 800e8d2:	f043 0320 	orrmi.w	r3, r3, #32
 800e8d6:	6023      	strmi	r3, [r4, #0]
 800e8d8:	b11d      	cbz	r5, 800e8e2 <_printf_i+0x19e>
 800e8da:	2310      	movs	r3, #16
 800e8dc:	e7ac      	b.n	800e838 <_printf_i+0xf4>
 800e8de:	4827      	ldr	r0, [pc, #156]	@ (800e97c <_printf_i+0x238>)
 800e8e0:	e7e9      	b.n	800e8b6 <_printf_i+0x172>
 800e8e2:	6823      	ldr	r3, [r4, #0]
 800e8e4:	f023 0320 	bic.w	r3, r3, #32
 800e8e8:	6023      	str	r3, [r4, #0]
 800e8ea:	e7f6      	b.n	800e8da <_printf_i+0x196>
 800e8ec:	4616      	mov	r6, r2
 800e8ee:	e7bd      	b.n	800e86c <_printf_i+0x128>
 800e8f0:	6833      	ldr	r3, [r6, #0]
 800e8f2:	6825      	ldr	r5, [r4, #0]
 800e8f4:	6961      	ldr	r1, [r4, #20]
 800e8f6:	1d18      	adds	r0, r3, #4
 800e8f8:	6030      	str	r0, [r6, #0]
 800e8fa:	062e      	lsls	r6, r5, #24
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	d501      	bpl.n	800e904 <_printf_i+0x1c0>
 800e900:	6019      	str	r1, [r3, #0]
 800e902:	e002      	b.n	800e90a <_printf_i+0x1c6>
 800e904:	0668      	lsls	r0, r5, #25
 800e906:	d5fb      	bpl.n	800e900 <_printf_i+0x1bc>
 800e908:	8019      	strh	r1, [r3, #0]
 800e90a:	2300      	movs	r3, #0
 800e90c:	6123      	str	r3, [r4, #16]
 800e90e:	4616      	mov	r6, r2
 800e910:	e7bc      	b.n	800e88c <_printf_i+0x148>
 800e912:	6833      	ldr	r3, [r6, #0]
 800e914:	1d1a      	adds	r2, r3, #4
 800e916:	6032      	str	r2, [r6, #0]
 800e918:	681e      	ldr	r6, [r3, #0]
 800e91a:	6862      	ldr	r2, [r4, #4]
 800e91c:	2100      	movs	r1, #0
 800e91e:	4630      	mov	r0, r6
 800e920:	f7f1 fc3e 	bl	80001a0 <memchr>
 800e924:	b108      	cbz	r0, 800e92a <_printf_i+0x1e6>
 800e926:	1b80      	subs	r0, r0, r6
 800e928:	6060      	str	r0, [r4, #4]
 800e92a:	6863      	ldr	r3, [r4, #4]
 800e92c:	6123      	str	r3, [r4, #16]
 800e92e:	2300      	movs	r3, #0
 800e930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e934:	e7aa      	b.n	800e88c <_printf_i+0x148>
 800e936:	6923      	ldr	r3, [r4, #16]
 800e938:	4632      	mov	r2, r6
 800e93a:	4649      	mov	r1, r9
 800e93c:	4640      	mov	r0, r8
 800e93e:	47d0      	blx	sl
 800e940:	3001      	adds	r0, #1
 800e942:	d0ad      	beq.n	800e8a0 <_printf_i+0x15c>
 800e944:	6823      	ldr	r3, [r4, #0]
 800e946:	079b      	lsls	r3, r3, #30
 800e948:	d413      	bmi.n	800e972 <_printf_i+0x22e>
 800e94a:	68e0      	ldr	r0, [r4, #12]
 800e94c:	9b03      	ldr	r3, [sp, #12]
 800e94e:	4298      	cmp	r0, r3
 800e950:	bfb8      	it	lt
 800e952:	4618      	movlt	r0, r3
 800e954:	e7a6      	b.n	800e8a4 <_printf_i+0x160>
 800e956:	2301      	movs	r3, #1
 800e958:	4632      	mov	r2, r6
 800e95a:	4649      	mov	r1, r9
 800e95c:	4640      	mov	r0, r8
 800e95e:	47d0      	blx	sl
 800e960:	3001      	adds	r0, #1
 800e962:	d09d      	beq.n	800e8a0 <_printf_i+0x15c>
 800e964:	3501      	adds	r5, #1
 800e966:	68e3      	ldr	r3, [r4, #12]
 800e968:	9903      	ldr	r1, [sp, #12]
 800e96a:	1a5b      	subs	r3, r3, r1
 800e96c:	42ab      	cmp	r3, r5
 800e96e:	dcf2      	bgt.n	800e956 <_printf_i+0x212>
 800e970:	e7eb      	b.n	800e94a <_printf_i+0x206>
 800e972:	2500      	movs	r5, #0
 800e974:	f104 0619 	add.w	r6, r4, #25
 800e978:	e7f5      	b.n	800e966 <_printf_i+0x222>
 800e97a:	bf00      	nop
 800e97c:	08011e68 	.word	0x08011e68
 800e980:	08011e79 	.word	0x08011e79

0800e984 <std>:
 800e984:	2300      	movs	r3, #0
 800e986:	b510      	push	{r4, lr}
 800e988:	4604      	mov	r4, r0
 800e98a:	e9c0 3300 	strd	r3, r3, [r0]
 800e98e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e992:	6083      	str	r3, [r0, #8]
 800e994:	8181      	strh	r1, [r0, #12]
 800e996:	6643      	str	r3, [r0, #100]	@ 0x64
 800e998:	81c2      	strh	r2, [r0, #14]
 800e99a:	6183      	str	r3, [r0, #24]
 800e99c:	4619      	mov	r1, r3
 800e99e:	2208      	movs	r2, #8
 800e9a0:	305c      	adds	r0, #92	@ 0x5c
 800e9a2:	f000 fa09 	bl	800edb8 <memset>
 800e9a6:	4b0d      	ldr	r3, [pc, #52]	@ (800e9dc <std+0x58>)
 800e9a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800e9aa:	4b0d      	ldr	r3, [pc, #52]	@ (800e9e0 <std+0x5c>)
 800e9ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e9e4 <std+0x60>)
 800e9b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e9b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e9e8 <std+0x64>)
 800e9b4:	6323      	str	r3, [r4, #48]	@ 0x30
 800e9b6:	4b0d      	ldr	r3, [pc, #52]	@ (800e9ec <std+0x68>)
 800e9b8:	6224      	str	r4, [r4, #32]
 800e9ba:	429c      	cmp	r4, r3
 800e9bc:	d006      	beq.n	800e9cc <std+0x48>
 800e9be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e9c2:	4294      	cmp	r4, r2
 800e9c4:	d002      	beq.n	800e9cc <std+0x48>
 800e9c6:	33d0      	adds	r3, #208	@ 0xd0
 800e9c8:	429c      	cmp	r4, r3
 800e9ca:	d105      	bne.n	800e9d8 <std+0x54>
 800e9cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9d4:	f000 ba82 	b.w	800eedc <__retarget_lock_init_recursive>
 800e9d8:	bd10      	pop	{r4, pc}
 800e9da:	bf00      	nop
 800e9dc:	0800ebe9 	.word	0x0800ebe9
 800e9e0:	0800ec0b 	.word	0x0800ec0b
 800e9e4:	0800ec43 	.word	0x0800ec43
 800e9e8:	0800ec67 	.word	0x0800ec67
 800e9ec:	20000df4 	.word	0x20000df4

0800e9f0 <stdio_exit_handler>:
 800e9f0:	4a02      	ldr	r2, [pc, #8]	@ (800e9fc <stdio_exit_handler+0xc>)
 800e9f2:	4903      	ldr	r1, [pc, #12]	@ (800ea00 <stdio_exit_handler+0x10>)
 800e9f4:	4803      	ldr	r0, [pc, #12]	@ (800ea04 <stdio_exit_handler+0x14>)
 800e9f6:	f000 b869 	b.w	800eacc <_fwalk_sglue>
 800e9fa:	bf00      	nop
 800e9fc:	2000001c 	.word	0x2000001c
 800ea00:	08010829 	.word	0x08010829
 800ea04:	2000002c 	.word	0x2000002c

0800ea08 <cleanup_stdio>:
 800ea08:	6841      	ldr	r1, [r0, #4]
 800ea0a:	4b0c      	ldr	r3, [pc, #48]	@ (800ea3c <cleanup_stdio+0x34>)
 800ea0c:	4299      	cmp	r1, r3
 800ea0e:	b510      	push	{r4, lr}
 800ea10:	4604      	mov	r4, r0
 800ea12:	d001      	beq.n	800ea18 <cleanup_stdio+0x10>
 800ea14:	f001 ff08 	bl	8010828 <_fflush_r>
 800ea18:	68a1      	ldr	r1, [r4, #8]
 800ea1a:	4b09      	ldr	r3, [pc, #36]	@ (800ea40 <cleanup_stdio+0x38>)
 800ea1c:	4299      	cmp	r1, r3
 800ea1e:	d002      	beq.n	800ea26 <cleanup_stdio+0x1e>
 800ea20:	4620      	mov	r0, r4
 800ea22:	f001 ff01 	bl	8010828 <_fflush_r>
 800ea26:	68e1      	ldr	r1, [r4, #12]
 800ea28:	4b06      	ldr	r3, [pc, #24]	@ (800ea44 <cleanup_stdio+0x3c>)
 800ea2a:	4299      	cmp	r1, r3
 800ea2c:	d004      	beq.n	800ea38 <cleanup_stdio+0x30>
 800ea2e:	4620      	mov	r0, r4
 800ea30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea34:	f001 bef8 	b.w	8010828 <_fflush_r>
 800ea38:	bd10      	pop	{r4, pc}
 800ea3a:	bf00      	nop
 800ea3c:	20000df4 	.word	0x20000df4
 800ea40:	20000e5c 	.word	0x20000e5c
 800ea44:	20000ec4 	.word	0x20000ec4

0800ea48 <global_stdio_init.part.0>:
 800ea48:	b510      	push	{r4, lr}
 800ea4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ea78 <global_stdio_init.part.0+0x30>)
 800ea4c:	4c0b      	ldr	r4, [pc, #44]	@ (800ea7c <global_stdio_init.part.0+0x34>)
 800ea4e:	4a0c      	ldr	r2, [pc, #48]	@ (800ea80 <global_stdio_init.part.0+0x38>)
 800ea50:	601a      	str	r2, [r3, #0]
 800ea52:	4620      	mov	r0, r4
 800ea54:	2200      	movs	r2, #0
 800ea56:	2104      	movs	r1, #4
 800ea58:	f7ff ff94 	bl	800e984 <std>
 800ea5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ea60:	2201      	movs	r2, #1
 800ea62:	2109      	movs	r1, #9
 800ea64:	f7ff ff8e 	bl	800e984 <std>
 800ea68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ea6c:	2202      	movs	r2, #2
 800ea6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea72:	2112      	movs	r1, #18
 800ea74:	f7ff bf86 	b.w	800e984 <std>
 800ea78:	20000f2c 	.word	0x20000f2c
 800ea7c:	20000df4 	.word	0x20000df4
 800ea80:	0800e9f1 	.word	0x0800e9f1

0800ea84 <__sfp_lock_acquire>:
 800ea84:	4801      	ldr	r0, [pc, #4]	@ (800ea8c <__sfp_lock_acquire+0x8>)
 800ea86:	f000 ba2a 	b.w	800eede <__retarget_lock_acquire_recursive>
 800ea8a:	bf00      	nop
 800ea8c:	20000f35 	.word	0x20000f35

0800ea90 <__sfp_lock_release>:
 800ea90:	4801      	ldr	r0, [pc, #4]	@ (800ea98 <__sfp_lock_release+0x8>)
 800ea92:	f000 ba25 	b.w	800eee0 <__retarget_lock_release_recursive>
 800ea96:	bf00      	nop
 800ea98:	20000f35 	.word	0x20000f35

0800ea9c <__sinit>:
 800ea9c:	b510      	push	{r4, lr}
 800ea9e:	4604      	mov	r4, r0
 800eaa0:	f7ff fff0 	bl	800ea84 <__sfp_lock_acquire>
 800eaa4:	6a23      	ldr	r3, [r4, #32]
 800eaa6:	b11b      	cbz	r3, 800eab0 <__sinit+0x14>
 800eaa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eaac:	f7ff bff0 	b.w	800ea90 <__sfp_lock_release>
 800eab0:	4b04      	ldr	r3, [pc, #16]	@ (800eac4 <__sinit+0x28>)
 800eab2:	6223      	str	r3, [r4, #32]
 800eab4:	4b04      	ldr	r3, [pc, #16]	@ (800eac8 <__sinit+0x2c>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d1f5      	bne.n	800eaa8 <__sinit+0xc>
 800eabc:	f7ff ffc4 	bl	800ea48 <global_stdio_init.part.0>
 800eac0:	e7f2      	b.n	800eaa8 <__sinit+0xc>
 800eac2:	bf00      	nop
 800eac4:	0800ea09 	.word	0x0800ea09
 800eac8:	20000f2c 	.word	0x20000f2c

0800eacc <_fwalk_sglue>:
 800eacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ead0:	4607      	mov	r7, r0
 800ead2:	4688      	mov	r8, r1
 800ead4:	4614      	mov	r4, r2
 800ead6:	2600      	movs	r6, #0
 800ead8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eadc:	f1b9 0901 	subs.w	r9, r9, #1
 800eae0:	d505      	bpl.n	800eaee <_fwalk_sglue+0x22>
 800eae2:	6824      	ldr	r4, [r4, #0]
 800eae4:	2c00      	cmp	r4, #0
 800eae6:	d1f7      	bne.n	800ead8 <_fwalk_sglue+0xc>
 800eae8:	4630      	mov	r0, r6
 800eaea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaee:	89ab      	ldrh	r3, [r5, #12]
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d907      	bls.n	800eb04 <_fwalk_sglue+0x38>
 800eaf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	d003      	beq.n	800eb04 <_fwalk_sglue+0x38>
 800eafc:	4629      	mov	r1, r5
 800eafe:	4638      	mov	r0, r7
 800eb00:	47c0      	blx	r8
 800eb02:	4306      	orrs	r6, r0
 800eb04:	3568      	adds	r5, #104	@ 0x68
 800eb06:	e7e9      	b.n	800eadc <_fwalk_sglue+0x10>

0800eb08 <iprintf>:
 800eb08:	b40f      	push	{r0, r1, r2, r3}
 800eb0a:	b507      	push	{r0, r1, r2, lr}
 800eb0c:	4906      	ldr	r1, [pc, #24]	@ (800eb28 <iprintf+0x20>)
 800eb0e:	ab04      	add	r3, sp, #16
 800eb10:	6808      	ldr	r0, [r1, #0]
 800eb12:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb16:	6881      	ldr	r1, [r0, #8]
 800eb18:	9301      	str	r3, [sp, #4]
 800eb1a:	f001 fce9 	bl	80104f0 <_vfiprintf_r>
 800eb1e:	b003      	add	sp, #12
 800eb20:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb24:	b004      	add	sp, #16
 800eb26:	4770      	bx	lr
 800eb28:	20000028 	.word	0x20000028

0800eb2c <_puts_r>:
 800eb2c:	6a03      	ldr	r3, [r0, #32]
 800eb2e:	b570      	push	{r4, r5, r6, lr}
 800eb30:	6884      	ldr	r4, [r0, #8]
 800eb32:	4605      	mov	r5, r0
 800eb34:	460e      	mov	r6, r1
 800eb36:	b90b      	cbnz	r3, 800eb3c <_puts_r+0x10>
 800eb38:	f7ff ffb0 	bl	800ea9c <__sinit>
 800eb3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb3e:	07db      	lsls	r3, r3, #31
 800eb40:	d405      	bmi.n	800eb4e <_puts_r+0x22>
 800eb42:	89a3      	ldrh	r3, [r4, #12]
 800eb44:	0598      	lsls	r0, r3, #22
 800eb46:	d402      	bmi.n	800eb4e <_puts_r+0x22>
 800eb48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb4a:	f000 f9c8 	bl	800eede <__retarget_lock_acquire_recursive>
 800eb4e:	89a3      	ldrh	r3, [r4, #12]
 800eb50:	0719      	lsls	r1, r3, #28
 800eb52:	d502      	bpl.n	800eb5a <_puts_r+0x2e>
 800eb54:	6923      	ldr	r3, [r4, #16]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d135      	bne.n	800ebc6 <_puts_r+0x9a>
 800eb5a:	4621      	mov	r1, r4
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	f000 f8c5 	bl	800ecec <__swsetup_r>
 800eb62:	b380      	cbz	r0, 800ebc6 <_puts_r+0x9a>
 800eb64:	f04f 35ff 	mov.w	r5, #4294967295
 800eb68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb6a:	07da      	lsls	r2, r3, #31
 800eb6c:	d405      	bmi.n	800eb7a <_puts_r+0x4e>
 800eb6e:	89a3      	ldrh	r3, [r4, #12]
 800eb70:	059b      	lsls	r3, r3, #22
 800eb72:	d402      	bmi.n	800eb7a <_puts_r+0x4e>
 800eb74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb76:	f000 f9b3 	bl	800eee0 <__retarget_lock_release_recursive>
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	bd70      	pop	{r4, r5, r6, pc}
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	da04      	bge.n	800eb8c <_puts_r+0x60>
 800eb82:	69a2      	ldr	r2, [r4, #24]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	dc17      	bgt.n	800ebb8 <_puts_r+0x8c>
 800eb88:	290a      	cmp	r1, #10
 800eb8a:	d015      	beq.n	800ebb8 <_puts_r+0x8c>
 800eb8c:	6823      	ldr	r3, [r4, #0]
 800eb8e:	1c5a      	adds	r2, r3, #1
 800eb90:	6022      	str	r2, [r4, #0]
 800eb92:	7019      	strb	r1, [r3, #0]
 800eb94:	68a3      	ldr	r3, [r4, #8]
 800eb96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eb9a:	3b01      	subs	r3, #1
 800eb9c:	60a3      	str	r3, [r4, #8]
 800eb9e:	2900      	cmp	r1, #0
 800eba0:	d1ed      	bne.n	800eb7e <_puts_r+0x52>
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	da11      	bge.n	800ebca <_puts_r+0x9e>
 800eba6:	4622      	mov	r2, r4
 800eba8:	210a      	movs	r1, #10
 800ebaa:	4628      	mov	r0, r5
 800ebac:	f000 f85f 	bl	800ec6e <__swbuf_r>
 800ebb0:	3001      	adds	r0, #1
 800ebb2:	d0d7      	beq.n	800eb64 <_puts_r+0x38>
 800ebb4:	250a      	movs	r5, #10
 800ebb6:	e7d7      	b.n	800eb68 <_puts_r+0x3c>
 800ebb8:	4622      	mov	r2, r4
 800ebba:	4628      	mov	r0, r5
 800ebbc:	f000 f857 	bl	800ec6e <__swbuf_r>
 800ebc0:	3001      	adds	r0, #1
 800ebc2:	d1e7      	bne.n	800eb94 <_puts_r+0x68>
 800ebc4:	e7ce      	b.n	800eb64 <_puts_r+0x38>
 800ebc6:	3e01      	subs	r6, #1
 800ebc8:	e7e4      	b.n	800eb94 <_puts_r+0x68>
 800ebca:	6823      	ldr	r3, [r4, #0]
 800ebcc:	1c5a      	adds	r2, r3, #1
 800ebce:	6022      	str	r2, [r4, #0]
 800ebd0:	220a      	movs	r2, #10
 800ebd2:	701a      	strb	r2, [r3, #0]
 800ebd4:	e7ee      	b.n	800ebb4 <_puts_r+0x88>
	...

0800ebd8 <puts>:
 800ebd8:	4b02      	ldr	r3, [pc, #8]	@ (800ebe4 <puts+0xc>)
 800ebda:	4601      	mov	r1, r0
 800ebdc:	6818      	ldr	r0, [r3, #0]
 800ebde:	f7ff bfa5 	b.w	800eb2c <_puts_r>
 800ebe2:	bf00      	nop
 800ebe4:	20000028 	.word	0x20000028

0800ebe8 <__sread>:
 800ebe8:	b510      	push	{r4, lr}
 800ebea:	460c      	mov	r4, r1
 800ebec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebf0:	f000 f926 	bl	800ee40 <_read_r>
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	bfab      	itete	ge
 800ebf8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ebfa:	89a3      	ldrhlt	r3, [r4, #12]
 800ebfc:	181b      	addge	r3, r3, r0
 800ebfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ec02:	bfac      	ite	ge
 800ec04:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ec06:	81a3      	strhlt	r3, [r4, #12]
 800ec08:	bd10      	pop	{r4, pc}

0800ec0a <__swrite>:
 800ec0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec0e:	461f      	mov	r7, r3
 800ec10:	898b      	ldrh	r3, [r1, #12]
 800ec12:	05db      	lsls	r3, r3, #23
 800ec14:	4605      	mov	r5, r0
 800ec16:	460c      	mov	r4, r1
 800ec18:	4616      	mov	r6, r2
 800ec1a:	d505      	bpl.n	800ec28 <__swrite+0x1e>
 800ec1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec20:	2302      	movs	r3, #2
 800ec22:	2200      	movs	r2, #0
 800ec24:	f000 f8fa 	bl	800ee1c <_lseek_r>
 800ec28:	89a3      	ldrh	r3, [r4, #12]
 800ec2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec32:	81a3      	strh	r3, [r4, #12]
 800ec34:	4632      	mov	r2, r6
 800ec36:	463b      	mov	r3, r7
 800ec38:	4628      	mov	r0, r5
 800ec3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec3e:	f000 b911 	b.w	800ee64 <_write_r>

0800ec42 <__sseek>:
 800ec42:	b510      	push	{r4, lr}
 800ec44:	460c      	mov	r4, r1
 800ec46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec4a:	f000 f8e7 	bl	800ee1c <_lseek_r>
 800ec4e:	1c43      	adds	r3, r0, #1
 800ec50:	89a3      	ldrh	r3, [r4, #12]
 800ec52:	bf15      	itete	ne
 800ec54:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ec56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ec5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ec5e:	81a3      	strheq	r3, [r4, #12]
 800ec60:	bf18      	it	ne
 800ec62:	81a3      	strhne	r3, [r4, #12]
 800ec64:	bd10      	pop	{r4, pc}

0800ec66 <__sclose>:
 800ec66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec6a:	f000 b8c7 	b.w	800edfc <_close_r>

0800ec6e <__swbuf_r>:
 800ec6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec70:	460e      	mov	r6, r1
 800ec72:	4614      	mov	r4, r2
 800ec74:	4605      	mov	r5, r0
 800ec76:	b118      	cbz	r0, 800ec80 <__swbuf_r+0x12>
 800ec78:	6a03      	ldr	r3, [r0, #32]
 800ec7a:	b90b      	cbnz	r3, 800ec80 <__swbuf_r+0x12>
 800ec7c:	f7ff ff0e 	bl	800ea9c <__sinit>
 800ec80:	69a3      	ldr	r3, [r4, #24]
 800ec82:	60a3      	str	r3, [r4, #8]
 800ec84:	89a3      	ldrh	r3, [r4, #12]
 800ec86:	071a      	lsls	r2, r3, #28
 800ec88:	d501      	bpl.n	800ec8e <__swbuf_r+0x20>
 800ec8a:	6923      	ldr	r3, [r4, #16]
 800ec8c:	b943      	cbnz	r3, 800eca0 <__swbuf_r+0x32>
 800ec8e:	4621      	mov	r1, r4
 800ec90:	4628      	mov	r0, r5
 800ec92:	f000 f82b 	bl	800ecec <__swsetup_r>
 800ec96:	b118      	cbz	r0, 800eca0 <__swbuf_r+0x32>
 800ec98:	f04f 37ff 	mov.w	r7, #4294967295
 800ec9c:	4638      	mov	r0, r7
 800ec9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eca0:	6823      	ldr	r3, [r4, #0]
 800eca2:	6922      	ldr	r2, [r4, #16]
 800eca4:	1a98      	subs	r0, r3, r2
 800eca6:	6963      	ldr	r3, [r4, #20]
 800eca8:	b2f6      	uxtb	r6, r6
 800ecaa:	4283      	cmp	r3, r0
 800ecac:	4637      	mov	r7, r6
 800ecae:	dc05      	bgt.n	800ecbc <__swbuf_r+0x4e>
 800ecb0:	4621      	mov	r1, r4
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	f001 fdb8 	bl	8010828 <_fflush_r>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	d1ed      	bne.n	800ec98 <__swbuf_r+0x2a>
 800ecbc:	68a3      	ldr	r3, [r4, #8]
 800ecbe:	3b01      	subs	r3, #1
 800ecc0:	60a3      	str	r3, [r4, #8]
 800ecc2:	6823      	ldr	r3, [r4, #0]
 800ecc4:	1c5a      	adds	r2, r3, #1
 800ecc6:	6022      	str	r2, [r4, #0]
 800ecc8:	701e      	strb	r6, [r3, #0]
 800ecca:	6962      	ldr	r2, [r4, #20]
 800eccc:	1c43      	adds	r3, r0, #1
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d004      	beq.n	800ecdc <__swbuf_r+0x6e>
 800ecd2:	89a3      	ldrh	r3, [r4, #12]
 800ecd4:	07db      	lsls	r3, r3, #31
 800ecd6:	d5e1      	bpl.n	800ec9c <__swbuf_r+0x2e>
 800ecd8:	2e0a      	cmp	r6, #10
 800ecda:	d1df      	bne.n	800ec9c <__swbuf_r+0x2e>
 800ecdc:	4621      	mov	r1, r4
 800ecde:	4628      	mov	r0, r5
 800ece0:	f001 fda2 	bl	8010828 <_fflush_r>
 800ece4:	2800      	cmp	r0, #0
 800ece6:	d0d9      	beq.n	800ec9c <__swbuf_r+0x2e>
 800ece8:	e7d6      	b.n	800ec98 <__swbuf_r+0x2a>
	...

0800ecec <__swsetup_r>:
 800ecec:	b538      	push	{r3, r4, r5, lr}
 800ecee:	4b29      	ldr	r3, [pc, #164]	@ (800ed94 <__swsetup_r+0xa8>)
 800ecf0:	4605      	mov	r5, r0
 800ecf2:	6818      	ldr	r0, [r3, #0]
 800ecf4:	460c      	mov	r4, r1
 800ecf6:	b118      	cbz	r0, 800ed00 <__swsetup_r+0x14>
 800ecf8:	6a03      	ldr	r3, [r0, #32]
 800ecfa:	b90b      	cbnz	r3, 800ed00 <__swsetup_r+0x14>
 800ecfc:	f7ff fece 	bl	800ea9c <__sinit>
 800ed00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed04:	0719      	lsls	r1, r3, #28
 800ed06:	d422      	bmi.n	800ed4e <__swsetup_r+0x62>
 800ed08:	06da      	lsls	r2, r3, #27
 800ed0a:	d407      	bmi.n	800ed1c <__swsetup_r+0x30>
 800ed0c:	2209      	movs	r2, #9
 800ed0e:	602a      	str	r2, [r5, #0]
 800ed10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed14:	81a3      	strh	r3, [r4, #12]
 800ed16:	f04f 30ff 	mov.w	r0, #4294967295
 800ed1a:	e033      	b.n	800ed84 <__swsetup_r+0x98>
 800ed1c:	0758      	lsls	r0, r3, #29
 800ed1e:	d512      	bpl.n	800ed46 <__swsetup_r+0x5a>
 800ed20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed22:	b141      	cbz	r1, 800ed36 <__swsetup_r+0x4a>
 800ed24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed28:	4299      	cmp	r1, r3
 800ed2a:	d002      	beq.n	800ed32 <__swsetup_r+0x46>
 800ed2c:	4628      	mov	r0, r5
 800ed2e:	f000 ff33 	bl	800fb98 <_free_r>
 800ed32:	2300      	movs	r3, #0
 800ed34:	6363      	str	r3, [r4, #52]	@ 0x34
 800ed36:	89a3      	ldrh	r3, [r4, #12]
 800ed38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ed3c:	81a3      	strh	r3, [r4, #12]
 800ed3e:	2300      	movs	r3, #0
 800ed40:	6063      	str	r3, [r4, #4]
 800ed42:	6923      	ldr	r3, [r4, #16]
 800ed44:	6023      	str	r3, [r4, #0]
 800ed46:	89a3      	ldrh	r3, [r4, #12]
 800ed48:	f043 0308 	orr.w	r3, r3, #8
 800ed4c:	81a3      	strh	r3, [r4, #12]
 800ed4e:	6923      	ldr	r3, [r4, #16]
 800ed50:	b94b      	cbnz	r3, 800ed66 <__swsetup_r+0x7a>
 800ed52:	89a3      	ldrh	r3, [r4, #12]
 800ed54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ed58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed5c:	d003      	beq.n	800ed66 <__swsetup_r+0x7a>
 800ed5e:	4621      	mov	r1, r4
 800ed60:	4628      	mov	r0, r5
 800ed62:	f001 fdaf 	bl	80108c4 <__smakebuf_r>
 800ed66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed6a:	f013 0201 	ands.w	r2, r3, #1
 800ed6e:	d00a      	beq.n	800ed86 <__swsetup_r+0x9a>
 800ed70:	2200      	movs	r2, #0
 800ed72:	60a2      	str	r2, [r4, #8]
 800ed74:	6962      	ldr	r2, [r4, #20]
 800ed76:	4252      	negs	r2, r2
 800ed78:	61a2      	str	r2, [r4, #24]
 800ed7a:	6922      	ldr	r2, [r4, #16]
 800ed7c:	b942      	cbnz	r2, 800ed90 <__swsetup_r+0xa4>
 800ed7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ed82:	d1c5      	bne.n	800ed10 <__swsetup_r+0x24>
 800ed84:	bd38      	pop	{r3, r4, r5, pc}
 800ed86:	0799      	lsls	r1, r3, #30
 800ed88:	bf58      	it	pl
 800ed8a:	6962      	ldrpl	r2, [r4, #20]
 800ed8c:	60a2      	str	r2, [r4, #8]
 800ed8e:	e7f4      	b.n	800ed7a <__swsetup_r+0x8e>
 800ed90:	2000      	movs	r0, #0
 800ed92:	e7f7      	b.n	800ed84 <__swsetup_r+0x98>
 800ed94:	20000028 	.word	0x20000028

0800ed98 <memcmp>:
 800ed98:	b510      	push	{r4, lr}
 800ed9a:	3901      	subs	r1, #1
 800ed9c:	4402      	add	r2, r0
 800ed9e:	4290      	cmp	r0, r2
 800eda0:	d101      	bne.n	800eda6 <memcmp+0xe>
 800eda2:	2000      	movs	r0, #0
 800eda4:	e005      	b.n	800edb2 <memcmp+0x1a>
 800eda6:	7803      	ldrb	r3, [r0, #0]
 800eda8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800edac:	42a3      	cmp	r3, r4
 800edae:	d001      	beq.n	800edb4 <memcmp+0x1c>
 800edb0:	1b18      	subs	r0, r3, r4
 800edb2:	bd10      	pop	{r4, pc}
 800edb4:	3001      	adds	r0, #1
 800edb6:	e7f2      	b.n	800ed9e <memcmp+0x6>

0800edb8 <memset>:
 800edb8:	4402      	add	r2, r0
 800edba:	4603      	mov	r3, r0
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d100      	bne.n	800edc2 <memset+0xa>
 800edc0:	4770      	bx	lr
 800edc2:	f803 1b01 	strb.w	r1, [r3], #1
 800edc6:	e7f9      	b.n	800edbc <memset+0x4>

0800edc8 <strrchr>:
 800edc8:	b538      	push	{r3, r4, r5, lr}
 800edca:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800edce:	4603      	mov	r3, r0
 800edd0:	d10e      	bne.n	800edf0 <strrchr+0x28>
 800edd2:	4621      	mov	r1, r4
 800edd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edd8:	f001 bdb0 	b.w	801093c <strchr>
 800eddc:	1c43      	adds	r3, r0, #1
 800edde:	4605      	mov	r5, r0
 800ede0:	4621      	mov	r1, r4
 800ede2:	4618      	mov	r0, r3
 800ede4:	f001 fdaa 	bl	801093c <strchr>
 800ede8:	2800      	cmp	r0, #0
 800edea:	d1f7      	bne.n	800eddc <strrchr+0x14>
 800edec:	4628      	mov	r0, r5
 800edee:	bd38      	pop	{r3, r4, r5, pc}
 800edf0:	2500      	movs	r5, #0
 800edf2:	e7f5      	b.n	800ede0 <strrchr+0x18>

0800edf4 <_localeconv_r>:
 800edf4:	4800      	ldr	r0, [pc, #0]	@ (800edf8 <_localeconv_r+0x4>)
 800edf6:	4770      	bx	lr
 800edf8:	20000168 	.word	0x20000168

0800edfc <_close_r>:
 800edfc:	b538      	push	{r3, r4, r5, lr}
 800edfe:	4d06      	ldr	r5, [pc, #24]	@ (800ee18 <_close_r+0x1c>)
 800ee00:	2300      	movs	r3, #0
 800ee02:	4604      	mov	r4, r0
 800ee04:	4608      	mov	r0, r1
 800ee06:	602b      	str	r3, [r5, #0]
 800ee08:	f7f4 f94a 	bl	80030a0 <_close>
 800ee0c:	1c43      	adds	r3, r0, #1
 800ee0e:	d102      	bne.n	800ee16 <_close_r+0x1a>
 800ee10:	682b      	ldr	r3, [r5, #0]
 800ee12:	b103      	cbz	r3, 800ee16 <_close_r+0x1a>
 800ee14:	6023      	str	r3, [r4, #0]
 800ee16:	bd38      	pop	{r3, r4, r5, pc}
 800ee18:	20000f30 	.word	0x20000f30

0800ee1c <_lseek_r>:
 800ee1c:	b538      	push	{r3, r4, r5, lr}
 800ee1e:	4d07      	ldr	r5, [pc, #28]	@ (800ee3c <_lseek_r+0x20>)
 800ee20:	4604      	mov	r4, r0
 800ee22:	4608      	mov	r0, r1
 800ee24:	4611      	mov	r1, r2
 800ee26:	2200      	movs	r2, #0
 800ee28:	602a      	str	r2, [r5, #0]
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	f7f4 f95f 	bl	80030ee <_lseek>
 800ee30:	1c43      	adds	r3, r0, #1
 800ee32:	d102      	bne.n	800ee3a <_lseek_r+0x1e>
 800ee34:	682b      	ldr	r3, [r5, #0]
 800ee36:	b103      	cbz	r3, 800ee3a <_lseek_r+0x1e>
 800ee38:	6023      	str	r3, [r4, #0]
 800ee3a:	bd38      	pop	{r3, r4, r5, pc}
 800ee3c:	20000f30 	.word	0x20000f30

0800ee40 <_read_r>:
 800ee40:	b538      	push	{r3, r4, r5, lr}
 800ee42:	4d07      	ldr	r5, [pc, #28]	@ (800ee60 <_read_r+0x20>)
 800ee44:	4604      	mov	r4, r0
 800ee46:	4608      	mov	r0, r1
 800ee48:	4611      	mov	r1, r2
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	602a      	str	r2, [r5, #0]
 800ee4e:	461a      	mov	r2, r3
 800ee50:	f7f4 f909 	bl	8003066 <_read>
 800ee54:	1c43      	adds	r3, r0, #1
 800ee56:	d102      	bne.n	800ee5e <_read_r+0x1e>
 800ee58:	682b      	ldr	r3, [r5, #0]
 800ee5a:	b103      	cbz	r3, 800ee5e <_read_r+0x1e>
 800ee5c:	6023      	str	r3, [r4, #0]
 800ee5e:	bd38      	pop	{r3, r4, r5, pc}
 800ee60:	20000f30 	.word	0x20000f30

0800ee64 <_write_r>:
 800ee64:	b538      	push	{r3, r4, r5, lr}
 800ee66:	4d07      	ldr	r5, [pc, #28]	@ (800ee84 <_write_r+0x20>)
 800ee68:	4604      	mov	r4, r0
 800ee6a:	4608      	mov	r0, r1
 800ee6c:	4611      	mov	r1, r2
 800ee6e:	2200      	movs	r2, #0
 800ee70:	602a      	str	r2, [r5, #0]
 800ee72:	461a      	mov	r2, r3
 800ee74:	f7fc fe64 	bl	800bb40 <_write>
 800ee78:	1c43      	adds	r3, r0, #1
 800ee7a:	d102      	bne.n	800ee82 <_write_r+0x1e>
 800ee7c:	682b      	ldr	r3, [r5, #0]
 800ee7e:	b103      	cbz	r3, 800ee82 <_write_r+0x1e>
 800ee80:	6023      	str	r3, [r4, #0]
 800ee82:	bd38      	pop	{r3, r4, r5, pc}
 800ee84:	20000f30 	.word	0x20000f30

0800ee88 <__errno>:
 800ee88:	4b01      	ldr	r3, [pc, #4]	@ (800ee90 <__errno+0x8>)
 800ee8a:	6818      	ldr	r0, [r3, #0]
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop
 800ee90:	20000028 	.word	0x20000028

0800ee94 <__libc_init_array>:
 800ee94:	b570      	push	{r4, r5, r6, lr}
 800ee96:	4d0d      	ldr	r5, [pc, #52]	@ (800eecc <__libc_init_array+0x38>)
 800ee98:	4c0d      	ldr	r4, [pc, #52]	@ (800eed0 <__libc_init_array+0x3c>)
 800ee9a:	1b64      	subs	r4, r4, r5
 800ee9c:	10a4      	asrs	r4, r4, #2
 800ee9e:	2600      	movs	r6, #0
 800eea0:	42a6      	cmp	r6, r4
 800eea2:	d109      	bne.n	800eeb8 <__libc_init_array+0x24>
 800eea4:	4d0b      	ldr	r5, [pc, #44]	@ (800eed4 <__libc_init_array+0x40>)
 800eea6:	4c0c      	ldr	r4, [pc, #48]	@ (800eed8 <__libc_init_array+0x44>)
 800eea8:	f001 fe38 	bl	8010b1c <_init>
 800eeac:	1b64      	subs	r4, r4, r5
 800eeae:	10a4      	asrs	r4, r4, #2
 800eeb0:	2600      	movs	r6, #0
 800eeb2:	42a6      	cmp	r6, r4
 800eeb4:	d105      	bne.n	800eec2 <__libc_init_array+0x2e>
 800eeb6:	bd70      	pop	{r4, r5, r6, pc}
 800eeb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800eebc:	4798      	blx	r3
 800eebe:	3601      	adds	r6, #1
 800eec0:	e7ee      	b.n	800eea0 <__libc_init_array+0xc>
 800eec2:	f855 3b04 	ldr.w	r3, [r5], #4
 800eec6:	4798      	blx	r3
 800eec8:	3601      	adds	r6, #1
 800eeca:	e7f2      	b.n	800eeb2 <__libc_init_array+0x1e>
 800eecc:	080121d0 	.word	0x080121d0
 800eed0:	080121d0 	.word	0x080121d0
 800eed4:	080121d0 	.word	0x080121d0
 800eed8:	080121d4 	.word	0x080121d4

0800eedc <__retarget_lock_init_recursive>:
 800eedc:	4770      	bx	lr

0800eede <__retarget_lock_acquire_recursive>:
 800eede:	4770      	bx	lr

0800eee0 <__retarget_lock_release_recursive>:
 800eee0:	4770      	bx	lr

0800eee2 <memcpy>:
 800eee2:	440a      	add	r2, r1
 800eee4:	4291      	cmp	r1, r2
 800eee6:	f100 33ff 	add.w	r3, r0, #4294967295
 800eeea:	d100      	bne.n	800eeee <memcpy+0xc>
 800eeec:	4770      	bx	lr
 800eeee:	b510      	push	{r4, lr}
 800eef0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eef4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eef8:	4291      	cmp	r1, r2
 800eefa:	d1f9      	bne.n	800eef0 <memcpy+0xe>
 800eefc:	bd10      	pop	{r4, pc}

0800eefe <quorem>:
 800eefe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef02:	6903      	ldr	r3, [r0, #16]
 800ef04:	690c      	ldr	r4, [r1, #16]
 800ef06:	42a3      	cmp	r3, r4
 800ef08:	4607      	mov	r7, r0
 800ef0a:	db7e      	blt.n	800f00a <quorem+0x10c>
 800ef0c:	3c01      	subs	r4, #1
 800ef0e:	f101 0814 	add.w	r8, r1, #20
 800ef12:	00a3      	lsls	r3, r4, #2
 800ef14:	f100 0514 	add.w	r5, r0, #20
 800ef18:	9300      	str	r3, [sp, #0]
 800ef1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef1e:	9301      	str	r3, [sp, #4]
 800ef20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef28:	3301      	adds	r3, #1
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef30:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef34:	d32e      	bcc.n	800ef94 <quorem+0x96>
 800ef36:	f04f 0a00 	mov.w	sl, #0
 800ef3a:	46c4      	mov	ip, r8
 800ef3c:	46ae      	mov	lr, r5
 800ef3e:	46d3      	mov	fp, sl
 800ef40:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ef44:	b298      	uxth	r0, r3
 800ef46:	fb06 a000 	mla	r0, r6, r0, sl
 800ef4a:	0c02      	lsrs	r2, r0, #16
 800ef4c:	0c1b      	lsrs	r3, r3, #16
 800ef4e:	fb06 2303 	mla	r3, r6, r3, r2
 800ef52:	f8de 2000 	ldr.w	r2, [lr]
 800ef56:	b280      	uxth	r0, r0
 800ef58:	b292      	uxth	r2, r2
 800ef5a:	1a12      	subs	r2, r2, r0
 800ef5c:	445a      	add	r2, fp
 800ef5e:	f8de 0000 	ldr.w	r0, [lr]
 800ef62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ef6c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ef70:	b292      	uxth	r2, r2
 800ef72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ef76:	45e1      	cmp	r9, ip
 800ef78:	f84e 2b04 	str.w	r2, [lr], #4
 800ef7c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ef80:	d2de      	bcs.n	800ef40 <quorem+0x42>
 800ef82:	9b00      	ldr	r3, [sp, #0]
 800ef84:	58eb      	ldr	r3, [r5, r3]
 800ef86:	b92b      	cbnz	r3, 800ef94 <quorem+0x96>
 800ef88:	9b01      	ldr	r3, [sp, #4]
 800ef8a:	3b04      	subs	r3, #4
 800ef8c:	429d      	cmp	r5, r3
 800ef8e:	461a      	mov	r2, r3
 800ef90:	d32f      	bcc.n	800eff2 <quorem+0xf4>
 800ef92:	613c      	str	r4, [r7, #16]
 800ef94:	4638      	mov	r0, r7
 800ef96:	f001 f979 	bl	801028c <__mcmp>
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	db25      	blt.n	800efea <quorem+0xec>
 800ef9e:	4629      	mov	r1, r5
 800efa0:	2000      	movs	r0, #0
 800efa2:	f858 2b04 	ldr.w	r2, [r8], #4
 800efa6:	f8d1 c000 	ldr.w	ip, [r1]
 800efaa:	fa1f fe82 	uxth.w	lr, r2
 800efae:	fa1f f38c 	uxth.w	r3, ip
 800efb2:	eba3 030e 	sub.w	r3, r3, lr
 800efb6:	4403      	add	r3, r0
 800efb8:	0c12      	lsrs	r2, r2, #16
 800efba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800efbe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efc8:	45c1      	cmp	r9, r8
 800efca:	f841 3b04 	str.w	r3, [r1], #4
 800efce:	ea4f 4022 	mov.w	r0, r2, asr #16
 800efd2:	d2e6      	bcs.n	800efa2 <quorem+0xa4>
 800efd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efdc:	b922      	cbnz	r2, 800efe8 <quorem+0xea>
 800efde:	3b04      	subs	r3, #4
 800efe0:	429d      	cmp	r5, r3
 800efe2:	461a      	mov	r2, r3
 800efe4:	d30b      	bcc.n	800effe <quorem+0x100>
 800efe6:	613c      	str	r4, [r7, #16]
 800efe8:	3601      	adds	r6, #1
 800efea:	4630      	mov	r0, r6
 800efec:	b003      	add	sp, #12
 800efee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff2:	6812      	ldr	r2, [r2, #0]
 800eff4:	3b04      	subs	r3, #4
 800eff6:	2a00      	cmp	r2, #0
 800eff8:	d1cb      	bne.n	800ef92 <quorem+0x94>
 800effa:	3c01      	subs	r4, #1
 800effc:	e7c6      	b.n	800ef8c <quorem+0x8e>
 800effe:	6812      	ldr	r2, [r2, #0]
 800f000:	3b04      	subs	r3, #4
 800f002:	2a00      	cmp	r2, #0
 800f004:	d1ef      	bne.n	800efe6 <quorem+0xe8>
 800f006:	3c01      	subs	r4, #1
 800f008:	e7ea      	b.n	800efe0 <quorem+0xe2>
 800f00a:	2000      	movs	r0, #0
 800f00c:	e7ee      	b.n	800efec <quorem+0xee>
	...

0800f010 <_dtoa_r>:
 800f010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f014:	69c7      	ldr	r7, [r0, #28]
 800f016:	b099      	sub	sp, #100	@ 0x64
 800f018:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f01c:	ec55 4b10 	vmov	r4, r5, d0
 800f020:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f022:	9109      	str	r1, [sp, #36]	@ 0x24
 800f024:	4683      	mov	fp, r0
 800f026:	920e      	str	r2, [sp, #56]	@ 0x38
 800f028:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f02a:	b97f      	cbnz	r7, 800f04c <_dtoa_r+0x3c>
 800f02c:	2010      	movs	r0, #16
 800f02e:	f000 fdfd 	bl	800fc2c <malloc>
 800f032:	4602      	mov	r2, r0
 800f034:	f8cb 001c 	str.w	r0, [fp, #28]
 800f038:	b920      	cbnz	r0, 800f044 <_dtoa_r+0x34>
 800f03a:	4ba7      	ldr	r3, [pc, #668]	@ (800f2d8 <_dtoa_r+0x2c8>)
 800f03c:	21ef      	movs	r1, #239	@ 0xef
 800f03e:	48a7      	ldr	r0, [pc, #668]	@ (800f2dc <_dtoa_r+0x2cc>)
 800f040:	f001 fcbc 	bl	80109bc <__assert_func>
 800f044:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f048:	6007      	str	r7, [r0, #0]
 800f04a:	60c7      	str	r7, [r0, #12]
 800f04c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f050:	6819      	ldr	r1, [r3, #0]
 800f052:	b159      	cbz	r1, 800f06c <_dtoa_r+0x5c>
 800f054:	685a      	ldr	r2, [r3, #4]
 800f056:	604a      	str	r2, [r1, #4]
 800f058:	2301      	movs	r3, #1
 800f05a:	4093      	lsls	r3, r2
 800f05c:	608b      	str	r3, [r1, #8]
 800f05e:	4658      	mov	r0, fp
 800f060:	f000 feda 	bl	800fe18 <_Bfree>
 800f064:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f068:	2200      	movs	r2, #0
 800f06a:	601a      	str	r2, [r3, #0]
 800f06c:	1e2b      	subs	r3, r5, #0
 800f06e:	bfb9      	ittee	lt
 800f070:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f074:	9303      	strlt	r3, [sp, #12]
 800f076:	2300      	movge	r3, #0
 800f078:	6033      	strge	r3, [r6, #0]
 800f07a:	9f03      	ldr	r7, [sp, #12]
 800f07c:	4b98      	ldr	r3, [pc, #608]	@ (800f2e0 <_dtoa_r+0x2d0>)
 800f07e:	bfbc      	itt	lt
 800f080:	2201      	movlt	r2, #1
 800f082:	6032      	strlt	r2, [r6, #0]
 800f084:	43bb      	bics	r3, r7
 800f086:	d112      	bne.n	800f0ae <_dtoa_r+0x9e>
 800f088:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f08a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f08e:	6013      	str	r3, [r2, #0]
 800f090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f094:	4323      	orrs	r3, r4
 800f096:	f000 854d 	beq.w	800fb34 <_dtoa_r+0xb24>
 800f09a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f09c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f2f4 <_dtoa_r+0x2e4>
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	f000 854f 	beq.w	800fb44 <_dtoa_r+0xb34>
 800f0a6:	f10a 0303 	add.w	r3, sl, #3
 800f0aa:	f000 bd49 	b.w	800fb40 <_dtoa_r+0xb30>
 800f0ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	ec51 0b17 	vmov	r0, r1, d7
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f0be:	f7f1 fceb 	bl	8000a98 <__aeabi_dcmpeq>
 800f0c2:	4680      	mov	r8, r0
 800f0c4:	b158      	cbz	r0, 800f0de <_dtoa_r+0xce>
 800f0c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	6013      	str	r3, [r2, #0]
 800f0cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f0ce:	b113      	cbz	r3, 800f0d6 <_dtoa_r+0xc6>
 800f0d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f0d2:	4b84      	ldr	r3, [pc, #528]	@ (800f2e4 <_dtoa_r+0x2d4>)
 800f0d4:	6013      	str	r3, [r2, #0]
 800f0d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f2f8 <_dtoa_r+0x2e8>
 800f0da:	f000 bd33 	b.w	800fb44 <_dtoa_r+0xb34>
 800f0de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f0e2:	aa16      	add	r2, sp, #88	@ 0x58
 800f0e4:	a917      	add	r1, sp, #92	@ 0x5c
 800f0e6:	4658      	mov	r0, fp
 800f0e8:	f001 f980 	bl	80103ec <__d2b>
 800f0ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f0f0:	4681      	mov	r9, r0
 800f0f2:	2e00      	cmp	r6, #0
 800f0f4:	d077      	beq.n	800f1e6 <_dtoa_r+0x1d6>
 800f0f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f0f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f0fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f104:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f108:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f10c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f110:	4619      	mov	r1, r3
 800f112:	2200      	movs	r2, #0
 800f114:	4b74      	ldr	r3, [pc, #464]	@ (800f2e8 <_dtoa_r+0x2d8>)
 800f116:	f7f1 f89f 	bl	8000258 <__aeabi_dsub>
 800f11a:	a369      	add	r3, pc, #420	@ (adr r3, 800f2c0 <_dtoa_r+0x2b0>)
 800f11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f120:	f7f1 fa52 	bl	80005c8 <__aeabi_dmul>
 800f124:	a368      	add	r3, pc, #416	@ (adr r3, 800f2c8 <_dtoa_r+0x2b8>)
 800f126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12a:	f7f1 f897 	bl	800025c <__adddf3>
 800f12e:	4604      	mov	r4, r0
 800f130:	4630      	mov	r0, r6
 800f132:	460d      	mov	r5, r1
 800f134:	f7f1 f9de 	bl	80004f4 <__aeabi_i2d>
 800f138:	a365      	add	r3, pc, #404	@ (adr r3, 800f2d0 <_dtoa_r+0x2c0>)
 800f13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13e:	f7f1 fa43 	bl	80005c8 <__aeabi_dmul>
 800f142:	4602      	mov	r2, r0
 800f144:	460b      	mov	r3, r1
 800f146:	4620      	mov	r0, r4
 800f148:	4629      	mov	r1, r5
 800f14a:	f7f1 f887 	bl	800025c <__adddf3>
 800f14e:	4604      	mov	r4, r0
 800f150:	460d      	mov	r5, r1
 800f152:	f7f1 fce9 	bl	8000b28 <__aeabi_d2iz>
 800f156:	2200      	movs	r2, #0
 800f158:	4607      	mov	r7, r0
 800f15a:	2300      	movs	r3, #0
 800f15c:	4620      	mov	r0, r4
 800f15e:	4629      	mov	r1, r5
 800f160:	f7f1 fca4 	bl	8000aac <__aeabi_dcmplt>
 800f164:	b140      	cbz	r0, 800f178 <_dtoa_r+0x168>
 800f166:	4638      	mov	r0, r7
 800f168:	f7f1 f9c4 	bl	80004f4 <__aeabi_i2d>
 800f16c:	4622      	mov	r2, r4
 800f16e:	462b      	mov	r3, r5
 800f170:	f7f1 fc92 	bl	8000a98 <__aeabi_dcmpeq>
 800f174:	b900      	cbnz	r0, 800f178 <_dtoa_r+0x168>
 800f176:	3f01      	subs	r7, #1
 800f178:	2f16      	cmp	r7, #22
 800f17a:	d851      	bhi.n	800f220 <_dtoa_r+0x210>
 800f17c:	4b5b      	ldr	r3, [pc, #364]	@ (800f2ec <_dtoa_r+0x2dc>)
 800f17e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f18a:	f7f1 fc8f 	bl	8000aac <__aeabi_dcmplt>
 800f18e:	2800      	cmp	r0, #0
 800f190:	d048      	beq.n	800f224 <_dtoa_r+0x214>
 800f192:	3f01      	subs	r7, #1
 800f194:	2300      	movs	r3, #0
 800f196:	9312      	str	r3, [sp, #72]	@ 0x48
 800f198:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f19a:	1b9b      	subs	r3, r3, r6
 800f19c:	1e5a      	subs	r2, r3, #1
 800f19e:	bf44      	itt	mi
 800f1a0:	f1c3 0801 	rsbmi	r8, r3, #1
 800f1a4:	2300      	movmi	r3, #0
 800f1a6:	9208      	str	r2, [sp, #32]
 800f1a8:	bf54      	ite	pl
 800f1aa:	f04f 0800 	movpl.w	r8, #0
 800f1ae:	9308      	strmi	r3, [sp, #32]
 800f1b0:	2f00      	cmp	r7, #0
 800f1b2:	db39      	blt.n	800f228 <_dtoa_r+0x218>
 800f1b4:	9b08      	ldr	r3, [sp, #32]
 800f1b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f1b8:	443b      	add	r3, r7
 800f1ba:	9308      	str	r3, [sp, #32]
 800f1bc:	2300      	movs	r3, #0
 800f1be:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1c2:	2b09      	cmp	r3, #9
 800f1c4:	d864      	bhi.n	800f290 <_dtoa_r+0x280>
 800f1c6:	2b05      	cmp	r3, #5
 800f1c8:	bfc4      	itt	gt
 800f1ca:	3b04      	subgt	r3, #4
 800f1cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1d0:	f1a3 0302 	sub.w	r3, r3, #2
 800f1d4:	bfcc      	ite	gt
 800f1d6:	2400      	movgt	r4, #0
 800f1d8:	2401      	movle	r4, #1
 800f1da:	2b03      	cmp	r3, #3
 800f1dc:	d863      	bhi.n	800f2a6 <_dtoa_r+0x296>
 800f1de:	e8df f003 	tbb	[pc, r3]
 800f1e2:	372a      	.short	0x372a
 800f1e4:	5535      	.short	0x5535
 800f1e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f1ea:	441e      	add	r6, r3
 800f1ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f1f0:	2b20      	cmp	r3, #32
 800f1f2:	bfc1      	itttt	gt
 800f1f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f1f8:	409f      	lslgt	r7, r3
 800f1fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f1fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f202:	bfd6      	itet	le
 800f204:	f1c3 0320 	rsble	r3, r3, #32
 800f208:	ea47 0003 	orrgt.w	r0, r7, r3
 800f20c:	fa04 f003 	lslle.w	r0, r4, r3
 800f210:	f7f1 f960 	bl	80004d4 <__aeabi_ui2d>
 800f214:	2201      	movs	r2, #1
 800f216:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f21a:	3e01      	subs	r6, #1
 800f21c:	9214      	str	r2, [sp, #80]	@ 0x50
 800f21e:	e777      	b.n	800f110 <_dtoa_r+0x100>
 800f220:	2301      	movs	r3, #1
 800f222:	e7b8      	b.n	800f196 <_dtoa_r+0x186>
 800f224:	9012      	str	r0, [sp, #72]	@ 0x48
 800f226:	e7b7      	b.n	800f198 <_dtoa_r+0x188>
 800f228:	427b      	negs	r3, r7
 800f22a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f22c:	2300      	movs	r3, #0
 800f22e:	eba8 0807 	sub.w	r8, r8, r7
 800f232:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f234:	e7c4      	b.n	800f1c0 <_dtoa_r+0x1b0>
 800f236:	2300      	movs	r3, #0
 800f238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f23a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	dc35      	bgt.n	800f2ac <_dtoa_r+0x29c>
 800f240:	2301      	movs	r3, #1
 800f242:	9300      	str	r3, [sp, #0]
 800f244:	9307      	str	r3, [sp, #28]
 800f246:	461a      	mov	r2, r3
 800f248:	920e      	str	r2, [sp, #56]	@ 0x38
 800f24a:	e00b      	b.n	800f264 <_dtoa_r+0x254>
 800f24c:	2301      	movs	r3, #1
 800f24e:	e7f3      	b.n	800f238 <_dtoa_r+0x228>
 800f250:	2300      	movs	r3, #0
 800f252:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f256:	18fb      	adds	r3, r7, r3
 800f258:	9300      	str	r3, [sp, #0]
 800f25a:	3301      	adds	r3, #1
 800f25c:	2b01      	cmp	r3, #1
 800f25e:	9307      	str	r3, [sp, #28]
 800f260:	bfb8      	it	lt
 800f262:	2301      	movlt	r3, #1
 800f264:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f268:	2100      	movs	r1, #0
 800f26a:	2204      	movs	r2, #4
 800f26c:	f102 0514 	add.w	r5, r2, #20
 800f270:	429d      	cmp	r5, r3
 800f272:	d91f      	bls.n	800f2b4 <_dtoa_r+0x2a4>
 800f274:	6041      	str	r1, [r0, #4]
 800f276:	4658      	mov	r0, fp
 800f278:	f000 fd8e 	bl	800fd98 <_Balloc>
 800f27c:	4682      	mov	sl, r0
 800f27e:	2800      	cmp	r0, #0
 800f280:	d13c      	bne.n	800f2fc <_dtoa_r+0x2ec>
 800f282:	4b1b      	ldr	r3, [pc, #108]	@ (800f2f0 <_dtoa_r+0x2e0>)
 800f284:	4602      	mov	r2, r0
 800f286:	f240 11af 	movw	r1, #431	@ 0x1af
 800f28a:	e6d8      	b.n	800f03e <_dtoa_r+0x2e>
 800f28c:	2301      	movs	r3, #1
 800f28e:	e7e0      	b.n	800f252 <_dtoa_r+0x242>
 800f290:	2401      	movs	r4, #1
 800f292:	2300      	movs	r3, #0
 800f294:	9309      	str	r3, [sp, #36]	@ 0x24
 800f296:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f298:	f04f 33ff 	mov.w	r3, #4294967295
 800f29c:	9300      	str	r3, [sp, #0]
 800f29e:	9307      	str	r3, [sp, #28]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	2312      	movs	r3, #18
 800f2a4:	e7d0      	b.n	800f248 <_dtoa_r+0x238>
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2aa:	e7f5      	b.n	800f298 <_dtoa_r+0x288>
 800f2ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2ae:	9300      	str	r3, [sp, #0]
 800f2b0:	9307      	str	r3, [sp, #28]
 800f2b2:	e7d7      	b.n	800f264 <_dtoa_r+0x254>
 800f2b4:	3101      	adds	r1, #1
 800f2b6:	0052      	lsls	r2, r2, #1
 800f2b8:	e7d8      	b.n	800f26c <_dtoa_r+0x25c>
 800f2ba:	bf00      	nop
 800f2bc:	f3af 8000 	nop.w
 800f2c0:	636f4361 	.word	0x636f4361
 800f2c4:	3fd287a7 	.word	0x3fd287a7
 800f2c8:	8b60c8b3 	.word	0x8b60c8b3
 800f2cc:	3fc68a28 	.word	0x3fc68a28
 800f2d0:	509f79fb 	.word	0x509f79fb
 800f2d4:	3fd34413 	.word	0x3fd34413
 800f2d8:	08011e97 	.word	0x08011e97
 800f2dc:	08011eae 	.word	0x08011eae
 800f2e0:	7ff00000 	.word	0x7ff00000
 800f2e4:	08011e67 	.word	0x08011e67
 800f2e8:	3ff80000 	.word	0x3ff80000
 800f2ec:	08011fa8 	.word	0x08011fa8
 800f2f0:	08011f06 	.word	0x08011f06
 800f2f4:	08011e93 	.word	0x08011e93
 800f2f8:	08011e66 	.word	0x08011e66
 800f2fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f300:	6018      	str	r0, [r3, #0]
 800f302:	9b07      	ldr	r3, [sp, #28]
 800f304:	2b0e      	cmp	r3, #14
 800f306:	f200 80a4 	bhi.w	800f452 <_dtoa_r+0x442>
 800f30a:	2c00      	cmp	r4, #0
 800f30c:	f000 80a1 	beq.w	800f452 <_dtoa_r+0x442>
 800f310:	2f00      	cmp	r7, #0
 800f312:	dd33      	ble.n	800f37c <_dtoa_r+0x36c>
 800f314:	4bad      	ldr	r3, [pc, #692]	@ (800f5cc <_dtoa_r+0x5bc>)
 800f316:	f007 020f 	and.w	r2, r7, #15
 800f31a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f31e:	ed93 7b00 	vldr	d7, [r3]
 800f322:	05f8      	lsls	r0, r7, #23
 800f324:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f328:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f32c:	d516      	bpl.n	800f35c <_dtoa_r+0x34c>
 800f32e:	4ba8      	ldr	r3, [pc, #672]	@ (800f5d0 <_dtoa_r+0x5c0>)
 800f330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f338:	f7f1 fa70 	bl	800081c <__aeabi_ddiv>
 800f33c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f340:	f004 040f 	and.w	r4, r4, #15
 800f344:	2603      	movs	r6, #3
 800f346:	4da2      	ldr	r5, [pc, #648]	@ (800f5d0 <_dtoa_r+0x5c0>)
 800f348:	b954      	cbnz	r4, 800f360 <_dtoa_r+0x350>
 800f34a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f352:	f7f1 fa63 	bl	800081c <__aeabi_ddiv>
 800f356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f35a:	e028      	b.n	800f3ae <_dtoa_r+0x39e>
 800f35c:	2602      	movs	r6, #2
 800f35e:	e7f2      	b.n	800f346 <_dtoa_r+0x336>
 800f360:	07e1      	lsls	r1, r4, #31
 800f362:	d508      	bpl.n	800f376 <_dtoa_r+0x366>
 800f364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f368:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f36c:	f7f1 f92c 	bl	80005c8 <__aeabi_dmul>
 800f370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f374:	3601      	adds	r6, #1
 800f376:	1064      	asrs	r4, r4, #1
 800f378:	3508      	adds	r5, #8
 800f37a:	e7e5      	b.n	800f348 <_dtoa_r+0x338>
 800f37c:	f000 80d2 	beq.w	800f524 <_dtoa_r+0x514>
 800f380:	427c      	negs	r4, r7
 800f382:	4b92      	ldr	r3, [pc, #584]	@ (800f5cc <_dtoa_r+0x5bc>)
 800f384:	4d92      	ldr	r5, [pc, #584]	@ (800f5d0 <_dtoa_r+0x5c0>)
 800f386:	f004 020f 	and.w	r2, r4, #15
 800f38a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f392:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f396:	f7f1 f917 	bl	80005c8 <__aeabi_dmul>
 800f39a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f39e:	1124      	asrs	r4, r4, #4
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	2602      	movs	r6, #2
 800f3a4:	2c00      	cmp	r4, #0
 800f3a6:	f040 80b2 	bne.w	800f50e <_dtoa_r+0x4fe>
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d1d3      	bne.n	800f356 <_dtoa_r+0x346>
 800f3ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f3b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	f000 80b7 	beq.w	800f528 <_dtoa_r+0x518>
 800f3ba:	4b86      	ldr	r3, [pc, #536]	@ (800f5d4 <_dtoa_r+0x5c4>)
 800f3bc:	2200      	movs	r2, #0
 800f3be:	4620      	mov	r0, r4
 800f3c0:	4629      	mov	r1, r5
 800f3c2:	f7f1 fb73 	bl	8000aac <__aeabi_dcmplt>
 800f3c6:	2800      	cmp	r0, #0
 800f3c8:	f000 80ae 	beq.w	800f528 <_dtoa_r+0x518>
 800f3cc:	9b07      	ldr	r3, [sp, #28]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	f000 80aa 	beq.w	800f528 <_dtoa_r+0x518>
 800f3d4:	9b00      	ldr	r3, [sp, #0]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	dd37      	ble.n	800f44a <_dtoa_r+0x43a>
 800f3da:	1e7b      	subs	r3, r7, #1
 800f3dc:	9304      	str	r3, [sp, #16]
 800f3de:	4620      	mov	r0, r4
 800f3e0:	4b7d      	ldr	r3, [pc, #500]	@ (800f5d8 <_dtoa_r+0x5c8>)
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	4629      	mov	r1, r5
 800f3e6:	f7f1 f8ef 	bl	80005c8 <__aeabi_dmul>
 800f3ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3ee:	9c00      	ldr	r4, [sp, #0]
 800f3f0:	3601      	adds	r6, #1
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	f7f1 f87e 	bl	80004f4 <__aeabi_i2d>
 800f3f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3fc:	f7f1 f8e4 	bl	80005c8 <__aeabi_dmul>
 800f400:	4b76      	ldr	r3, [pc, #472]	@ (800f5dc <_dtoa_r+0x5cc>)
 800f402:	2200      	movs	r2, #0
 800f404:	f7f0 ff2a 	bl	800025c <__adddf3>
 800f408:	4605      	mov	r5, r0
 800f40a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f40e:	2c00      	cmp	r4, #0
 800f410:	f040 808d 	bne.w	800f52e <_dtoa_r+0x51e>
 800f414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f418:	4b71      	ldr	r3, [pc, #452]	@ (800f5e0 <_dtoa_r+0x5d0>)
 800f41a:	2200      	movs	r2, #0
 800f41c:	f7f0 ff1c 	bl	8000258 <__aeabi_dsub>
 800f420:	4602      	mov	r2, r0
 800f422:	460b      	mov	r3, r1
 800f424:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f428:	462a      	mov	r2, r5
 800f42a:	4633      	mov	r3, r6
 800f42c:	f7f1 fb5c 	bl	8000ae8 <__aeabi_dcmpgt>
 800f430:	2800      	cmp	r0, #0
 800f432:	f040 828b 	bne.w	800f94c <_dtoa_r+0x93c>
 800f436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f43a:	462a      	mov	r2, r5
 800f43c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f440:	f7f1 fb34 	bl	8000aac <__aeabi_dcmplt>
 800f444:	2800      	cmp	r0, #0
 800f446:	f040 8128 	bne.w	800f69a <_dtoa_r+0x68a>
 800f44a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f44e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f452:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f454:	2b00      	cmp	r3, #0
 800f456:	f2c0 815a 	blt.w	800f70e <_dtoa_r+0x6fe>
 800f45a:	2f0e      	cmp	r7, #14
 800f45c:	f300 8157 	bgt.w	800f70e <_dtoa_r+0x6fe>
 800f460:	4b5a      	ldr	r3, [pc, #360]	@ (800f5cc <_dtoa_r+0x5bc>)
 800f462:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f466:	ed93 7b00 	vldr	d7, [r3]
 800f46a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	ed8d 7b00 	vstr	d7, [sp]
 800f472:	da03      	bge.n	800f47c <_dtoa_r+0x46c>
 800f474:	9b07      	ldr	r3, [sp, #28]
 800f476:	2b00      	cmp	r3, #0
 800f478:	f340 8101 	ble.w	800f67e <_dtoa_r+0x66e>
 800f47c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f480:	4656      	mov	r6, sl
 800f482:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f486:	4620      	mov	r0, r4
 800f488:	4629      	mov	r1, r5
 800f48a:	f7f1 f9c7 	bl	800081c <__aeabi_ddiv>
 800f48e:	f7f1 fb4b 	bl	8000b28 <__aeabi_d2iz>
 800f492:	4680      	mov	r8, r0
 800f494:	f7f1 f82e 	bl	80004f4 <__aeabi_i2d>
 800f498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f49c:	f7f1 f894 	bl	80005c8 <__aeabi_dmul>
 800f4a0:	4602      	mov	r2, r0
 800f4a2:	460b      	mov	r3, r1
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	4629      	mov	r1, r5
 800f4a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f4ac:	f7f0 fed4 	bl	8000258 <__aeabi_dsub>
 800f4b0:	f806 4b01 	strb.w	r4, [r6], #1
 800f4b4:	9d07      	ldr	r5, [sp, #28]
 800f4b6:	eba6 040a 	sub.w	r4, r6, sl
 800f4ba:	42a5      	cmp	r5, r4
 800f4bc:	4602      	mov	r2, r0
 800f4be:	460b      	mov	r3, r1
 800f4c0:	f040 8117 	bne.w	800f6f2 <_dtoa_r+0x6e2>
 800f4c4:	f7f0 feca 	bl	800025c <__adddf3>
 800f4c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4cc:	4604      	mov	r4, r0
 800f4ce:	460d      	mov	r5, r1
 800f4d0:	f7f1 fb0a 	bl	8000ae8 <__aeabi_dcmpgt>
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	f040 80f9 	bne.w	800f6cc <_dtoa_r+0x6bc>
 800f4da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4de:	4620      	mov	r0, r4
 800f4e0:	4629      	mov	r1, r5
 800f4e2:	f7f1 fad9 	bl	8000a98 <__aeabi_dcmpeq>
 800f4e6:	b118      	cbz	r0, 800f4f0 <_dtoa_r+0x4e0>
 800f4e8:	f018 0f01 	tst.w	r8, #1
 800f4ec:	f040 80ee 	bne.w	800f6cc <_dtoa_r+0x6bc>
 800f4f0:	4649      	mov	r1, r9
 800f4f2:	4658      	mov	r0, fp
 800f4f4:	f000 fc90 	bl	800fe18 <_Bfree>
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	7033      	strb	r3, [r6, #0]
 800f4fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f4fe:	3701      	adds	r7, #1
 800f500:	601f      	str	r7, [r3, #0]
 800f502:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f504:	2b00      	cmp	r3, #0
 800f506:	f000 831d 	beq.w	800fb44 <_dtoa_r+0xb34>
 800f50a:	601e      	str	r6, [r3, #0]
 800f50c:	e31a      	b.n	800fb44 <_dtoa_r+0xb34>
 800f50e:	07e2      	lsls	r2, r4, #31
 800f510:	d505      	bpl.n	800f51e <_dtoa_r+0x50e>
 800f512:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f516:	f7f1 f857 	bl	80005c8 <__aeabi_dmul>
 800f51a:	3601      	adds	r6, #1
 800f51c:	2301      	movs	r3, #1
 800f51e:	1064      	asrs	r4, r4, #1
 800f520:	3508      	adds	r5, #8
 800f522:	e73f      	b.n	800f3a4 <_dtoa_r+0x394>
 800f524:	2602      	movs	r6, #2
 800f526:	e742      	b.n	800f3ae <_dtoa_r+0x39e>
 800f528:	9c07      	ldr	r4, [sp, #28]
 800f52a:	9704      	str	r7, [sp, #16]
 800f52c:	e761      	b.n	800f3f2 <_dtoa_r+0x3e2>
 800f52e:	4b27      	ldr	r3, [pc, #156]	@ (800f5cc <_dtoa_r+0x5bc>)
 800f530:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f532:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f536:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f53a:	4454      	add	r4, sl
 800f53c:	2900      	cmp	r1, #0
 800f53e:	d053      	beq.n	800f5e8 <_dtoa_r+0x5d8>
 800f540:	4928      	ldr	r1, [pc, #160]	@ (800f5e4 <_dtoa_r+0x5d4>)
 800f542:	2000      	movs	r0, #0
 800f544:	f7f1 f96a 	bl	800081c <__aeabi_ddiv>
 800f548:	4633      	mov	r3, r6
 800f54a:	462a      	mov	r2, r5
 800f54c:	f7f0 fe84 	bl	8000258 <__aeabi_dsub>
 800f550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f554:	4656      	mov	r6, sl
 800f556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f55a:	f7f1 fae5 	bl	8000b28 <__aeabi_d2iz>
 800f55e:	4605      	mov	r5, r0
 800f560:	f7f0 ffc8 	bl	80004f4 <__aeabi_i2d>
 800f564:	4602      	mov	r2, r0
 800f566:	460b      	mov	r3, r1
 800f568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f56c:	f7f0 fe74 	bl	8000258 <__aeabi_dsub>
 800f570:	3530      	adds	r5, #48	@ 0x30
 800f572:	4602      	mov	r2, r0
 800f574:	460b      	mov	r3, r1
 800f576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f57a:	f806 5b01 	strb.w	r5, [r6], #1
 800f57e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f582:	f7f1 fa93 	bl	8000aac <__aeabi_dcmplt>
 800f586:	2800      	cmp	r0, #0
 800f588:	d171      	bne.n	800f66e <_dtoa_r+0x65e>
 800f58a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f58e:	4911      	ldr	r1, [pc, #68]	@ (800f5d4 <_dtoa_r+0x5c4>)
 800f590:	2000      	movs	r0, #0
 800f592:	f7f0 fe61 	bl	8000258 <__aeabi_dsub>
 800f596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f59a:	f7f1 fa87 	bl	8000aac <__aeabi_dcmplt>
 800f59e:	2800      	cmp	r0, #0
 800f5a0:	f040 8095 	bne.w	800f6ce <_dtoa_r+0x6be>
 800f5a4:	42a6      	cmp	r6, r4
 800f5a6:	f43f af50 	beq.w	800f44a <_dtoa_r+0x43a>
 800f5aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f5ae:	4b0a      	ldr	r3, [pc, #40]	@ (800f5d8 <_dtoa_r+0x5c8>)
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	f7f1 f809 	bl	80005c8 <__aeabi_dmul>
 800f5b6:	4b08      	ldr	r3, [pc, #32]	@ (800f5d8 <_dtoa_r+0x5c8>)
 800f5b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5bc:	2200      	movs	r2, #0
 800f5be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5c2:	f7f1 f801 	bl	80005c8 <__aeabi_dmul>
 800f5c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5ca:	e7c4      	b.n	800f556 <_dtoa_r+0x546>
 800f5cc:	08011fa8 	.word	0x08011fa8
 800f5d0:	08011f80 	.word	0x08011f80
 800f5d4:	3ff00000 	.word	0x3ff00000
 800f5d8:	40240000 	.word	0x40240000
 800f5dc:	401c0000 	.word	0x401c0000
 800f5e0:	40140000 	.word	0x40140000
 800f5e4:	3fe00000 	.word	0x3fe00000
 800f5e8:	4631      	mov	r1, r6
 800f5ea:	4628      	mov	r0, r5
 800f5ec:	f7f0 ffec 	bl	80005c8 <__aeabi_dmul>
 800f5f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5f4:	9415      	str	r4, [sp, #84]	@ 0x54
 800f5f6:	4656      	mov	r6, sl
 800f5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5fc:	f7f1 fa94 	bl	8000b28 <__aeabi_d2iz>
 800f600:	4605      	mov	r5, r0
 800f602:	f7f0 ff77 	bl	80004f4 <__aeabi_i2d>
 800f606:	4602      	mov	r2, r0
 800f608:	460b      	mov	r3, r1
 800f60a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f60e:	f7f0 fe23 	bl	8000258 <__aeabi_dsub>
 800f612:	3530      	adds	r5, #48	@ 0x30
 800f614:	f806 5b01 	strb.w	r5, [r6], #1
 800f618:	4602      	mov	r2, r0
 800f61a:	460b      	mov	r3, r1
 800f61c:	42a6      	cmp	r6, r4
 800f61e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f622:	f04f 0200 	mov.w	r2, #0
 800f626:	d124      	bne.n	800f672 <_dtoa_r+0x662>
 800f628:	4bac      	ldr	r3, [pc, #688]	@ (800f8dc <_dtoa_r+0x8cc>)
 800f62a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f62e:	f7f0 fe15 	bl	800025c <__adddf3>
 800f632:	4602      	mov	r2, r0
 800f634:	460b      	mov	r3, r1
 800f636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f63a:	f7f1 fa55 	bl	8000ae8 <__aeabi_dcmpgt>
 800f63e:	2800      	cmp	r0, #0
 800f640:	d145      	bne.n	800f6ce <_dtoa_r+0x6be>
 800f642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f646:	49a5      	ldr	r1, [pc, #660]	@ (800f8dc <_dtoa_r+0x8cc>)
 800f648:	2000      	movs	r0, #0
 800f64a:	f7f0 fe05 	bl	8000258 <__aeabi_dsub>
 800f64e:	4602      	mov	r2, r0
 800f650:	460b      	mov	r3, r1
 800f652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f656:	f7f1 fa29 	bl	8000aac <__aeabi_dcmplt>
 800f65a:	2800      	cmp	r0, #0
 800f65c:	f43f aef5 	beq.w	800f44a <_dtoa_r+0x43a>
 800f660:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f662:	1e73      	subs	r3, r6, #1
 800f664:	9315      	str	r3, [sp, #84]	@ 0x54
 800f666:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f66a:	2b30      	cmp	r3, #48	@ 0x30
 800f66c:	d0f8      	beq.n	800f660 <_dtoa_r+0x650>
 800f66e:	9f04      	ldr	r7, [sp, #16]
 800f670:	e73e      	b.n	800f4f0 <_dtoa_r+0x4e0>
 800f672:	4b9b      	ldr	r3, [pc, #620]	@ (800f8e0 <_dtoa_r+0x8d0>)
 800f674:	f7f0 ffa8 	bl	80005c8 <__aeabi_dmul>
 800f678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f67c:	e7bc      	b.n	800f5f8 <_dtoa_r+0x5e8>
 800f67e:	d10c      	bne.n	800f69a <_dtoa_r+0x68a>
 800f680:	4b98      	ldr	r3, [pc, #608]	@ (800f8e4 <_dtoa_r+0x8d4>)
 800f682:	2200      	movs	r2, #0
 800f684:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f688:	f7f0 ff9e 	bl	80005c8 <__aeabi_dmul>
 800f68c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f690:	f7f1 fa20 	bl	8000ad4 <__aeabi_dcmpge>
 800f694:	2800      	cmp	r0, #0
 800f696:	f000 8157 	beq.w	800f948 <_dtoa_r+0x938>
 800f69a:	2400      	movs	r4, #0
 800f69c:	4625      	mov	r5, r4
 800f69e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6a0:	43db      	mvns	r3, r3
 800f6a2:	9304      	str	r3, [sp, #16]
 800f6a4:	4656      	mov	r6, sl
 800f6a6:	2700      	movs	r7, #0
 800f6a8:	4621      	mov	r1, r4
 800f6aa:	4658      	mov	r0, fp
 800f6ac:	f000 fbb4 	bl	800fe18 <_Bfree>
 800f6b0:	2d00      	cmp	r5, #0
 800f6b2:	d0dc      	beq.n	800f66e <_dtoa_r+0x65e>
 800f6b4:	b12f      	cbz	r7, 800f6c2 <_dtoa_r+0x6b2>
 800f6b6:	42af      	cmp	r7, r5
 800f6b8:	d003      	beq.n	800f6c2 <_dtoa_r+0x6b2>
 800f6ba:	4639      	mov	r1, r7
 800f6bc:	4658      	mov	r0, fp
 800f6be:	f000 fbab 	bl	800fe18 <_Bfree>
 800f6c2:	4629      	mov	r1, r5
 800f6c4:	4658      	mov	r0, fp
 800f6c6:	f000 fba7 	bl	800fe18 <_Bfree>
 800f6ca:	e7d0      	b.n	800f66e <_dtoa_r+0x65e>
 800f6cc:	9704      	str	r7, [sp, #16]
 800f6ce:	4633      	mov	r3, r6
 800f6d0:	461e      	mov	r6, r3
 800f6d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f6d6:	2a39      	cmp	r2, #57	@ 0x39
 800f6d8:	d107      	bne.n	800f6ea <_dtoa_r+0x6da>
 800f6da:	459a      	cmp	sl, r3
 800f6dc:	d1f8      	bne.n	800f6d0 <_dtoa_r+0x6c0>
 800f6de:	9a04      	ldr	r2, [sp, #16]
 800f6e0:	3201      	adds	r2, #1
 800f6e2:	9204      	str	r2, [sp, #16]
 800f6e4:	2230      	movs	r2, #48	@ 0x30
 800f6e6:	f88a 2000 	strb.w	r2, [sl]
 800f6ea:	781a      	ldrb	r2, [r3, #0]
 800f6ec:	3201      	adds	r2, #1
 800f6ee:	701a      	strb	r2, [r3, #0]
 800f6f0:	e7bd      	b.n	800f66e <_dtoa_r+0x65e>
 800f6f2:	4b7b      	ldr	r3, [pc, #492]	@ (800f8e0 <_dtoa_r+0x8d0>)
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	f7f0 ff67 	bl	80005c8 <__aeabi_dmul>
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	4604      	mov	r4, r0
 800f700:	460d      	mov	r5, r1
 800f702:	f7f1 f9c9 	bl	8000a98 <__aeabi_dcmpeq>
 800f706:	2800      	cmp	r0, #0
 800f708:	f43f aebb 	beq.w	800f482 <_dtoa_r+0x472>
 800f70c:	e6f0      	b.n	800f4f0 <_dtoa_r+0x4e0>
 800f70e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f710:	2a00      	cmp	r2, #0
 800f712:	f000 80db 	beq.w	800f8cc <_dtoa_r+0x8bc>
 800f716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f718:	2a01      	cmp	r2, #1
 800f71a:	f300 80bf 	bgt.w	800f89c <_dtoa_r+0x88c>
 800f71e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f720:	2a00      	cmp	r2, #0
 800f722:	f000 80b7 	beq.w	800f894 <_dtoa_r+0x884>
 800f726:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f72a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f72c:	4646      	mov	r6, r8
 800f72e:	9a08      	ldr	r2, [sp, #32]
 800f730:	2101      	movs	r1, #1
 800f732:	441a      	add	r2, r3
 800f734:	4658      	mov	r0, fp
 800f736:	4498      	add	r8, r3
 800f738:	9208      	str	r2, [sp, #32]
 800f73a:	f000 fc21 	bl	800ff80 <__i2b>
 800f73e:	4605      	mov	r5, r0
 800f740:	b15e      	cbz	r6, 800f75a <_dtoa_r+0x74a>
 800f742:	9b08      	ldr	r3, [sp, #32]
 800f744:	2b00      	cmp	r3, #0
 800f746:	dd08      	ble.n	800f75a <_dtoa_r+0x74a>
 800f748:	42b3      	cmp	r3, r6
 800f74a:	9a08      	ldr	r2, [sp, #32]
 800f74c:	bfa8      	it	ge
 800f74e:	4633      	movge	r3, r6
 800f750:	eba8 0803 	sub.w	r8, r8, r3
 800f754:	1af6      	subs	r6, r6, r3
 800f756:	1ad3      	subs	r3, r2, r3
 800f758:	9308      	str	r3, [sp, #32]
 800f75a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f75c:	b1f3      	cbz	r3, 800f79c <_dtoa_r+0x78c>
 800f75e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f760:	2b00      	cmp	r3, #0
 800f762:	f000 80b7 	beq.w	800f8d4 <_dtoa_r+0x8c4>
 800f766:	b18c      	cbz	r4, 800f78c <_dtoa_r+0x77c>
 800f768:	4629      	mov	r1, r5
 800f76a:	4622      	mov	r2, r4
 800f76c:	4658      	mov	r0, fp
 800f76e:	f000 fcc7 	bl	8010100 <__pow5mult>
 800f772:	464a      	mov	r2, r9
 800f774:	4601      	mov	r1, r0
 800f776:	4605      	mov	r5, r0
 800f778:	4658      	mov	r0, fp
 800f77a:	f000 fc17 	bl	800ffac <__multiply>
 800f77e:	4649      	mov	r1, r9
 800f780:	9004      	str	r0, [sp, #16]
 800f782:	4658      	mov	r0, fp
 800f784:	f000 fb48 	bl	800fe18 <_Bfree>
 800f788:	9b04      	ldr	r3, [sp, #16]
 800f78a:	4699      	mov	r9, r3
 800f78c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f78e:	1b1a      	subs	r2, r3, r4
 800f790:	d004      	beq.n	800f79c <_dtoa_r+0x78c>
 800f792:	4649      	mov	r1, r9
 800f794:	4658      	mov	r0, fp
 800f796:	f000 fcb3 	bl	8010100 <__pow5mult>
 800f79a:	4681      	mov	r9, r0
 800f79c:	2101      	movs	r1, #1
 800f79e:	4658      	mov	r0, fp
 800f7a0:	f000 fbee 	bl	800ff80 <__i2b>
 800f7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7a6:	4604      	mov	r4, r0
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	f000 81cf 	beq.w	800fb4c <_dtoa_r+0xb3c>
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	4601      	mov	r1, r0
 800f7b2:	4658      	mov	r0, fp
 800f7b4:	f000 fca4 	bl	8010100 <__pow5mult>
 800f7b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7ba:	2b01      	cmp	r3, #1
 800f7bc:	4604      	mov	r4, r0
 800f7be:	f300 8095 	bgt.w	800f8ec <_dtoa_r+0x8dc>
 800f7c2:	9b02      	ldr	r3, [sp, #8]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	f040 8087 	bne.w	800f8d8 <_dtoa_r+0x8c8>
 800f7ca:	9b03      	ldr	r3, [sp, #12]
 800f7cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	f040 8089 	bne.w	800f8e8 <_dtoa_r+0x8d8>
 800f7d6:	9b03      	ldr	r3, [sp, #12]
 800f7d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f7dc:	0d1b      	lsrs	r3, r3, #20
 800f7de:	051b      	lsls	r3, r3, #20
 800f7e0:	b12b      	cbz	r3, 800f7ee <_dtoa_r+0x7de>
 800f7e2:	9b08      	ldr	r3, [sp, #32]
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	9308      	str	r3, [sp, #32]
 800f7e8:	f108 0801 	add.w	r8, r8, #1
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	f000 81b0 	beq.w	800fb58 <_dtoa_r+0xb48>
 800f7f8:	6923      	ldr	r3, [r4, #16]
 800f7fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f7fe:	6918      	ldr	r0, [r3, #16]
 800f800:	f000 fb72 	bl	800fee8 <__hi0bits>
 800f804:	f1c0 0020 	rsb	r0, r0, #32
 800f808:	9b08      	ldr	r3, [sp, #32]
 800f80a:	4418      	add	r0, r3
 800f80c:	f010 001f 	ands.w	r0, r0, #31
 800f810:	d077      	beq.n	800f902 <_dtoa_r+0x8f2>
 800f812:	f1c0 0320 	rsb	r3, r0, #32
 800f816:	2b04      	cmp	r3, #4
 800f818:	dd6b      	ble.n	800f8f2 <_dtoa_r+0x8e2>
 800f81a:	9b08      	ldr	r3, [sp, #32]
 800f81c:	f1c0 001c 	rsb	r0, r0, #28
 800f820:	4403      	add	r3, r0
 800f822:	4480      	add	r8, r0
 800f824:	4406      	add	r6, r0
 800f826:	9308      	str	r3, [sp, #32]
 800f828:	f1b8 0f00 	cmp.w	r8, #0
 800f82c:	dd05      	ble.n	800f83a <_dtoa_r+0x82a>
 800f82e:	4649      	mov	r1, r9
 800f830:	4642      	mov	r2, r8
 800f832:	4658      	mov	r0, fp
 800f834:	f000 fcbe 	bl	80101b4 <__lshift>
 800f838:	4681      	mov	r9, r0
 800f83a:	9b08      	ldr	r3, [sp, #32]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	dd05      	ble.n	800f84c <_dtoa_r+0x83c>
 800f840:	4621      	mov	r1, r4
 800f842:	461a      	mov	r2, r3
 800f844:	4658      	mov	r0, fp
 800f846:	f000 fcb5 	bl	80101b4 <__lshift>
 800f84a:	4604      	mov	r4, r0
 800f84c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d059      	beq.n	800f906 <_dtoa_r+0x8f6>
 800f852:	4621      	mov	r1, r4
 800f854:	4648      	mov	r0, r9
 800f856:	f000 fd19 	bl	801028c <__mcmp>
 800f85a:	2800      	cmp	r0, #0
 800f85c:	da53      	bge.n	800f906 <_dtoa_r+0x8f6>
 800f85e:	1e7b      	subs	r3, r7, #1
 800f860:	9304      	str	r3, [sp, #16]
 800f862:	4649      	mov	r1, r9
 800f864:	2300      	movs	r3, #0
 800f866:	220a      	movs	r2, #10
 800f868:	4658      	mov	r0, fp
 800f86a:	f000 faf7 	bl	800fe5c <__multadd>
 800f86e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f870:	4681      	mov	r9, r0
 800f872:	2b00      	cmp	r3, #0
 800f874:	f000 8172 	beq.w	800fb5c <_dtoa_r+0xb4c>
 800f878:	2300      	movs	r3, #0
 800f87a:	4629      	mov	r1, r5
 800f87c:	220a      	movs	r2, #10
 800f87e:	4658      	mov	r0, fp
 800f880:	f000 faec 	bl	800fe5c <__multadd>
 800f884:	9b00      	ldr	r3, [sp, #0]
 800f886:	2b00      	cmp	r3, #0
 800f888:	4605      	mov	r5, r0
 800f88a:	dc67      	bgt.n	800f95c <_dtoa_r+0x94c>
 800f88c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f88e:	2b02      	cmp	r3, #2
 800f890:	dc41      	bgt.n	800f916 <_dtoa_r+0x906>
 800f892:	e063      	b.n	800f95c <_dtoa_r+0x94c>
 800f894:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f896:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f89a:	e746      	b.n	800f72a <_dtoa_r+0x71a>
 800f89c:	9b07      	ldr	r3, [sp, #28]
 800f89e:	1e5c      	subs	r4, r3, #1
 800f8a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8a2:	42a3      	cmp	r3, r4
 800f8a4:	bfbf      	itttt	lt
 800f8a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f8a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f8aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f8ac:	1ae3      	sublt	r3, r4, r3
 800f8ae:	bfb4      	ite	lt
 800f8b0:	18d2      	addlt	r2, r2, r3
 800f8b2:	1b1c      	subge	r4, r3, r4
 800f8b4:	9b07      	ldr	r3, [sp, #28]
 800f8b6:	bfbc      	itt	lt
 800f8b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f8ba:	2400      	movlt	r4, #0
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	bfb5      	itete	lt
 800f8c0:	eba8 0603 	sublt.w	r6, r8, r3
 800f8c4:	9b07      	ldrge	r3, [sp, #28]
 800f8c6:	2300      	movlt	r3, #0
 800f8c8:	4646      	movge	r6, r8
 800f8ca:	e730      	b.n	800f72e <_dtoa_r+0x71e>
 800f8cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f8ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f8d0:	4646      	mov	r6, r8
 800f8d2:	e735      	b.n	800f740 <_dtoa_r+0x730>
 800f8d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f8d6:	e75c      	b.n	800f792 <_dtoa_r+0x782>
 800f8d8:	2300      	movs	r3, #0
 800f8da:	e788      	b.n	800f7ee <_dtoa_r+0x7de>
 800f8dc:	3fe00000 	.word	0x3fe00000
 800f8e0:	40240000 	.word	0x40240000
 800f8e4:	40140000 	.word	0x40140000
 800f8e8:	9b02      	ldr	r3, [sp, #8]
 800f8ea:	e780      	b.n	800f7ee <_dtoa_r+0x7de>
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8f0:	e782      	b.n	800f7f8 <_dtoa_r+0x7e8>
 800f8f2:	d099      	beq.n	800f828 <_dtoa_r+0x818>
 800f8f4:	9a08      	ldr	r2, [sp, #32]
 800f8f6:	331c      	adds	r3, #28
 800f8f8:	441a      	add	r2, r3
 800f8fa:	4498      	add	r8, r3
 800f8fc:	441e      	add	r6, r3
 800f8fe:	9208      	str	r2, [sp, #32]
 800f900:	e792      	b.n	800f828 <_dtoa_r+0x818>
 800f902:	4603      	mov	r3, r0
 800f904:	e7f6      	b.n	800f8f4 <_dtoa_r+0x8e4>
 800f906:	9b07      	ldr	r3, [sp, #28]
 800f908:	9704      	str	r7, [sp, #16]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	dc20      	bgt.n	800f950 <_dtoa_r+0x940>
 800f90e:	9300      	str	r3, [sp, #0]
 800f910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f912:	2b02      	cmp	r3, #2
 800f914:	dd1e      	ble.n	800f954 <_dtoa_r+0x944>
 800f916:	9b00      	ldr	r3, [sp, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	f47f aec0 	bne.w	800f69e <_dtoa_r+0x68e>
 800f91e:	4621      	mov	r1, r4
 800f920:	2205      	movs	r2, #5
 800f922:	4658      	mov	r0, fp
 800f924:	f000 fa9a 	bl	800fe5c <__multadd>
 800f928:	4601      	mov	r1, r0
 800f92a:	4604      	mov	r4, r0
 800f92c:	4648      	mov	r0, r9
 800f92e:	f000 fcad 	bl	801028c <__mcmp>
 800f932:	2800      	cmp	r0, #0
 800f934:	f77f aeb3 	ble.w	800f69e <_dtoa_r+0x68e>
 800f938:	4656      	mov	r6, sl
 800f93a:	2331      	movs	r3, #49	@ 0x31
 800f93c:	f806 3b01 	strb.w	r3, [r6], #1
 800f940:	9b04      	ldr	r3, [sp, #16]
 800f942:	3301      	adds	r3, #1
 800f944:	9304      	str	r3, [sp, #16]
 800f946:	e6ae      	b.n	800f6a6 <_dtoa_r+0x696>
 800f948:	9c07      	ldr	r4, [sp, #28]
 800f94a:	9704      	str	r7, [sp, #16]
 800f94c:	4625      	mov	r5, r4
 800f94e:	e7f3      	b.n	800f938 <_dtoa_r+0x928>
 800f950:	9b07      	ldr	r3, [sp, #28]
 800f952:	9300      	str	r3, [sp, #0]
 800f954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f956:	2b00      	cmp	r3, #0
 800f958:	f000 8104 	beq.w	800fb64 <_dtoa_r+0xb54>
 800f95c:	2e00      	cmp	r6, #0
 800f95e:	dd05      	ble.n	800f96c <_dtoa_r+0x95c>
 800f960:	4629      	mov	r1, r5
 800f962:	4632      	mov	r2, r6
 800f964:	4658      	mov	r0, fp
 800f966:	f000 fc25 	bl	80101b4 <__lshift>
 800f96a:	4605      	mov	r5, r0
 800f96c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d05a      	beq.n	800fa28 <_dtoa_r+0xa18>
 800f972:	6869      	ldr	r1, [r5, #4]
 800f974:	4658      	mov	r0, fp
 800f976:	f000 fa0f 	bl	800fd98 <_Balloc>
 800f97a:	4606      	mov	r6, r0
 800f97c:	b928      	cbnz	r0, 800f98a <_dtoa_r+0x97a>
 800f97e:	4b84      	ldr	r3, [pc, #528]	@ (800fb90 <_dtoa_r+0xb80>)
 800f980:	4602      	mov	r2, r0
 800f982:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f986:	f7ff bb5a 	b.w	800f03e <_dtoa_r+0x2e>
 800f98a:	692a      	ldr	r2, [r5, #16]
 800f98c:	3202      	adds	r2, #2
 800f98e:	0092      	lsls	r2, r2, #2
 800f990:	f105 010c 	add.w	r1, r5, #12
 800f994:	300c      	adds	r0, #12
 800f996:	f7ff faa4 	bl	800eee2 <memcpy>
 800f99a:	2201      	movs	r2, #1
 800f99c:	4631      	mov	r1, r6
 800f99e:	4658      	mov	r0, fp
 800f9a0:	f000 fc08 	bl	80101b4 <__lshift>
 800f9a4:	f10a 0301 	add.w	r3, sl, #1
 800f9a8:	9307      	str	r3, [sp, #28]
 800f9aa:	9b00      	ldr	r3, [sp, #0]
 800f9ac:	4453      	add	r3, sl
 800f9ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9b0:	9b02      	ldr	r3, [sp, #8]
 800f9b2:	f003 0301 	and.w	r3, r3, #1
 800f9b6:	462f      	mov	r7, r5
 800f9b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9ba:	4605      	mov	r5, r0
 800f9bc:	9b07      	ldr	r3, [sp, #28]
 800f9be:	4621      	mov	r1, r4
 800f9c0:	3b01      	subs	r3, #1
 800f9c2:	4648      	mov	r0, r9
 800f9c4:	9300      	str	r3, [sp, #0]
 800f9c6:	f7ff fa9a 	bl	800eefe <quorem>
 800f9ca:	4639      	mov	r1, r7
 800f9cc:	9002      	str	r0, [sp, #8]
 800f9ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f9d2:	4648      	mov	r0, r9
 800f9d4:	f000 fc5a 	bl	801028c <__mcmp>
 800f9d8:	462a      	mov	r2, r5
 800f9da:	9008      	str	r0, [sp, #32]
 800f9dc:	4621      	mov	r1, r4
 800f9de:	4658      	mov	r0, fp
 800f9e0:	f000 fc70 	bl	80102c4 <__mdiff>
 800f9e4:	68c2      	ldr	r2, [r0, #12]
 800f9e6:	4606      	mov	r6, r0
 800f9e8:	bb02      	cbnz	r2, 800fa2c <_dtoa_r+0xa1c>
 800f9ea:	4601      	mov	r1, r0
 800f9ec:	4648      	mov	r0, r9
 800f9ee:	f000 fc4d 	bl	801028c <__mcmp>
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	4631      	mov	r1, r6
 800f9f6:	4658      	mov	r0, fp
 800f9f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f9fa:	f000 fa0d 	bl	800fe18 <_Bfree>
 800f9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa02:	9e07      	ldr	r6, [sp, #28]
 800fa04:	ea43 0102 	orr.w	r1, r3, r2
 800fa08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa0a:	4319      	orrs	r1, r3
 800fa0c:	d110      	bne.n	800fa30 <_dtoa_r+0xa20>
 800fa0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa12:	d029      	beq.n	800fa68 <_dtoa_r+0xa58>
 800fa14:	9b08      	ldr	r3, [sp, #32]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	dd02      	ble.n	800fa20 <_dtoa_r+0xa10>
 800fa1a:	9b02      	ldr	r3, [sp, #8]
 800fa1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fa20:	9b00      	ldr	r3, [sp, #0]
 800fa22:	f883 8000 	strb.w	r8, [r3]
 800fa26:	e63f      	b.n	800f6a8 <_dtoa_r+0x698>
 800fa28:	4628      	mov	r0, r5
 800fa2a:	e7bb      	b.n	800f9a4 <_dtoa_r+0x994>
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	e7e1      	b.n	800f9f4 <_dtoa_r+0x9e4>
 800fa30:	9b08      	ldr	r3, [sp, #32]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	db04      	blt.n	800fa40 <_dtoa_r+0xa30>
 800fa36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fa38:	430b      	orrs	r3, r1
 800fa3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fa3c:	430b      	orrs	r3, r1
 800fa3e:	d120      	bne.n	800fa82 <_dtoa_r+0xa72>
 800fa40:	2a00      	cmp	r2, #0
 800fa42:	dded      	ble.n	800fa20 <_dtoa_r+0xa10>
 800fa44:	4649      	mov	r1, r9
 800fa46:	2201      	movs	r2, #1
 800fa48:	4658      	mov	r0, fp
 800fa4a:	f000 fbb3 	bl	80101b4 <__lshift>
 800fa4e:	4621      	mov	r1, r4
 800fa50:	4681      	mov	r9, r0
 800fa52:	f000 fc1b 	bl	801028c <__mcmp>
 800fa56:	2800      	cmp	r0, #0
 800fa58:	dc03      	bgt.n	800fa62 <_dtoa_r+0xa52>
 800fa5a:	d1e1      	bne.n	800fa20 <_dtoa_r+0xa10>
 800fa5c:	f018 0f01 	tst.w	r8, #1
 800fa60:	d0de      	beq.n	800fa20 <_dtoa_r+0xa10>
 800fa62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa66:	d1d8      	bne.n	800fa1a <_dtoa_r+0xa0a>
 800fa68:	9a00      	ldr	r2, [sp, #0]
 800fa6a:	2339      	movs	r3, #57	@ 0x39
 800fa6c:	7013      	strb	r3, [r2, #0]
 800fa6e:	4633      	mov	r3, r6
 800fa70:	461e      	mov	r6, r3
 800fa72:	3b01      	subs	r3, #1
 800fa74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fa78:	2a39      	cmp	r2, #57	@ 0x39
 800fa7a:	d052      	beq.n	800fb22 <_dtoa_r+0xb12>
 800fa7c:	3201      	adds	r2, #1
 800fa7e:	701a      	strb	r2, [r3, #0]
 800fa80:	e612      	b.n	800f6a8 <_dtoa_r+0x698>
 800fa82:	2a00      	cmp	r2, #0
 800fa84:	dd07      	ble.n	800fa96 <_dtoa_r+0xa86>
 800fa86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa8a:	d0ed      	beq.n	800fa68 <_dtoa_r+0xa58>
 800fa8c:	9a00      	ldr	r2, [sp, #0]
 800fa8e:	f108 0301 	add.w	r3, r8, #1
 800fa92:	7013      	strb	r3, [r2, #0]
 800fa94:	e608      	b.n	800f6a8 <_dtoa_r+0x698>
 800fa96:	9b07      	ldr	r3, [sp, #28]
 800fa98:	9a07      	ldr	r2, [sp, #28]
 800fa9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fa9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d028      	beq.n	800faf6 <_dtoa_r+0xae6>
 800faa4:	4649      	mov	r1, r9
 800faa6:	2300      	movs	r3, #0
 800faa8:	220a      	movs	r2, #10
 800faaa:	4658      	mov	r0, fp
 800faac:	f000 f9d6 	bl	800fe5c <__multadd>
 800fab0:	42af      	cmp	r7, r5
 800fab2:	4681      	mov	r9, r0
 800fab4:	f04f 0300 	mov.w	r3, #0
 800fab8:	f04f 020a 	mov.w	r2, #10
 800fabc:	4639      	mov	r1, r7
 800fabe:	4658      	mov	r0, fp
 800fac0:	d107      	bne.n	800fad2 <_dtoa_r+0xac2>
 800fac2:	f000 f9cb 	bl	800fe5c <__multadd>
 800fac6:	4607      	mov	r7, r0
 800fac8:	4605      	mov	r5, r0
 800faca:	9b07      	ldr	r3, [sp, #28]
 800facc:	3301      	adds	r3, #1
 800face:	9307      	str	r3, [sp, #28]
 800fad0:	e774      	b.n	800f9bc <_dtoa_r+0x9ac>
 800fad2:	f000 f9c3 	bl	800fe5c <__multadd>
 800fad6:	4629      	mov	r1, r5
 800fad8:	4607      	mov	r7, r0
 800fada:	2300      	movs	r3, #0
 800fadc:	220a      	movs	r2, #10
 800fade:	4658      	mov	r0, fp
 800fae0:	f000 f9bc 	bl	800fe5c <__multadd>
 800fae4:	4605      	mov	r5, r0
 800fae6:	e7f0      	b.n	800faca <_dtoa_r+0xaba>
 800fae8:	9b00      	ldr	r3, [sp, #0]
 800faea:	2b00      	cmp	r3, #0
 800faec:	bfcc      	ite	gt
 800faee:	461e      	movgt	r6, r3
 800faf0:	2601      	movle	r6, #1
 800faf2:	4456      	add	r6, sl
 800faf4:	2700      	movs	r7, #0
 800faf6:	4649      	mov	r1, r9
 800faf8:	2201      	movs	r2, #1
 800fafa:	4658      	mov	r0, fp
 800fafc:	f000 fb5a 	bl	80101b4 <__lshift>
 800fb00:	4621      	mov	r1, r4
 800fb02:	4681      	mov	r9, r0
 800fb04:	f000 fbc2 	bl	801028c <__mcmp>
 800fb08:	2800      	cmp	r0, #0
 800fb0a:	dcb0      	bgt.n	800fa6e <_dtoa_r+0xa5e>
 800fb0c:	d102      	bne.n	800fb14 <_dtoa_r+0xb04>
 800fb0e:	f018 0f01 	tst.w	r8, #1
 800fb12:	d1ac      	bne.n	800fa6e <_dtoa_r+0xa5e>
 800fb14:	4633      	mov	r3, r6
 800fb16:	461e      	mov	r6, r3
 800fb18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb1c:	2a30      	cmp	r2, #48	@ 0x30
 800fb1e:	d0fa      	beq.n	800fb16 <_dtoa_r+0xb06>
 800fb20:	e5c2      	b.n	800f6a8 <_dtoa_r+0x698>
 800fb22:	459a      	cmp	sl, r3
 800fb24:	d1a4      	bne.n	800fa70 <_dtoa_r+0xa60>
 800fb26:	9b04      	ldr	r3, [sp, #16]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	9304      	str	r3, [sp, #16]
 800fb2c:	2331      	movs	r3, #49	@ 0x31
 800fb2e:	f88a 3000 	strb.w	r3, [sl]
 800fb32:	e5b9      	b.n	800f6a8 <_dtoa_r+0x698>
 800fb34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fb36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fb94 <_dtoa_r+0xb84>
 800fb3a:	b11b      	cbz	r3, 800fb44 <_dtoa_r+0xb34>
 800fb3c:	f10a 0308 	add.w	r3, sl, #8
 800fb40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fb42:	6013      	str	r3, [r2, #0]
 800fb44:	4650      	mov	r0, sl
 800fb46:	b019      	add	sp, #100	@ 0x64
 800fb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	f77f ae37 	ble.w	800f7c2 <_dtoa_r+0x7b2>
 800fb54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb56:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb58:	2001      	movs	r0, #1
 800fb5a:	e655      	b.n	800f808 <_dtoa_r+0x7f8>
 800fb5c:	9b00      	ldr	r3, [sp, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	f77f aed6 	ble.w	800f910 <_dtoa_r+0x900>
 800fb64:	4656      	mov	r6, sl
 800fb66:	4621      	mov	r1, r4
 800fb68:	4648      	mov	r0, r9
 800fb6a:	f7ff f9c8 	bl	800eefe <quorem>
 800fb6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fb72:	f806 8b01 	strb.w	r8, [r6], #1
 800fb76:	9b00      	ldr	r3, [sp, #0]
 800fb78:	eba6 020a 	sub.w	r2, r6, sl
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	ddb3      	ble.n	800fae8 <_dtoa_r+0xad8>
 800fb80:	4649      	mov	r1, r9
 800fb82:	2300      	movs	r3, #0
 800fb84:	220a      	movs	r2, #10
 800fb86:	4658      	mov	r0, fp
 800fb88:	f000 f968 	bl	800fe5c <__multadd>
 800fb8c:	4681      	mov	r9, r0
 800fb8e:	e7ea      	b.n	800fb66 <_dtoa_r+0xb56>
 800fb90:	08011f06 	.word	0x08011f06
 800fb94:	08011e8a 	.word	0x08011e8a

0800fb98 <_free_r>:
 800fb98:	b538      	push	{r3, r4, r5, lr}
 800fb9a:	4605      	mov	r5, r0
 800fb9c:	2900      	cmp	r1, #0
 800fb9e:	d041      	beq.n	800fc24 <_free_r+0x8c>
 800fba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fba4:	1f0c      	subs	r4, r1, #4
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	bfb8      	it	lt
 800fbaa:	18e4      	addlt	r4, r4, r3
 800fbac:	f000 f8e8 	bl	800fd80 <__malloc_lock>
 800fbb0:	4a1d      	ldr	r2, [pc, #116]	@ (800fc28 <_free_r+0x90>)
 800fbb2:	6813      	ldr	r3, [r2, #0]
 800fbb4:	b933      	cbnz	r3, 800fbc4 <_free_r+0x2c>
 800fbb6:	6063      	str	r3, [r4, #4]
 800fbb8:	6014      	str	r4, [r2, #0]
 800fbba:	4628      	mov	r0, r5
 800fbbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbc0:	f000 b8e4 	b.w	800fd8c <__malloc_unlock>
 800fbc4:	42a3      	cmp	r3, r4
 800fbc6:	d908      	bls.n	800fbda <_free_r+0x42>
 800fbc8:	6820      	ldr	r0, [r4, #0]
 800fbca:	1821      	adds	r1, r4, r0
 800fbcc:	428b      	cmp	r3, r1
 800fbce:	bf01      	itttt	eq
 800fbd0:	6819      	ldreq	r1, [r3, #0]
 800fbd2:	685b      	ldreq	r3, [r3, #4]
 800fbd4:	1809      	addeq	r1, r1, r0
 800fbd6:	6021      	streq	r1, [r4, #0]
 800fbd8:	e7ed      	b.n	800fbb6 <_free_r+0x1e>
 800fbda:	461a      	mov	r2, r3
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	b10b      	cbz	r3, 800fbe4 <_free_r+0x4c>
 800fbe0:	42a3      	cmp	r3, r4
 800fbe2:	d9fa      	bls.n	800fbda <_free_r+0x42>
 800fbe4:	6811      	ldr	r1, [r2, #0]
 800fbe6:	1850      	adds	r0, r2, r1
 800fbe8:	42a0      	cmp	r0, r4
 800fbea:	d10b      	bne.n	800fc04 <_free_r+0x6c>
 800fbec:	6820      	ldr	r0, [r4, #0]
 800fbee:	4401      	add	r1, r0
 800fbf0:	1850      	adds	r0, r2, r1
 800fbf2:	4283      	cmp	r3, r0
 800fbf4:	6011      	str	r1, [r2, #0]
 800fbf6:	d1e0      	bne.n	800fbba <_free_r+0x22>
 800fbf8:	6818      	ldr	r0, [r3, #0]
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	6053      	str	r3, [r2, #4]
 800fbfe:	4408      	add	r0, r1
 800fc00:	6010      	str	r0, [r2, #0]
 800fc02:	e7da      	b.n	800fbba <_free_r+0x22>
 800fc04:	d902      	bls.n	800fc0c <_free_r+0x74>
 800fc06:	230c      	movs	r3, #12
 800fc08:	602b      	str	r3, [r5, #0]
 800fc0a:	e7d6      	b.n	800fbba <_free_r+0x22>
 800fc0c:	6820      	ldr	r0, [r4, #0]
 800fc0e:	1821      	adds	r1, r4, r0
 800fc10:	428b      	cmp	r3, r1
 800fc12:	bf04      	itt	eq
 800fc14:	6819      	ldreq	r1, [r3, #0]
 800fc16:	685b      	ldreq	r3, [r3, #4]
 800fc18:	6063      	str	r3, [r4, #4]
 800fc1a:	bf04      	itt	eq
 800fc1c:	1809      	addeq	r1, r1, r0
 800fc1e:	6021      	streq	r1, [r4, #0]
 800fc20:	6054      	str	r4, [r2, #4]
 800fc22:	e7ca      	b.n	800fbba <_free_r+0x22>
 800fc24:	bd38      	pop	{r3, r4, r5, pc}
 800fc26:	bf00      	nop
 800fc28:	20000f3c 	.word	0x20000f3c

0800fc2c <malloc>:
 800fc2c:	4b02      	ldr	r3, [pc, #8]	@ (800fc38 <malloc+0xc>)
 800fc2e:	4601      	mov	r1, r0
 800fc30:	6818      	ldr	r0, [r3, #0]
 800fc32:	f000 b825 	b.w	800fc80 <_malloc_r>
 800fc36:	bf00      	nop
 800fc38:	20000028 	.word	0x20000028

0800fc3c <sbrk_aligned>:
 800fc3c:	b570      	push	{r4, r5, r6, lr}
 800fc3e:	4e0f      	ldr	r6, [pc, #60]	@ (800fc7c <sbrk_aligned+0x40>)
 800fc40:	460c      	mov	r4, r1
 800fc42:	6831      	ldr	r1, [r6, #0]
 800fc44:	4605      	mov	r5, r0
 800fc46:	b911      	cbnz	r1, 800fc4e <sbrk_aligned+0x12>
 800fc48:	f000 fea8 	bl	801099c <_sbrk_r>
 800fc4c:	6030      	str	r0, [r6, #0]
 800fc4e:	4621      	mov	r1, r4
 800fc50:	4628      	mov	r0, r5
 800fc52:	f000 fea3 	bl	801099c <_sbrk_r>
 800fc56:	1c43      	adds	r3, r0, #1
 800fc58:	d103      	bne.n	800fc62 <sbrk_aligned+0x26>
 800fc5a:	f04f 34ff 	mov.w	r4, #4294967295
 800fc5e:	4620      	mov	r0, r4
 800fc60:	bd70      	pop	{r4, r5, r6, pc}
 800fc62:	1cc4      	adds	r4, r0, #3
 800fc64:	f024 0403 	bic.w	r4, r4, #3
 800fc68:	42a0      	cmp	r0, r4
 800fc6a:	d0f8      	beq.n	800fc5e <sbrk_aligned+0x22>
 800fc6c:	1a21      	subs	r1, r4, r0
 800fc6e:	4628      	mov	r0, r5
 800fc70:	f000 fe94 	bl	801099c <_sbrk_r>
 800fc74:	3001      	adds	r0, #1
 800fc76:	d1f2      	bne.n	800fc5e <sbrk_aligned+0x22>
 800fc78:	e7ef      	b.n	800fc5a <sbrk_aligned+0x1e>
 800fc7a:	bf00      	nop
 800fc7c:	20000f38 	.word	0x20000f38

0800fc80 <_malloc_r>:
 800fc80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc84:	1ccd      	adds	r5, r1, #3
 800fc86:	f025 0503 	bic.w	r5, r5, #3
 800fc8a:	3508      	adds	r5, #8
 800fc8c:	2d0c      	cmp	r5, #12
 800fc8e:	bf38      	it	cc
 800fc90:	250c      	movcc	r5, #12
 800fc92:	2d00      	cmp	r5, #0
 800fc94:	4606      	mov	r6, r0
 800fc96:	db01      	blt.n	800fc9c <_malloc_r+0x1c>
 800fc98:	42a9      	cmp	r1, r5
 800fc9a:	d904      	bls.n	800fca6 <_malloc_r+0x26>
 800fc9c:	230c      	movs	r3, #12
 800fc9e:	6033      	str	r3, [r6, #0]
 800fca0:	2000      	movs	r0, #0
 800fca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fca6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fd7c <_malloc_r+0xfc>
 800fcaa:	f000 f869 	bl	800fd80 <__malloc_lock>
 800fcae:	f8d8 3000 	ldr.w	r3, [r8]
 800fcb2:	461c      	mov	r4, r3
 800fcb4:	bb44      	cbnz	r4, 800fd08 <_malloc_r+0x88>
 800fcb6:	4629      	mov	r1, r5
 800fcb8:	4630      	mov	r0, r6
 800fcba:	f7ff ffbf 	bl	800fc3c <sbrk_aligned>
 800fcbe:	1c43      	adds	r3, r0, #1
 800fcc0:	4604      	mov	r4, r0
 800fcc2:	d158      	bne.n	800fd76 <_malloc_r+0xf6>
 800fcc4:	f8d8 4000 	ldr.w	r4, [r8]
 800fcc8:	4627      	mov	r7, r4
 800fcca:	2f00      	cmp	r7, #0
 800fccc:	d143      	bne.n	800fd56 <_malloc_r+0xd6>
 800fcce:	2c00      	cmp	r4, #0
 800fcd0:	d04b      	beq.n	800fd6a <_malloc_r+0xea>
 800fcd2:	6823      	ldr	r3, [r4, #0]
 800fcd4:	4639      	mov	r1, r7
 800fcd6:	4630      	mov	r0, r6
 800fcd8:	eb04 0903 	add.w	r9, r4, r3
 800fcdc:	f000 fe5e 	bl	801099c <_sbrk_r>
 800fce0:	4581      	cmp	r9, r0
 800fce2:	d142      	bne.n	800fd6a <_malloc_r+0xea>
 800fce4:	6821      	ldr	r1, [r4, #0]
 800fce6:	1a6d      	subs	r5, r5, r1
 800fce8:	4629      	mov	r1, r5
 800fcea:	4630      	mov	r0, r6
 800fcec:	f7ff ffa6 	bl	800fc3c <sbrk_aligned>
 800fcf0:	3001      	adds	r0, #1
 800fcf2:	d03a      	beq.n	800fd6a <_malloc_r+0xea>
 800fcf4:	6823      	ldr	r3, [r4, #0]
 800fcf6:	442b      	add	r3, r5
 800fcf8:	6023      	str	r3, [r4, #0]
 800fcfa:	f8d8 3000 	ldr.w	r3, [r8]
 800fcfe:	685a      	ldr	r2, [r3, #4]
 800fd00:	bb62      	cbnz	r2, 800fd5c <_malloc_r+0xdc>
 800fd02:	f8c8 7000 	str.w	r7, [r8]
 800fd06:	e00f      	b.n	800fd28 <_malloc_r+0xa8>
 800fd08:	6822      	ldr	r2, [r4, #0]
 800fd0a:	1b52      	subs	r2, r2, r5
 800fd0c:	d420      	bmi.n	800fd50 <_malloc_r+0xd0>
 800fd0e:	2a0b      	cmp	r2, #11
 800fd10:	d917      	bls.n	800fd42 <_malloc_r+0xc2>
 800fd12:	1961      	adds	r1, r4, r5
 800fd14:	42a3      	cmp	r3, r4
 800fd16:	6025      	str	r5, [r4, #0]
 800fd18:	bf18      	it	ne
 800fd1a:	6059      	strne	r1, [r3, #4]
 800fd1c:	6863      	ldr	r3, [r4, #4]
 800fd1e:	bf08      	it	eq
 800fd20:	f8c8 1000 	streq.w	r1, [r8]
 800fd24:	5162      	str	r2, [r4, r5]
 800fd26:	604b      	str	r3, [r1, #4]
 800fd28:	4630      	mov	r0, r6
 800fd2a:	f000 f82f 	bl	800fd8c <__malloc_unlock>
 800fd2e:	f104 000b 	add.w	r0, r4, #11
 800fd32:	1d23      	adds	r3, r4, #4
 800fd34:	f020 0007 	bic.w	r0, r0, #7
 800fd38:	1ac2      	subs	r2, r0, r3
 800fd3a:	bf1c      	itt	ne
 800fd3c:	1a1b      	subne	r3, r3, r0
 800fd3e:	50a3      	strne	r3, [r4, r2]
 800fd40:	e7af      	b.n	800fca2 <_malloc_r+0x22>
 800fd42:	6862      	ldr	r2, [r4, #4]
 800fd44:	42a3      	cmp	r3, r4
 800fd46:	bf0c      	ite	eq
 800fd48:	f8c8 2000 	streq.w	r2, [r8]
 800fd4c:	605a      	strne	r2, [r3, #4]
 800fd4e:	e7eb      	b.n	800fd28 <_malloc_r+0xa8>
 800fd50:	4623      	mov	r3, r4
 800fd52:	6864      	ldr	r4, [r4, #4]
 800fd54:	e7ae      	b.n	800fcb4 <_malloc_r+0x34>
 800fd56:	463c      	mov	r4, r7
 800fd58:	687f      	ldr	r7, [r7, #4]
 800fd5a:	e7b6      	b.n	800fcca <_malloc_r+0x4a>
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	42a3      	cmp	r3, r4
 800fd62:	d1fb      	bne.n	800fd5c <_malloc_r+0xdc>
 800fd64:	2300      	movs	r3, #0
 800fd66:	6053      	str	r3, [r2, #4]
 800fd68:	e7de      	b.n	800fd28 <_malloc_r+0xa8>
 800fd6a:	230c      	movs	r3, #12
 800fd6c:	6033      	str	r3, [r6, #0]
 800fd6e:	4630      	mov	r0, r6
 800fd70:	f000 f80c 	bl	800fd8c <__malloc_unlock>
 800fd74:	e794      	b.n	800fca0 <_malloc_r+0x20>
 800fd76:	6005      	str	r5, [r0, #0]
 800fd78:	e7d6      	b.n	800fd28 <_malloc_r+0xa8>
 800fd7a:	bf00      	nop
 800fd7c:	20000f3c 	.word	0x20000f3c

0800fd80 <__malloc_lock>:
 800fd80:	4801      	ldr	r0, [pc, #4]	@ (800fd88 <__malloc_lock+0x8>)
 800fd82:	f7ff b8ac 	b.w	800eede <__retarget_lock_acquire_recursive>
 800fd86:	bf00      	nop
 800fd88:	20000f34 	.word	0x20000f34

0800fd8c <__malloc_unlock>:
 800fd8c:	4801      	ldr	r0, [pc, #4]	@ (800fd94 <__malloc_unlock+0x8>)
 800fd8e:	f7ff b8a7 	b.w	800eee0 <__retarget_lock_release_recursive>
 800fd92:	bf00      	nop
 800fd94:	20000f34 	.word	0x20000f34

0800fd98 <_Balloc>:
 800fd98:	b570      	push	{r4, r5, r6, lr}
 800fd9a:	69c6      	ldr	r6, [r0, #28]
 800fd9c:	4604      	mov	r4, r0
 800fd9e:	460d      	mov	r5, r1
 800fda0:	b976      	cbnz	r6, 800fdc0 <_Balloc+0x28>
 800fda2:	2010      	movs	r0, #16
 800fda4:	f7ff ff42 	bl	800fc2c <malloc>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	61e0      	str	r0, [r4, #28]
 800fdac:	b920      	cbnz	r0, 800fdb8 <_Balloc+0x20>
 800fdae:	4b18      	ldr	r3, [pc, #96]	@ (800fe10 <_Balloc+0x78>)
 800fdb0:	4818      	ldr	r0, [pc, #96]	@ (800fe14 <_Balloc+0x7c>)
 800fdb2:	216b      	movs	r1, #107	@ 0x6b
 800fdb4:	f000 fe02 	bl	80109bc <__assert_func>
 800fdb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdbc:	6006      	str	r6, [r0, #0]
 800fdbe:	60c6      	str	r6, [r0, #12]
 800fdc0:	69e6      	ldr	r6, [r4, #28]
 800fdc2:	68f3      	ldr	r3, [r6, #12]
 800fdc4:	b183      	cbz	r3, 800fde8 <_Balloc+0x50>
 800fdc6:	69e3      	ldr	r3, [r4, #28]
 800fdc8:	68db      	ldr	r3, [r3, #12]
 800fdca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fdce:	b9b8      	cbnz	r0, 800fe00 <_Balloc+0x68>
 800fdd0:	2101      	movs	r1, #1
 800fdd2:	fa01 f605 	lsl.w	r6, r1, r5
 800fdd6:	1d72      	adds	r2, r6, #5
 800fdd8:	0092      	lsls	r2, r2, #2
 800fdda:	4620      	mov	r0, r4
 800fddc:	f000 fe0c 	bl	80109f8 <_calloc_r>
 800fde0:	b160      	cbz	r0, 800fdfc <_Balloc+0x64>
 800fde2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fde6:	e00e      	b.n	800fe06 <_Balloc+0x6e>
 800fde8:	2221      	movs	r2, #33	@ 0x21
 800fdea:	2104      	movs	r1, #4
 800fdec:	4620      	mov	r0, r4
 800fdee:	f000 fe03 	bl	80109f8 <_calloc_r>
 800fdf2:	69e3      	ldr	r3, [r4, #28]
 800fdf4:	60f0      	str	r0, [r6, #12]
 800fdf6:	68db      	ldr	r3, [r3, #12]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d1e4      	bne.n	800fdc6 <_Balloc+0x2e>
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	bd70      	pop	{r4, r5, r6, pc}
 800fe00:	6802      	ldr	r2, [r0, #0]
 800fe02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe06:	2300      	movs	r3, #0
 800fe08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe0c:	e7f7      	b.n	800fdfe <_Balloc+0x66>
 800fe0e:	bf00      	nop
 800fe10:	08011e97 	.word	0x08011e97
 800fe14:	08011f17 	.word	0x08011f17

0800fe18 <_Bfree>:
 800fe18:	b570      	push	{r4, r5, r6, lr}
 800fe1a:	69c6      	ldr	r6, [r0, #28]
 800fe1c:	4605      	mov	r5, r0
 800fe1e:	460c      	mov	r4, r1
 800fe20:	b976      	cbnz	r6, 800fe40 <_Bfree+0x28>
 800fe22:	2010      	movs	r0, #16
 800fe24:	f7ff ff02 	bl	800fc2c <malloc>
 800fe28:	4602      	mov	r2, r0
 800fe2a:	61e8      	str	r0, [r5, #28]
 800fe2c:	b920      	cbnz	r0, 800fe38 <_Bfree+0x20>
 800fe2e:	4b09      	ldr	r3, [pc, #36]	@ (800fe54 <_Bfree+0x3c>)
 800fe30:	4809      	ldr	r0, [pc, #36]	@ (800fe58 <_Bfree+0x40>)
 800fe32:	218f      	movs	r1, #143	@ 0x8f
 800fe34:	f000 fdc2 	bl	80109bc <__assert_func>
 800fe38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe3c:	6006      	str	r6, [r0, #0]
 800fe3e:	60c6      	str	r6, [r0, #12]
 800fe40:	b13c      	cbz	r4, 800fe52 <_Bfree+0x3a>
 800fe42:	69eb      	ldr	r3, [r5, #28]
 800fe44:	6862      	ldr	r2, [r4, #4]
 800fe46:	68db      	ldr	r3, [r3, #12]
 800fe48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fe4c:	6021      	str	r1, [r4, #0]
 800fe4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fe52:	bd70      	pop	{r4, r5, r6, pc}
 800fe54:	08011e97 	.word	0x08011e97
 800fe58:	08011f17 	.word	0x08011f17

0800fe5c <__multadd>:
 800fe5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe60:	690d      	ldr	r5, [r1, #16]
 800fe62:	4607      	mov	r7, r0
 800fe64:	460c      	mov	r4, r1
 800fe66:	461e      	mov	r6, r3
 800fe68:	f101 0c14 	add.w	ip, r1, #20
 800fe6c:	2000      	movs	r0, #0
 800fe6e:	f8dc 3000 	ldr.w	r3, [ip]
 800fe72:	b299      	uxth	r1, r3
 800fe74:	fb02 6101 	mla	r1, r2, r1, r6
 800fe78:	0c1e      	lsrs	r6, r3, #16
 800fe7a:	0c0b      	lsrs	r3, r1, #16
 800fe7c:	fb02 3306 	mla	r3, r2, r6, r3
 800fe80:	b289      	uxth	r1, r1
 800fe82:	3001      	adds	r0, #1
 800fe84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fe88:	4285      	cmp	r5, r0
 800fe8a:	f84c 1b04 	str.w	r1, [ip], #4
 800fe8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe92:	dcec      	bgt.n	800fe6e <__multadd+0x12>
 800fe94:	b30e      	cbz	r6, 800feda <__multadd+0x7e>
 800fe96:	68a3      	ldr	r3, [r4, #8]
 800fe98:	42ab      	cmp	r3, r5
 800fe9a:	dc19      	bgt.n	800fed0 <__multadd+0x74>
 800fe9c:	6861      	ldr	r1, [r4, #4]
 800fe9e:	4638      	mov	r0, r7
 800fea0:	3101      	adds	r1, #1
 800fea2:	f7ff ff79 	bl	800fd98 <_Balloc>
 800fea6:	4680      	mov	r8, r0
 800fea8:	b928      	cbnz	r0, 800feb6 <__multadd+0x5a>
 800feaa:	4602      	mov	r2, r0
 800feac:	4b0c      	ldr	r3, [pc, #48]	@ (800fee0 <__multadd+0x84>)
 800feae:	480d      	ldr	r0, [pc, #52]	@ (800fee4 <__multadd+0x88>)
 800feb0:	21ba      	movs	r1, #186	@ 0xba
 800feb2:	f000 fd83 	bl	80109bc <__assert_func>
 800feb6:	6922      	ldr	r2, [r4, #16]
 800feb8:	3202      	adds	r2, #2
 800feba:	f104 010c 	add.w	r1, r4, #12
 800febe:	0092      	lsls	r2, r2, #2
 800fec0:	300c      	adds	r0, #12
 800fec2:	f7ff f80e 	bl	800eee2 <memcpy>
 800fec6:	4621      	mov	r1, r4
 800fec8:	4638      	mov	r0, r7
 800feca:	f7ff ffa5 	bl	800fe18 <_Bfree>
 800fece:	4644      	mov	r4, r8
 800fed0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fed4:	3501      	adds	r5, #1
 800fed6:	615e      	str	r6, [r3, #20]
 800fed8:	6125      	str	r5, [r4, #16]
 800feda:	4620      	mov	r0, r4
 800fedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fee0:	08011f06 	.word	0x08011f06
 800fee4:	08011f17 	.word	0x08011f17

0800fee8 <__hi0bits>:
 800fee8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800feec:	4603      	mov	r3, r0
 800feee:	bf36      	itet	cc
 800fef0:	0403      	lslcc	r3, r0, #16
 800fef2:	2000      	movcs	r0, #0
 800fef4:	2010      	movcc	r0, #16
 800fef6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fefa:	bf3c      	itt	cc
 800fefc:	021b      	lslcc	r3, r3, #8
 800fefe:	3008      	addcc	r0, #8
 800ff00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ff04:	bf3c      	itt	cc
 800ff06:	011b      	lslcc	r3, r3, #4
 800ff08:	3004      	addcc	r0, #4
 800ff0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ff0e:	bf3c      	itt	cc
 800ff10:	009b      	lslcc	r3, r3, #2
 800ff12:	3002      	addcc	r0, #2
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	db05      	blt.n	800ff24 <__hi0bits+0x3c>
 800ff18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ff1c:	f100 0001 	add.w	r0, r0, #1
 800ff20:	bf08      	it	eq
 800ff22:	2020      	moveq	r0, #32
 800ff24:	4770      	bx	lr

0800ff26 <__lo0bits>:
 800ff26:	6803      	ldr	r3, [r0, #0]
 800ff28:	4602      	mov	r2, r0
 800ff2a:	f013 0007 	ands.w	r0, r3, #7
 800ff2e:	d00b      	beq.n	800ff48 <__lo0bits+0x22>
 800ff30:	07d9      	lsls	r1, r3, #31
 800ff32:	d421      	bmi.n	800ff78 <__lo0bits+0x52>
 800ff34:	0798      	lsls	r0, r3, #30
 800ff36:	bf49      	itett	mi
 800ff38:	085b      	lsrmi	r3, r3, #1
 800ff3a:	089b      	lsrpl	r3, r3, #2
 800ff3c:	2001      	movmi	r0, #1
 800ff3e:	6013      	strmi	r3, [r2, #0]
 800ff40:	bf5c      	itt	pl
 800ff42:	6013      	strpl	r3, [r2, #0]
 800ff44:	2002      	movpl	r0, #2
 800ff46:	4770      	bx	lr
 800ff48:	b299      	uxth	r1, r3
 800ff4a:	b909      	cbnz	r1, 800ff50 <__lo0bits+0x2a>
 800ff4c:	0c1b      	lsrs	r3, r3, #16
 800ff4e:	2010      	movs	r0, #16
 800ff50:	b2d9      	uxtb	r1, r3
 800ff52:	b909      	cbnz	r1, 800ff58 <__lo0bits+0x32>
 800ff54:	3008      	adds	r0, #8
 800ff56:	0a1b      	lsrs	r3, r3, #8
 800ff58:	0719      	lsls	r1, r3, #28
 800ff5a:	bf04      	itt	eq
 800ff5c:	091b      	lsreq	r3, r3, #4
 800ff5e:	3004      	addeq	r0, #4
 800ff60:	0799      	lsls	r1, r3, #30
 800ff62:	bf04      	itt	eq
 800ff64:	089b      	lsreq	r3, r3, #2
 800ff66:	3002      	addeq	r0, #2
 800ff68:	07d9      	lsls	r1, r3, #31
 800ff6a:	d403      	bmi.n	800ff74 <__lo0bits+0x4e>
 800ff6c:	085b      	lsrs	r3, r3, #1
 800ff6e:	f100 0001 	add.w	r0, r0, #1
 800ff72:	d003      	beq.n	800ff7c <__lo0bits+0x56>
 800ff74:	6013      	str	r3, [r2, #0]
 800ff76:	4770      	bx	lr
 800ff78:	2000      	movs	r0, #0
 800ff7a:	4770      	bx	lr
 800ff7c:	2020      	movs	r0, #32
 800ff7e:	4770      	bx	lr

0800ff80 <__i2b>:
 800ff80:	b510      	push	{r4, lr}
 800ff82:	460c      	mov	r4, r1
 800ff84:	2101      	movs	r1, #1
 800ff86:	f7ff ff07 	bl	800fd98 <_Balloc>
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	b928      	cbnz	r0, 800ff9a <__i2b+0x1a>
 800ff8e:	4b05      	ldr	r3, [pc, #20]	@ (800ffa4 <__i2b+0x24>)
 800ff90:	4805      	ldr	r0, [pc, #20]	@ (800ffa8 <__i2b+0x28>)
 800ff92:	f240 1145 	movw	r1, #325	@ 0x145
 800ff96:	f000 fd11 	bl	80109bc <__assert_func>
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	6144      	str	r4, [r0, #20]
 800ff9e:	6103      	str	r3, [r0, #16]
 800ffa0:	bd10      	pop	{r4, pc}
 800ffa2:	bf00      	nop
 800ffa4:	08011f06 	.word	0x08011f06
 800ffa8:	08011f17 	.word	0x08011f17

0800ffac <__multiply>:
 800ffac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffb0:	4614      	mov	r4, r2
 800ffb2:	690a      	ldr	r2, [r1, #16]
 800ffb4:	6923      	ldr	r3, [r4, #16]
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	bfa8      	it	ge
 800ffba:	4623      	movge	r3, r4
 800ffbc:	460f      	mov	r7, r1
 800ffbe:	bfa4      	itt	ge
 800ffc0:	460c      	movge	r4, r1
 800ffc2:	461f      	movge	r7, r3
 800ffc4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ffc8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ffcc:	68a3      	ldr	r3, [r4, #8]
 800ffce:	6861      	ldr	r1, [r4, #4]
 800ffd0:	eb0a 0609 	add.w	r6, sl, r9
 800ffd4:	42b3      	cmp	r3, r6
 800ffd6:	b085      	sub	sp, #20
 800ffd8:	bfb8      	it	lt
 800ffda:	3101      	addlt	r1, #1
 800ffdc:	f7ff fedc 	bl	800fd98 <_Balloc>
 800ffe0:	b930      	cbnz	r0, 800fff0 <__multiply+0x44>
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	4b44      	ldr	r3, [pc, #272]	@ (80100f8 <__multiply+0x14c>)
 800ffe6:	4845      	ldr	r0, [pc, #276]	@ (80100fc <__multiply+0x150>)
 800ffe8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ffec:	f000 fce6 	bl	80109bc <__assert_func>
 800fff0:	f100 0514 	add.w	r5, r0, #20
 800fff4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fff8:	462b      	mov	r3, r5
 800fffa:	2200      	movs	r2, #0
 800fffc:	4543      	cmp	r3, r8
 800fffe:	d321      	bcc.n	8010044 <__multiply+0x98>
 8010000:	f107 0114 	add.w	r1, r7, #20
 8010004:	f104 0214 	add.w	r2, r4, #20
 8010008:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801000c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010010:	9302      	str	r3, [sp, #8]
 8010012:	1b13      	subs	r3, r2, r4
 8010014:	3b15      	subs	r3, #21
 8010016:	f023 0303 	bic.w	r3, r3, #3
 801001a:	3304      	adds	r3, #4
 801001c:	f104 0715 	add.w	r7, r4, #21
 8010020:	42ba      	cmp	r2, r7
 8010022:	bf38      	it	cc
 8010024:	2304      	movcc	r3, #4
 8010026:	9301      	str	r3, [sp, #4]
 8010028:	9b02      	ldr	r3, [sp, #8]
 801002a:	9103      	str	r1, [sp, #12]
 801002c:	428b      	cmp	r3, r1
 801002e:	d80c      	bhi.n	801004a <__multiply+0x9e>
 8010030:	2e00      	cmp	r6, #0
 8010032:	dd03      	ble.n	801003c <__multiply+0x90>
 8010034:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010038:	2b00      	cmp	r3, #0
 801003a:	d05b      	beq.n	80100f4 <__multiply+0x148>
 801003c:	6106      	str	r6, [r0, #16]
 801003e:	b005      	add	sp, #20
 8010040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010044:	f843 2b04 	str.w	r2, [r3], #4
 8010048:	e7d8      	b.n	800fffc <__multiply+0x50>
 801004a:	f8b1 a000 	ldrh.w	sl, [r1]
 801004e:	f1ba 0f00 	cmp.w	sl, #0
 8010052:	d024      	beq.n	801009e <__multiply+0xf2>
 8010054:	f104 0e14 	add.w	lr, r4, #20
 8010058:	46a9      	mov	r9, r5
 801005a:	f04f 0c00 	mov.w	ip, #0
 801005e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010062:	f8d9 3000 	ldr.w	r3, [r9]
 8010066:	fa1f fb87 	uxth.w	fp, r7
 801006a:	b29b      	uxth	r3, r3
 801006c:	fb0a 330b 	mla	r3, sl, fp, r3
 8010070:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010074:	f8d9 7000 	ldr.w	r7, [r9]
 8010078:	4463      	add	r3, ip
 801007a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801007e:	fb0a c70b 	mla	r7, sl, fp, ip
 8010082:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010086:	b29b      	uxth	r3, r3
 8010088:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801008c:	4572      	cmp	r2, lr
 801008e:	f849 3b04 	str.w	r3, [r9], #4
 8010092:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010096:	d8e2      	bhi.n	801005e <__multiply+0xb2>
 8010098:	9b01      	ldr	r3, [sp, #4]
 801009a:	f845 c003 	str.w	ip, [r5, r3]
 801009e:	9b03      	ldr	r3, [sp, #12]
 80100a0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80100a4:	3104      	adds	r1, #4
 80100a6:	f1b9 0f00 	cmp.w	r9, #0
 80100aa:	d021      	beq.n	80100f0 <__multiply+0x144>
 80100ac:	682b      	ldr	r3, [r5, #0]
 80100ae:	f104 0c14 	add.w	ip, r4, #20
 80100b2:	46ae      	mov	lr, r5
 80100b4:	f04f 0a00 	mov.w	sl, #0
 80100b8:	f8bc b000 	ldrh.w	fp, [ip]
 80100bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80100c0:	fb09 770b 	mla	r7, r9, fp, r7
 80100c4:	4457      	add	r7, sl
 80100c6:	b29b      	uxth	r3, r3
 80100c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80100cc:	f84e 3b04 	str.w	r3, [lr], #4
 80100d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80100d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80100d8:	f8be 3000 	ldrh.w	r3, [lr]
 80100dc:	fb09 330a 	mla	r3, r9, sl, r3
 80100e0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80100e4:	4562      	cmp	r2, ip
 80100e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80100ea:	d8e5      	bhi.n	80100b8 <__multiply+0x10c>
 80100ec:	9f01      	ldr	r7, [sp, #4]
 80100ee:	51eb      	str	r3, [r5, r7]
 80100f0:	3504      	adds	r5, #4
 80100f2:	e799      	b.n	8010028 <__multiply+0x7c>
 80100f4:	3e01      	subs	r6, #1
 80100f6:	e79b      	b.n	8010030 <__multiply+0x84>
 80100f8:	08011f06 	.word	0x08011f06
 80100fc:	08011f17 	.word	0x08011f17

08010100 <__pow5mult>:
 8010100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010104:	4615      	mov	r5, r2
 8010106:	f012 0203 	ands.w	r2, r2, #3
 801010a:	4607      	mov	r7, r0
 801010c:	460e      	mov	r6, r1
 801010e:	d007      	beq.n	8010120 <__pow5mult+0x20>
 8010110:	4c25      	ldr	r4, [pc, #148]	@ (80101a8 <__pow5mult+0xa8>)
 8010112:	3a01      	subs	r2, #1
 8010114:	2300      	movs	r3, #0
 8010116:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801011a:	f7ff fe9f 	bl	800fe5c <__multadd>
 801011e:	4606      	mov	r6, r0
 8010120:	10ad      	asrs	r5, r5, #2
 8010122:	d03d      	beq.n	80101a0 <__pow5mult+0xa0>
 8010124:	69fc      	ldr	r4, [r7, #28]
 8010126:	b97c      	cbnz	r4, 8010148 <__pow5mult+0x48>
 8010128:	2010      	movs	r0, #16
 801012a:	f7ff fd7f 	bl	800fc2c <malloc>
 801012e:	4602      	mov	r2, r0
 8010130:	61f8      	str	r0, [r7, #28]
 8010132:	b928      	cbnz	r0, 8010140 <__pow5mult+0x40>
 8010134:	4b1d      	ldr	r3, [pc, #116]	@ (80101ac <__pow5mult+0xac>)
 8010136:	481e      	ldr	r0, [pc, #120]	@ (80101b0 <__pow5mult+0xb0>)
 8010138:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801013c:	f000 fc3e 	bl	80109bc <__assert_func>
 8010140:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010144:	6004      	str	r4, [r0, #0]
 8010146:	60c4      	str	r4, [r0, #12]
 8010148:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801014c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010150:	b94c      	cbnz	r4, 8010166 <__pow5mult+0x66>
 8010152:	f240 2171 	movw	r1, #625	@ 0x271
 8010156:	4638      	mov	r0, r7
 8010158:	f7ff ff12 	bl	800ff80 <__i2b>
 801015c:	2300      	movs	r3, #0
 801015e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010162:	4604      	mov	r4, r0
 8010164:	6003      	str	r3, [r0, #0]
 8010166:	f04f 0900 	mov.w	r9, #0
 801016a:	07eb      	lsls	r3, r5, #31
 801016c:	d50a      	bpl.n	8010184 <__pow5mult+0x84>
 801016e:	4631      	mov	r1, r6
 8010170:	4622      	mov	r2, r4
 8010172:	4638      	mov	r0, r7
 8010174:	f7ff ff1a 	bl	800ffac <__multiply>
 8010178:	4631      	mov	r1, r6
 801017a:	4680      	mov	r8, r0
 801017c:	4638      	mov	r0, r7
 801017e:	f7ff fe4b 	bl	800fe18 <_Bfree>
 8010182:	4646      	mov	r6, r8
 8010184:	106d      	asrs	r5, r5, #1
 8010186:	d00b      	beq.n	80101a0 <__pow5mult+0xa0>
 8010188:	6820      	ldr	r0, [r4, #0]
 801018a:	b938      	cbnz	r0, 801019c <__pow5mult+0x9c>
 801018c:	4622      	mov	r2, r4
 801018e:	4621      	mov	r1, r4
 8010190:	4638      	mov	r0, r7
 8010192:	f7ff ff0b 	bl	800ffac <__multiply>
 8010196:	6020      	str	r0, [r4, #0]
 8010198:	f8c0 9000 	str.w	r9, [r0]
 801019c:	4604      	mov	r4, r0
 801019e:	e7e4      	b.n	801016a <__pow5mult+0x6a>
 80101a0:	4630      	mov	r0, r6
 80101a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101a6:	bf00      	nop
 80101a8:	08011f70 	.word	0x08011f70
 80101ac:	08011e97 	.word	0x08011e97
 80101b0:	08011f17 	.word	0x08011f17

080101b4 <__lshift>:
 80101b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101b8:	460c      	mov	r4, r1
 80101ba:	6849      	ldr	r1, [r1, #4]
 80101bc:	6923      	ldr	r3, [r4, #16]
 80101be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80101c2:	68a3      	ldr	r3, [r4, #8]
 80101c4:	4607      	mov	r7, r0
 80101c6:	4691      	mov	r9, r2
 80101c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80101cc:	f108 0601 	add.w	r6, r8, #1
 80101d0:	42b3      	cmp	r3, r6
 80101d2:	db0b      	blt.n	80101ec <__lshift+0x38>
 80101d4:	4638      	mov	r0, r7
 80101d6:	f7ff fddf 	bl	800fd98 <_Balloc>
 80101da:	4605      	mov	r5, r0
 80101dc:	b948      	cbnz	r0, 80101f2 <__lshift+0x3e>
 80101de:	4602      	mov	r2, r0
 80101e0:	4b28      	ldr	r3, [pc, #160]	@ (8010284 <__lshift+0xd0>)
 80101e2:	4829      	ldr	r0, [pc, #164]	@ (8010288 <__lshift+0xd4>)
 80101e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80101e8:	f000 fbe8 	bl	80109bc <__assert_func>
 80101ec:	3101      	adds	r1, #1
 80101ee:	005b      	lsls	r3, r3, #1
 80101f0:	e7ee      	b.n	80101d0 <__lshift+0x1c>
 80101f2:	2300      	movs	r3, #0
 80101f4:	f100 0114 	add.w	r1, r0, #20
 80101f8:	f100 0210 	add.w	r2, r0, #16
 80101fc:	4618      	mov	r0, r3
 80101fe:	4553      	cmp	r3, sl
 8010200:	db33      	blt.n	801026a <__lshift+0xb6>
 8010202:	6920      	ldr	r0, [r4, #16]
 8010204:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010208:	f104 0314 	add.w	r3, r4, #20
 801020c:	f019 091f 	ands.w	r9, r9, #31
 8010210:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010214:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010218:	d02b      	beq.n	8010272 <__lshift+0xbe>
 801021a:	f1c9 0e20 	rsb	lr, r9, #32
 801021e:	468a      	mov	sl, r1
 8010220:	2200      	movs	r2, #0
 8010222:	6818      	ldr	r0, [r3, #0]
 8010224:	fa00 f009 	lsl.w	r0, r0, r9
 8010228:	4310      	orrs	r0, r2
 801022a:	f84a 0b04 	str.w	r0, [sl], #4
 801022e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010232:	459c      	cmp	ip, r3
 8010234:	fa22 f20e 	lsr.w	r2, r2, lr
 8010238:	d8f3      	bhi.n	8010222 <__lshift+0x6e>
 801023a:	ebac 0304 	sub.w	r3, ip, r4
 801023e:	3b15      	subs	r3, #21
 8010240:	f023 0303 	bic.w	r3, r3, #3
 8010244:	3304      	adds	r3, #4
 8010246:	f104 0015 	add.w	r0, r4, #21
 801024a:	4584      	cmp	ip, r0
 801024c:	bf38      	it	cc
 801024e:	2304      	movcc	r3, #4
 8010250:	50ca      	str	r2, [r1, r3]
 8010252:	b10a      	cbz	r2, 8010258 <__lshift+0xa4>
 8010254:	f108 0602 	add.w	r6, r8, #2
 8010258:	3e01      	subs	r6, #1
 801025a:	4638      	mov	r0, r7
 801025c:	612e      	str	r6, [r5, #16]
 801025e:	4621      	mov	r1, r4
 8010260:	f7ff fdda 	bl	800fe18 <_Bfree>
 8010264:	4628      	mov	r0, r5
 8010266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801026a:	f842 0f04 	str.w	r0, [r2, #4]!
 801026e:	3301      	adds	r3, #1
 8010270:	e7c5      	b.n	80101fe <__lshift+0x4a>
 8010272:	3904      	subs	r1, #4
 8010274:	f853 2b04 	ldr.w	r2, [r3], #4
 8010278:	f841 2f04 	str.w	r2, [r1, #4]!
 801027c:	459c      	cmp	ip, r3
 801027e:	d8f9      	bhi.n	8010274 <__lshift+0xc0>
 8010280:	e7ea      	b.n	8010258 <__lshift+0xa4>
 8010282:	bf00      	nop
 8010284:	08011f06 	.word	0x08011f06
 8010288:	08011f17 	.word	0x08011f17

0801028c <__mcmp>:
 801028c:	690a      	ldr	r2, [r1, #16]
 801028e:	4603      	mov	r3, r0
 8010290:	6900      	ldr	r0, [r0, #16]
 8010292:	1a80      	subs	r0, r0, r2
 8010294:	b530      	push	{r4, r5, lr}
 8010296:	d10e      	bne.n	80102b6 <__mcmp+0x2a>
 8010298:	3314      	adds	r3, #20
 801029a:	3114      	adds	r1, #20
 801029c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80102a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80102a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80102a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80102ac:	4295      	cmp	r5, r2
 80102ae:	d003      	beq.n	80102b8 <__mcmp+0x2c>
 80102b0:	d205      	bcs.n	80102be <__mcmp+0x32>
 80102b2:	f04f 30ff 	mov.w	r0, #4294967295
 80102b6:	bd30      	pop	{r4, r5, pc}
 80102b8:	42a3      	cmp	r3, r4
 80102ba:	d3f3      	bcc.n	80102a4 <__mcmp+0x18>
 80102bc:	e7fb      	b.n	80102b6 <__mcmp+0x2a>
 80102be:	2001      	movs	r0, #1
 80102c0:	e7f9      	b.n	80102b6 <__mcmp+0x2a>
	...

080102c4 <__mdiff>:
 80102c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102c8:	4689      	mov	r9, r1
 80102ca:	4606      	mov	r6, r0
 80102cc:	4611      	mov	r1, r2
 80102ce:	4648      	mov	r0, r9
 80102d0:	4614      	mov	r4, r2
 80102d2:	f7ff ffdb 	bl	801028c <__mcmp>
 80102d6:	1e05      	subs	r5, r0, #0
 80102d8:	d112      	bne.n	8010300 <__mdiff+0x3c>
 80102da:	4629      	mov	r1, r5
 80102dc:	4630      	mov	r0, r6
 80102de:	f7ff fd5b 	bl	800fd98 <_Balloc>
 80102e2:	4602      	mov	r2, r0
 80102e4:	b928      	cbnz	r0, 80102f2 <__mdiff+0x2e>
 80102e6:	4b3f      	ldr	r3, [pc, #252]	@ (80103e4 <__mdiff+0x120>)
 80102e8:	f240 2137 	movw	r1, #567	@ 0x237
 80102ec:	483e      	ldr	r0, [pc, #248]	@ (80103e8 <__mdiff+0x124>)
 80102ee:	f000 fb65 	bl	80109bc <__assert_func>
 80102f2:	2301      	movs	r3, #1
 80102f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80102f8:	4610      	mov	r0, r2
 80102fa:	b003      	add	sp, #12
 80102fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010300:	bfbc      	itt	lt
 8010302:	464b      	movlt	r3, r9
 8010304:	46a1      	movlt	r9, r4
 8010306:	4630      	mov	r0, r6
 8010308:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801030c:	bfba      	itte	lt
 801030e:	461c      	movlt	r4, r3
 8010310:	2501      	movlt	r5, #1
 8010312:	2500      	movge	r5, #0
 8010314:	f7ff fd40 	bl	800fd98 <_Balloc>
 8010318:	4602      	mov	r2, r0
 801031a:	b918      	cbnz	r0, 8010324 <__mdiff+0x60>
 801031c:	4b31      	ldr	r3, [pc, #196]	@ (80103e4 <__mdiff+0x120>)
 801031e:	f240 2145 	movw	r1, #581	@ 0x245
 8010322:	e7e3      	b.n	80102ec <__mdiff+0x28>
 8010324:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010328:	6926      	ldr	r6, [r4, #16]
 801032a:	60c5      	str	r5, [r0, #12]
 801032c:	f109 0310 	add.w	r3, r9, #16
 8010330:	f109 0514 	add.w	r5, r9, #20
 8010334:	f104 0e14 	add.w	lr, r4, #20
 8010338:	f100 0b14 	add.w	fp, r0, #20
 801033c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010340:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010344:	9301      	str	r3, [sp, #4]
 8010346:	46d9      	mov	r9, fp
 8010348:	f04f 0c00 	mov.w	ip, #0
 801034c:	9b01      	ldr	r3, [sp, #4]
 801034e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010352:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010356:	9301      	str	r3, [sp, #4]
 8010358:	fa1f f38a 	uxth.w	r3, sl
 801035c:	4619      	mov	r1, r3
 801035e:	b283      	uxth	r3, r0
 8010360:	1acb      	subs	r3, r1, r3
 8010362:	0c00      	lsrs	r0, r0, #16
 8010364:	4463      	add	r3, ip
 8010366:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801036a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801036e:	b29b      	uxth	r3, r3
 8010370:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010374:	4576      	cmp	r6, lr
 8010376:	f849 3b04 	str.w	r3, [r9], #4
 801037a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801037e:	d8e5      	bhi.n	801034c <__mdiff+0x88>
 8010380:	1b33      	subs	r3, r6, r4
 8010382:	3b15      	subs	r3, #21
 8010384:	f023 0303 	bic.w	r3, r3, #3
 8010388:	3415      	adds	r4, #21
 801038a:	3304      	adds	r3, #4
 801038c:	42a6      	cmp	r6, r4
 801038e:	bf38      	it	cc
 8010390:	2304      	movcc	r3, #4
 8010392:	441d      	add	r5, r3
 8010394:	445b      	add	r3, fp
 8010396:	461e      	mov	r6, r3
 8010398:	462c      	mov	r4, r5
 801039a:	4544      	cmp	r4, r8
 801039c:	d30e      	bcc.n	80103bc <__mdiff+0xf8>
 801039e:	f108 0103 	add.w	r1, r8, #3
 80103a2:	1b49      	subs	r1, r1, r5
 80103a4:	f021 0103 	bic.w	r1, r1, #3
 80103a8:	3d03      	subs	r5, #3
 80103aa:	45a8      	cmp	r8, r5
 80103ac:	bf38      	it	cc
 80103ae:	2100      	movcc	r1, #0
 80103b0:	440b      	add	r3, r1
 80103b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80103b6:	b191      	cbz	r1, 80103de <__mdiff+0x11a>
 80103b8:	6117      	str	r7, [r2, #16]
 80103ba:	e79d      	b.n	80102f8 <__mdiff+0x34>
 80103bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80103c0:	46e6      	mov	lr, ip
 80103c2:	0c08      	lsrs	r0, r1, #16
 80103c4:	fa1c fc81 	uxtah	ip, ip, r1
 80103c8:	4471      	add	r1, lr
 80103ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80103ce:	b289      	uxth	r1, r1
 80103d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80103d4:	f846 1b04 	str.w	r1, [r6], #4
 80103d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80103dc:	e7dd      	b.n	801039a <__mdiff+0xd6>
 80103de:	3f01      	subs	r7, #1
 80103e0:	e7e7      	b.n	80103b2 <__mdiff+0xee>
 80103e2:	bf00      	nop
 80103e4:	08011f06 	.word	0x08011f06
 80103e8:	08011f17 	.word	0x08011f17

080103ec <__d2b>:
 80103ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80103f0:	460f      	mov	r7, r1
 80103f2:	2101      	movs	r1, #1
 80103f4:	ec59 8b10 	vmov	r8, r9, d0
 80103f8:	4616      	mov	r6, r2
 80103fa:	f7ff fccd 	bl	800fd98 <_Balloc>
 80103fe:	4604      	mov	r4, r0
 8010400:	b930      	cbnz	r0, 8010410 <__d2b+0x24>
 8010402:	4602      	mov	r2, r0
 8010404:	4b23      	ldr	r3, [pc, #140]	@ (8010494 <__d2b+0xa8>)
 8010406:	4824      	ldr	r0, [pc, #144]	@ (8010498 <__d2b+0xac>)
 8010408:	f240 310f 	movw	r1, #783	@ 0x30f
 801040c:	f000 fad6 	bl	80109bc <__assert_func>
 8010410:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010414:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010418:	b10d      	cbz	r5, 801041e <__d2b+0x32>
 801041a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801041e:	9301      	str	r3, [sp, #4]
 8010420:	f1b8 0300 	subs.w	r3, r8, #0
 8010424:	d023      	beq.n	801046e <__d2b+0x82>
 8010426:	4668      	mov	r0, sp
 8010428:	9300      	str	r3, [sp, #0]
 801042a:	f7ff fd7c 	bl	800ff26 <__lo0bits>
 801042e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010432:	b1d0      	cbz	r0, 801046a <__d2b+0x7e>
 8010434:	f1c0 0320 	rsb	r3, r0, #32
 8010438:	fa02 f303 	lsl.w	r3, r2, r3
 801043c:	430b      	orrs	r3, r1
 801043e:	40c2      	lsrs	r2, r0
 8010440:	6163      	str	r3, [r4, #20]
 8010442:	9201      	str	r2, [sp, #4]
 8010444:	9b01      	ldr	r3, [sp, #4]
 8010446:	61a3      	str	r3, [r4, #24]
 8010448:	2b00      	cmp	r3, #0
 801044a:	bf0c      	ite	eq
 801044c:	2201      	moveq	r2, #1
 801044e:	2202      	movne	r2, #2
 8010450:	6122      	str	r2, [r4, #16]
 8010452:	b1a5      	cbz	r5, 801047e <__d2b+0x92>
 8010454:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010458:	4405      	add	r5, r0
 801045a:	603d      	str	r5, [r7, #0]
 801045c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010460:	6030      	str	r0, [r6, #0]
 8010462:	4620      	mov	r0, r4
 8010464:	b003      	add	sp, #12
 8010466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801046a:	6161      	str	r1, [r4, #20]
 801046c:	e7ea      	b.n	8010444 <__d2b+0x58>
 801046e:	a801      	add	r0, sp, #4
 8010470:	f7ff fd59 	bl	800ff26 <__lo0bits>
 8010474:	9b01      	ldr	r3, [sp, #4]
 8010476:	6163      	str	r3, [r4, #20]
 8010478:	3020      	adds	r0, #32
 801047a:	2201      	movs	r2, #1
 801047c:	e7e8      	b.n	8010450 <__d2b+0x64>
 801047e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010482:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010486:	6038      	str	r0, [r7, #0]
 8010488:	6918      	ldr	r0, [r3, #16]
 801048a:	f7ff fd2d 	bl	800fee8 <__hi0bits>
 801048e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010492:	e7e5      	b.n	8010460 <__d2b+0x74>
 8010494:	08011f06 	.word	0x08011f06
 8010498:	08011f17 	.word	0x08011f17

0801049c <__sfputc_r>:
 801049c:	6893      	ldr	r3, [r2, #8]
 801049e:	3b01      	subs	r3, #1
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	b410      	push	{r4}
 80104a4:	6093      	str	r3, [r2, #8]
 80104a6:	da08      	bge.n	80104ba <__sfputc_r+0x1e>
 80104a8:	6994      	ldr	r4, [r2, #24]
 80104aa:	42a3      	cmp	r3, r4
 80104ac:	db01      	blt.n	80104b2 <__sfputc_r+0x16>
 80104ae:	290a      	cmp	r1, #10
 80104b0:	d103      	bne.n	80104ba <__sfputc_r+0x1e>
 80104b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104b6:	f7fe bbda 	b.w	800ec6e <__swbuf_r>
 80104ba:	6813      	ldr	r3, [r2, #0]
 80104bc:	1c58      	adds	r0, r3, #1
 80104be:	6010      	str	r0, [r2, #0]
 80104c0:	7019      	strb	r1, [r3, #0]
 80104c2:	4608      	mov	r0, r1
 80104c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104c8:	4770      	bx	lr

080104ca <__sfputs_r>:
 80104ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104cc:	4606      	mov	r6, r0
 80104ce:	460f      	mov	r7, r1
 80104d0:	4614      	mov	r4, r2
 80104d2:	18d5      	adds	r5, r2, r3
 80104d4:	42ac      	cmp	r4, r5
 80104d6:	d101      	bne.n	80104dc <__sfputs_r+0x12>
 80104d8:	2000      	movs	r0, #0
 80104da:	e007      	b.n	80104ec <__sfputs_r+0x22>
 80104dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104e0:	463a      	mov	r2, r7
 80104e2:	4630      	mov	r0, r6
 80104e4:	f7ff ffda 	bl	801049c <__sfputc_r>
 80104e8:	1c43      	adds	r3, r0, #1
 80104ea:	d1f3      	bne.n	80104d4 <__sfputs_r+0xa>
 80104ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080104f0 <_vfiprintf_r>:
 80104f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f4:	460d      	mov	r5, r1
 80104f6:	b09d      	sub	sp, #116	@ 0x74
 80104f8:	4614      	mov	r4, r2
 80104fa:	4698      	mov	r8, r3
 80104fc:	4606      	mov	r6, r0
 80104fe:	b118      	cbz	r0, 8010508 <_vfiprintf_r+0x18>
 8010500:	6a03      	ldr	r3, [r0, #32]
 8010502:	b90b      	cbnz	r3, 8010508 <_vfiprintf_r+0x18>
 8010504:	f7fe faca 	bl	800ea9c <__sinit>
 8010508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801050a:	07d9      	lsls	r1, r3, #31
 801050c:	d405      	bmi.n	801051a <_vfiprintf_r+0x2a>
 801050e:	89ab      	ldrh	r3, [r5, #12]
 8010510:	059a      	lsls	r2, r3, #22
 8010512:	d402      	bmi.n	801051a <_vfiprintf_r+0x2a>
 8010514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010516:	f7fe fce2 	bl	800eede <__retarget_lock_acquire_recursive>
 801051a:	89ab      	ldrh	r3, [r5, #12]
 801051c:	071b      	lsls	r3, r3, #28
 801051e:	d501      	bpl.n	8010524 <_vfiprintf_r+0x34>
 8010520:	692b      	ldr	r3, [r5, #16]
 8010522:	b99b      	cbnz	r3, 801054c <_vfiprintf_r+0x5c>
 8010524:	4629      	mov	r1, r5
 8010526:	4630      	mov	r0, r6
 8010528:	f7fe fbe0 	bl	800ecec <__swsetup_r>
 801052c:	b170      	cbz	r0, 801054c <_vfiprintf_r+0x5c>
 801052e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010530:	07dc      	lsls	r4, r3, #31
 8010532:	d504      	bpl.n	801053e <_vfiprintf_r+0x4e>
 8010534:	f04f 30ff 	mov.w	r0, #4294967295
 8010538:	b01d      	add	sp, #116	@ 0x74
 801053a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801053e:	89ab      	ldrh	r3, [r5, #12]
 8010540:	0598      	lsls	r0, r3, #22
 8010542:	d4f7      	bmi.n	8010534 <_vfiprintf_r+0x44>
 8010544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010546:	f7fe fccb 	bl	800eee0 <__retarget_lock_release_recursive>
 801054a:	e7f3      	b.n	8010534 <_vfiprintf_r+0x44>
 801054c:	2300      	movs	r3, #0
 801054e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010550:	2320      	movs	r3, #32
 8010552:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010556:	f8cd 800c 	str.w	r8, [sp, #12]
 801055a:	2330      	movs	r3, #48	@ 0x30
 801055c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801070c <_vfiprintf_r+0x21c>
 8010560:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010564:	f04f 0901 	mov.w	r9, #1
 8010568:	4623      	mov	r3, r4
 801056a:	469a      	mov	sl, r3
 801056c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010570:	b10a      	cbz	r2, 8010576 <_vfiprintf_r+0x86>
 8010572:	2a25      	cmp	r2, #37	@ 0x25
 8010574:	d1f9      	bne.n	801056a <_vfiprintf_r+0x7a>
 8010576:	ebba 0b04 	subs.w	fp, sl, r4
 801057a:	d00b      	beq.n	8010594 <_vfiprintf_r+0xa4>
 801057c:	465b      	mov	r3, fp
 801057e:	4622      	mov	r2, r4
 8010580:	4629      	mov	r1, r5
 8010582:	4630      	mov	r0, r6
 8010584:	f7ff ffa1 	bl	80104ca <__sfputs_r>
 8010588:	3001      	adds	r0, #1
 801058a:	f000 80a7 	beq.w	80106dc <_vfiprintf_r+0x1ec>
 801058e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010590:	445a      	add	r2, fp
 8010592:	9209      	str	r2, [sp, #36]	@ 0x24
 8010594:	f89a 3000 	ldrb.w	r3, [sl]
 8010598:	2b00      	cmp	r3, #0
 801059a:	f000 809f 	beq.w	80106dc <_vfiprintf_r+0x1ec>
 801059e:	2300      	movs	r3, #0
 80105a0:	f04f 32ff 	mov.w	r2, #4294967295
 80105a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105a8:	f10a 0a01 	add.w	sl, sl, #1
 80105ac:	9304      	str	r3, [sp, #16]
 80105ae:	9307      	str	r3, [sp, #28]
 80105b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80105b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80105b6:	4654      	mov	r4, sl
 80105b8:	2205      	movs	r2, #5
 80105ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105be:	4853      	ldr	r0, [pc, #332]	@ (801070c <_vfiprintf_r+0x21c>)
 80105c0:	f7ef fdee 	bl	80001a0 <memchr>
 80105c4:	9a04      	ldr	r2, [sp, #16]
 80105c6:	b9d8      	cbnz	r0, 8010600 <_vfiprintf_r+0x110>
 80105c8:	06d1      	lsls	r1, r2, #27
 80105ca:	bf44      	itt	mi
 80105cc:	2320      	movmi	r3, #32
 80105ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105d2:	0713      	lsls	r3, r2, #28
 80105d4:	bf44      	itt	mi
 80105d6:	232b      	movmi	r3, #43	@ 0x2b
 80105d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105dc:	f89a 3000 	ldrb.w	r3, [sl]
 80105e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80105e2:	d015      	beq.n	8010610 <_vfiprintf_r+0x120>
 80105e4:	9a07      	ldr	r2, [sp, #28]
 80105e6:	4654      	mov	r4, sl
 80105e8:	2000      	movs	r0, #0
 80105ea:	f04f 0c0a 	mov.w	ip, #10
 80105ee:	4621      	mov	r1, r4
 80105f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105f4:	3b30      	subs	r3, #48	@ 0x30
 80105f6:	2b09      	cmp	r3, #9
 80105f8:	d94b      	bls.n	8010692 <_vfiprintf_r+0x1a2>
 80105fa:	b1b0      	cbz	r0, 801062a <_vfiprintf_r+0x13a>
 80105fc:	9207      	str	r2, [sp, #28]
 80105fe:	e014      	b.n	801062a <_vfiprintf_r+0x13a>
 8010600:	eba0 0308 	sub.w	r3, r0, r8
 8010604:	fa09 f303 	lsl.w	r3, r9, r3
 8010608:	4313      	orrs	r3, r2
 801060a:	9304      	str	r3, [sp, #16]
 801060c:	46a2      	mov	sl, r4
 801060e:	e7d2      	b.n	80105b6 <_vfiprintf_r+0xc6>
 8010610:	9b03      	ldr	r3, [sp, #12]
 8010612:	1d19      	adds	r1, r3, #4
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	9103      	str	r1, [sp, #12]
 8010618:	2b00      	cmp	r3, #0
 801061a:	bfbb      	ittet	lt
 801061c:	425b      	neglt	r3, r3
 801061e:	f042 0202 	orrlt.w	r2, r2, #2
 8010622:	9307      	strge	r3, [sp, #28]
 8010624:	9307      	strlt	r3, [sp, #28]
 8010626:	bfb8      	it	lt
 8010628:	9204      	strlt	r2, [sp, #16]
 801062a:	7823      	ldrb	r3, [r4, #0]
 801062c:	2b2e      	cmp	r3, #46	@ 0x2e
 801062e:	d10a      	bne.n	8010646 <_vfiprintf_r+0x156>
 8010630:	7863      	ldrb	r3, [r4, #1]
 8010632:	2b2a      	cmp	r3, #42	@ 0x2a
 8010634:	d132      	bne.n	801069c <_vfiprintf_r+0x1ac>
 8010636:	9b03      	ldr	r3, [sp, #12]
 8010638:	1d1a      	adds	r2, r3, #4
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	9203      	str	r2, [sp, #12]
 801063e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010642:	3402      	adds	r4, #2
 8010644:	9305      	str	r3, [sp, #20]
 8010646:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801071c <_vfiprintf_r+0x22c>
 801064a:	7821      	ldrb	r1, [r4, #0]
 801064c:	2203      	movs	r2, #3
 801064e:	4650      	mov	r0, sl
 8010650:	f7ef fda6 	bl	80001a0 <memchr>
 8010654:	b138      	cbz	r0, 8010666 <_vfiprintf_r+0x176>
 8010656:	9b04      	ldr	r3, [sp, #16]
 8010658:	eba0 000a 	sub.w	r0, r0, sl
 801065c:	2240      	movs	r2, #64	@ 0x40
 801065e:	4082      	lsls	r2, r0
 8010660:	4313      	orrs	r3, r2
 8010662:	3401      	adds	r4, #1
 8010664:	9304      	str	r3, [sp, #16]
 8010666:	f814 1b01 	ldrb.w	r1, [r4], #1
 801066a:	4829      	ldr	r0, [pc, #164]	@ (8010710 <_vfiprintf_r+0x220>)
 801066c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010670:	2206      	movs	r2, #6
 8010672:	f7ef fd95 	bl	80001a0 <memchr>
 8010676:	2800      	cmp	r0, #0
 8010678:	d03f      	beq.n	80106fa <_vfiprintf_r+0x20a>
 801067a:	4b26      	ldr	r3, [pc, #152]	@ (8010714 <_vfiprintf_r+0x224>)
 801067c:	bb1b      	cbnz	r3, 80106c6 <_vfiprintf_r+0x1d6>
 801067e:	9b03      	ldr	r3, [sp, #12]
 8010680:	3307      	adds	r3, #7
 8010682:	f023 0307 	bic.w	r3, r3, #7
 8010686:	3308      	adds	r3, #8
 8010688:	9303      	str	r3, [sp, #12]
 801068a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801068c:	443b      	add	r3, r7
 801068e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010690:	e76a      	b.n	8010568 <_vfiprintf_r+0x78>
 8010692:	fb0c 3202 	mla	r2, ip, r2, r3
 8010696:	460c      	mov	r4, r1
 8010698:	2001      	movs	r0, #1
 801069a:	e7a8      	b.n	80105ee <_vfiprintf_r+0xfe>
 801069c:	2300      	movs	r3, #0
 801069e:	3401      	adds	r4, #1
 80106a0:	9305      	str	r3, [sp, #20]
 80106a2:	4619      	mov	r1, r3
 80106a4:	f04f 0c0a 	mov.w	ip, #10
 80106a8:	4620      	mov	r0, r4
 80106aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106ae:	3a30      	subs	r2, #48	@ 0x30
 80106b0:	2a09      	cmp	r2, #9
 80106b2:	d903      	bls.n	80106bc <_vfiprintf_r+0x1cc>
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d0c6      	beq.n	8010646 <_vfiprintf_r+0x156>
 80106b8:	9105      	str	r1, [sp, #20]
 80106ba:	e7c4      	b.n	8010646 <_vfiprintf_r+0x156>
 80106bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80106c0:	4604      	mov	r4, r0
 80106c2:	2301      	movs	r3, #1
 80106c4:	e7f0      	b.n	80106a8 <_vfiprintf_r+0x1b8>
 80106c6:	ab03      	add	r3, sp, #12
 80106c8:	9300      	str	r3, [sp, #0]
 80106ca:	462a      	mov	r2, r5
 80106cc:	4b12      	ldr	r3, [pc, #72]	@ (8010718 <_vfiprintf_r+0x228>)
 80106ce:	a904      	add	r1, sp, #16
 80106d0:	4630      	mov	r0, r6
 80106d2:	f7fd fd9f 	bl	800e214 <_printf_float>
 80106d6:	4607      	mov	r7, r0
 80106d8:	1c78      	adds	r0, r7, #1
 80106da:	d1d6      	bne.n	801068a <_vfiprintf_r+0x19a>
 80106dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106de:	07d9      	lsls	r1, r3, #31
 80106e0:	d405      	bmi.n	80106ee <_vfiprintf_r+0x1fe>
 80106e2:	89ab      	ldrh	r3, [r5, #12]
 80106e4:	059a      	lsls	r2, r3, #22
 80106e6:	d402      	bmi.n	80106ee <_vfiprintf_r+0x1fe>
 80106e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80106ea:	f7fe fbf9 	bl	800eee0 <__retarget_lock_release_recursive>
 80106ee:	89ab      	ldrh	r3, [r5, #12]
 80106f0:	065b      	lsls	r3, r3, #25
 80106f2:	f53f af1f 	bmi.w	8010534 <_vfiprintf_r+0x44>
 80106f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80106f8:	e71e      	b.n	8010538 <_vfiprintf_r+0x48>
 80106fa:	ab03      	add	r3, sp, #12
 80106fc:	9300      	str	r3, [sp, #0]
 80106fe:	462a      	mov	r2, r5
 8010700:	4b05      	ldr	r3, [pc, #20]	@ (8010718 <_vfiprintf_r+0x228>)
 8010702:	a904      	add	r1, sp, #16
 8010704:	4630      	mov	r0, r6
 8010706:	f7fe f81d 	bl	800e744 <_printf_i>
 801070a:	e7e4      	b.n	80106d6 <_vfiprintf_r+0x1e6>
 801070c:	08012070 	.word	0x08012070
 8010710:	0801207a 	.word	0x0801207a
 8010714:	0800e215 	.word	0x0800e215
 8010718:	080104cb 	.word	0x080104cb
 801071c:	08012076 	.word	0x08012076

08010720 <__sflush_r>:
 8010720:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010728:	0716      	lsls	r6, r2, #28
 801072a:	4605      	mov	r5, r0
 801072c:	460c      	mov	r4, r1
 801072e:	d454      	bmi.n	80107da <__sflush_r+0xba>
 8010730:	684b      	ldr	r3, [r1, #4]
 8010732:	2b00      	cmp	r3, #0
 8010734:	dc02      	bgt.n	801073c <__sflush_r+0x1c>
 8010736:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010738:	2b00      	cmp	r3, #0
 801073a:	dd48      	ble.n	80107ce <__sflush_r+0xae>
 801073c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801073e:	2e00      	cmp	r6, #0
 8010740:	d045      	beq.n	80107ce <__sflush_r+0xae>
 8010742:	2300      	movs	r3, #0
 8010744:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010748:	682f      	ldr	r7, [r5, #0]
 801074a:	6a21      	ldr	r1, [r4, #32]
 801074c:	602b      	str	r3, [r5, #0]
 801074e:	d030      	beq.n	80107b2 <__sflush_r+0x92>
 8010750:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010752:	89a3      	ldrh	r3, [r4, #12]
 8010754:	0759      	lsls	r1, r3, #29
 8010756:	d505      	bpl.n	8010764 <__sflush_r+0x44>
 8010758:	6863      	ldr	r3, [r4, #4]
 801075a:	1ad2      	subs	r2, r2, r3
 801075c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801075e:	b10b      	cbz	r3, 8010764 <__sflush_r+0x44>
 8010760:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010762:	1ad2      	subs	r2, r2, r3
 8010764:	2300      	movs	r3, #0
 8010766:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010768:	6a21      	ldr	r1, [r4, #32]
 801076a:	4628      	mov	r0, r5
 801076c:	47b0      	blx	r6
 801076e:	1c43      	adds	r3, r0, #1
 8010770:	89a3      	ldrh	r3, [r4, #12]
 8010772:	d106      	bne.n	8010782 <__sflush_r+0x62>
 8010774:	6829      	ldr	r1, [r5, #0]
 8010776:	291d      	cmp	r1, #29
 8010778:	d82b      	bhi.n	80107d2 <__sflush_r+0xb2>
 801077a:	4a2a      	ldr	r2, [pc, #168]	@ (8010824 <__sflush_r+0x104>)
 801077c:	410a      	asrs	r2, r1
 801077e:	07d6      	lsls	r6, r2, #31
 8010780:	d427      	bmi.n	80107d2 <__sflush_r+0xb2>
 8010782:	2200      	movs	r2, #0
 8010784:	6062      	str	r2, [r4, #4]
 8010786:	04d9      	lsls	r1, r3, #19
 8010788:	6922      	ldr	r2, [r4, #16]
 801078a:	6022      	str	r2, [r4, #0]
 801078c:	d504      	bpl.n	8010798 <__sflush_r+0x78>
 801078e:	1c42      	adds	r2, r0, #1
 8010790:	d101      	bne.n	8010796 <__sflush_r+0x76>
 8010792:	682b      	ldr	r3, [r5, #0]
 8010794:	b903      	cbnz	r3, 8010798 <__sflush_r+0x78>
 8010796:	6560      	str	r0, [r4, #84]	@ 0x54
 8010798:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801079a:	602f      	str	r7, [r5, #0]
 801079c:	b1b9      	cbz	r1, 80107ce <__sflush_r+0xae>
 801079e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80107a2:	4299      	cmp	r1, r3
 80107a4:	d002      	beq.n	80107ac <__sflush_r+0x8c>
 80107a6:	4628      	mov	r0, r5
 80107a8:	f7ff f9f6 	bl	800fb98 <_free_r>
 80107ac:	2300      	movs	r3, #0
 80107ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80107b0:	e00d      	b.n	80107ce <__sflush_r+0xae>
 80107b2:	2301      	movs	r3, #1
 80107b4:	4628      	mov	r0, r5
 80107b6:	47b0      	blx	r6
 80107b8:	4602      	mov	r2, r0
 80107ba:	1c50      	adds	r0, r2, #1
 80107bc:	d1c9      	bne.n	8010752 <__sflush_r+0x32>
 80107be:	682b      	ldr	r3, [r5, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d0c6      	beq.n	8010752 <__sflush_r+0x32>
 80107c4:	2b1d      	cmp	r3, #29
 80107c6:	d001      	beq.n	80107cc <__sflush_r+0xac>
 80107c8:	2b16      	cmp	r3, #22
 80107ca:	d11e      	bne.n	801080a <__sflush_r+0xea>
 80107cc:	602f      	str	r7, [r5, #0]
 80107ce:	2000      	movs	r0, #0
 80107d0:	e022      	b.n	8010818 <__sflush_r+0xf8>
 80107d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107d6:	b21b      	sxth	r3, r3
 80107d8:	e01b      	b.n	8010812 <__sflush_r+0xf2>
 80107da:	690f      	ldr	r7, [r1, #16]
 80107dc:	2f00      	cmp	r7, #0
 80107de:	d0f6      	beq.n	80107ce <__sflush_r+0xae>
 80107e0:	0793      	lsls	r3, r2, #30
 80107e2:	680e      	ldr	r6, [r1, #0]
 80107e4:	bf08      	it	eq
 80107e6:	694b      	ldreq	r3, [r1, #20]
 80107e8:	600f      	str	r7, [r1, #0]
 80107ea:	bf18      	it	ne
 80107ec:	2300      	movne	r3, #0
 80107ee:	eba6 0807 	sub.w	r8, r6, r7
 80107f2:	608b      	str	r3, [r1, #8]
 80107f4:	f1b8 0f00 	cmp.w	r8, #0
 80107f8:	dde9      	ble.n	80107ce <__sflush_r+0xae>
 80107fa:	6a21      	ldr	r1, [r4, #32]
 80107fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80107fe:	4643      	mov	r3, r8
 8010800:	463a      	mov	r2, r7
 8010802:	4628      	mov	r0, r5
 8010804:	47b0      	blx	r6
 8010806:	2800      	cmp	r0, #0
 8010808:	dc08      	bgt.n	801081c <__sflush_r+0xfc>
 801080a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801080e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010812:	81a3      	strh	r3, [r4, #12]
 8010814:	f04f 30ff 	mov.w	r0, #4294967295
 8010818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801081c:	4407      	add	r7, r0
 801081e:	eba8 0800 	sub.w	r8, r8, r0
 8010822:	e7e7      	b.n	80107f4 <__sflush_r+0xd4>
 8010824:	dfbffffe 	.word	0xdfbffffe

08010828 <_fflush_r>:
 8010828:	b538      	push	{r3, r4, r5, lr}
 801082a:	690b      	ldr	r3, [r1, #16]
 801082c:	4605      	mov	r5, r0
 801082e:	460c      	mov	r4, r1
 8010830:	b913      	cbnz	r3, 8010838 <_fflush_r+0x10>
 8010832:	2500      	movs	r5, #0
 8010834:	4628      	mov	r0, r5
 8010836:	bd38      	pop	{r3, r4, r5, pc}
 8010838:	b118      	cbz	r0, 8010842 <_fflush_r+0x1a>
 801083a:	6a03      	ldr	r3, [r0, #32]
 801083c:	b90b      	cbnz	r3, 8010842 <_fflush_r+0x1a>
 801083e:	f7fe f92d 	bl	800ea9c <__sinit>
 8010842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d0f3      	beq.n	8010832 <_fflush_r+0xa>
 801084a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801084c:	07d0      	lsls	r0, r2, #31
 801084e:	d404      	bmi.n	801085a <_fflush_r+0x32>
 8010850:	0599      	lsls	r1, r3, #22
 8010852:	d402      	bmi.n	801085a <_fflush_r+0x32>
 8010854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010856:	f7fe fb42 	bl	800eede <__retarget_lock_acquire_recursive>
 801085a:	4628      	mov	r0, r5
 801085c:	4621      	mov	r1, r4
 801085e:	f7ff ff5f 	bl	8010720 <__sflush_r>
 8010862:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010864:	07da      	lsls	r2, r3, #31
 8010866:	4605      	mov	r5, r0
 8010868:	d4e4      	bmi.n	8010834 <_fflush_r+0xc>
 801086a:	89a3      	ldrh	r3, [r4, #12]
 801086c:	059b      	lsls	r3, r3, #22
 801086e:	d4e1      	bmi.n	8010834 <_fflush_r+0xc>
 8010870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010872:	f7fe fb35 	bl	800eee0 <__retarget_lock_release_recursive>
 8010876:	e7dd      	b.n	8010834 <_fflush_r+0xc>

08010878 <__swhatbuf_r>:
 8010878:	b570      	push	{r4, r5, r6, lr}
 801087a:	460c      	mov	r4, r1
 801087c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010880:	2900      	cmp	r1, #0
 8010882:	b096      	sub	sp, #88	@ 0x58
 8010884:	4615      	mov	r5, r2
 8010886:	461e      	mov	r6, r3
 8010888:	da0d      	bge.n	80108a6 <__swhatbuf_r+0x2e>
 801088a:	89a3      	ldrh	r3, [r4, #12]
 801088c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010890:	f04f 0100 	mov.w	r1, #0
 8010894:	bf14      	ite	ne
 8010896:	2340      	movne	r3, #64	@ 0x40
 8010898:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801089c:	2000      	movs	r0, #0
 801089e:	6031      	str	r1, [r6, #0]
 80108a0:	602b      	str	r3, [r5, #0]
 80108a2:	b016      	add	sp, #88	@ 0x58
 80108a4:	bd70      	pop	{r4, r5, r6, pc}
 80108a6:	466a      	mov	r2, sp
 80108a8:	f000 f856 	bl	8010958 <_fstat_r>
 80108ac:	2800      	cmp	r0, #0
 80108ae:	dbec      	blt.n	801088a <__swhatbuf_r+0x12>
 80108b0:	9901      	ldr	r1, [sp, #4]
 80108b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80108b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80108ba:	4259      	negs	r1, r3
 80108bc:	4159      	adcs	r1, r3
 80108be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80108c2:	e7eb      	b.n	801089c <__swhatbuf_r+0x24>

080108c4 <__smakebuf_r>:
 80108c4:	898b      	ldrh	r3, [r1, #12]
 80108c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80108c8:	079d      	lsls	r5, r3, #30
 80108ca:	4606      	mov	r6, r0
 80108cc:	460c      	mov	r4, r1
 80108ce:	d507      	bpl.n	80108e0 <__smakebuf_r+0x1c>
 80108d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80108d4:	6023      	str	r3, [r4, #0]
 80108d6:	6123      	str	r3, [r4, #16]
 80108d8:	2301      	movs	r3, #1
 80108da:	6163      	str	r3, [r4, #20]
 80108dc:	b003      	add	sp, #12
 80108de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108e0:	ab01      	add	r3, sp, #4
 80108e2:	466a      	mov	r2, sp
 80108e4:	f7ff ffc8 	bl	8010878 <__swhatbuf_r>
 80108e8:	9f00      	ldr	r7, [sp, #0]
 80108ea:	4605      	mov	r5, r0
 80108ec:	4639      	mov	r1, r7
 80108ee:	4630      	mov	r0, r6
 80108f0:	f7ff f9c6 	bl	800fc80 <_malloc_r>
 80108f4:	b948      	cbnz	r0, 801090a <__smakebuf_r+0x46>
 80108f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108fa:	059a      	lsls	r2, r3, #22
 80108fc:	d4ee      	bmi.n	80108dc <__smakebuf_r+0x18>
 80108fe:	f023 0303 	bic.w	r3, r3, #3
 8010902:	f043 0302 	orr.w	r3, r3, #2
 8010906:	81a3      	strh	r3, [r4, #12]
 8010908:	e7e2      	b.n	80108d0 <__smakebuf_r+0xc>
 801090a:	89a3      	ldrh	r3, [r4, #12]
 801090c:	6020      	str	r0, [r4, #0]
 801090e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010912:	81a3      	strh	r3, [r4, #12]
 8010914:	9b01      	ldr	r3, [sp, #4]
 8010916:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801091a:	b15b      	cbz	r3, 8010934 <__smakebuf_r+0x70>
 801091c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010920:	4630      	mov	r0, r6
 8010922:	f000 f82b 	bl	801097c <_isatty_r>
 8010926:	b128      	cbz	r0, 8010934 <__smakebuf_r+0x70>
 8010928:	89a3      	ldrh	r3, [r4, #12]
 801092a:	f023 0303 	bic.w	r3, r3, #3
 801092e:	f043 0301 	orr.w	r3, r3, #1
 8010932:	81a3      	strh	r3, [r4, #12]
 8010934:	89a3      	ldrh	r3, [r4, #12]
 8010936:	431d      	orrs	r5, r3
 8010938:	81a5      	strh	r5, [r4, #12]
 801093a:	e7cf      	b.n	80108dc <__smakebuf_r+0x18>

0801093c <strchr>:
 801093c:	b2c9      	uxtb	r1, r1
 801093e:	4603      	mov	r3, r0
 8010940:	4618      	mov	r0, r3
 8010942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010946:	b112      	cbz	r2, 801094e <strchr+0x12>
 8010948:	428a      	cmp	r2, r1
 801094a:	d1f9      	bne.n	8010940 <strchr+0x4>
 801094c:	4770      	bx	lr
 801094e:	2900      	cmp	r1, #0
 8010950:	bf18      	it	ne
 8010952:	2000      	movne	r0, #0
 8010954:	4770      	bx	lr
	...

08010958 <_fstat_r>:
 8010958:	b538      	push	{r3, r4, r5, lr}
 801095a:	4d07      	ldr	r5, [pc, #28]	@ (8010978 <_fstat_r+0x20>)
 801095c:	2300      	movs	r3, #0
 801095e:	4604      	mov	r4, r0
 8010960:	4608      	mov	r0, r1
 8010962:	4611      	mov	r1, r2
 8010964:	602b      	str	r3, [r5, #0]
 8010966:	f7f2 fba7 	bl	80030b8 <_fstat>
 801096a:	1c43      	adds	r3, r0, #1
 801096c:	d102      	bne.n	8010974 <_fstat_r+0x1c>
 801096e:	682b      	ldr	r3, [r5, #0]
 8010970:	b103      	cbz	r3, 8010974 <_fstat_r+0x1c>
 8010972:	6023      	str	r3, [r4, #0]
 8010974:	bd38      	pop	{r3, r4, r5, pc}
 8010976:	bf00      	nop
 8010978:	20000f30 	.word	0x20000f30

0801097c <_isatty_r>:
 801097c:	b538      	push	{r3, r4, r5, lr}
 801097e:	4d06      	ldr	r5, [pc, #24]	@ (8010998 <_isatty_r+0x1c>)
 8010980:	2300      	movs	r3, #0
 8010982:	4604      	mov	r4, r0
 8010984:	4608      	mov	r0, r1
 8010986:	602b      	str	r3, [r5, #0]
 8010988:	f7f2 fba6 	bl	80030d8 <_isatty>
 801098c:	1c43      	adds	r3, r0, #1
 801098e:	d102      	bne.n	8010996 <_isatty_r+0x1a>
 8010990:	682b      	ldr	r3, [r5, #0]
 8010992:	b103      	cbz	r3, 8010996 <_isatty_r+0x1a>
 8010994:	6023      	str	r3, [r4, #0]
 8010996:	bd38      	pop	{r3, r4, r5, pc}
 8010998:	20000f30 	.word	0x20000f30

0801099c <_sbrk_r>:
 801099c:	b538      	push	{r3, r4, r5, lr}
 801099e:	4d06      	ldr	r5, [pc, #24]	@ (80109b8 <_sbrk_r+0x1c>)
 80109a0:	2300      	movs	r3, #0
 80109a2:	4604      	mov	r4, r0
 80109a4:	4608      	mov	r0, r1
 80109a6:	602b      	str	r3, [r5, #0]
 80109a8:	f7f2 fbae 	bl	8003108 <_sbrk>
 80109ac:	1c43      	adds	r3, r0, #1
 80109ae:	d102      	bne.n	80109b6 <_sbrk_r+0x1a>
 80109b0:	682b      	ldr	r3, [r5, #0]
 80109b2:	b103      	cbz	r3, 80109b6 <_sbrk_r+0x1a>
 80109b4:	6023      	str	r3, [r4, #0]
 80109b6:	bd38      	pop	{r3, r4, r5, pc}
 80109b8:	20000f30 	.word	0x20000f30

080109bc <__assert_func>:
 80109bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80109be:	4614      	mov	r4, r2
 80109c0:	461a      	mov	r2, r3
 80109c2:	4b09      	ldr	r3, [pc, #36]	@ (80109e8 <__assert_func+0x2c>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	4605      	mov	r5, r0
 80109c8:	68d8      	ldr	r0, [r3, #12]
 80109ca:	b954      	cbnz	r4, 80109e2 <__assert_func+0x26>
 80109cc:	4b07      	ldr	r3, [pc, #28]	@ (80109ec <__assert_func+0x30>)
 80109ce:	461c      	mov	r4, r3
 80109d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80109d4:	9100      	str	r1, [sp, #0]
 80109d6:	462b      	mov	r3, r5
 80109d8:	4905      	ldr	r1, [pc, #20]	@ (80109f0 <__assert_func+0x34>)
 80109da:	f000 f841 	bl	8010a60 <fiprintf>
 80109de:	f000 f851 	bl	8010a84 <abort>
 80109e2:	4b04      	ldr	r3, [pc, #16]	@ (80109f4 <__assert_func+0x38>)
 80109e4:	e7f4      	b.n	80109d0 <__assert_func+0x14>
 80109e6:	bf00      	nop
 80109e8:	20000028 	.word	0x20000028
 80109ec:	080120c6 	.word	0x080120c6
 80109f0:	08012098 	.word	0x08012098
 80109f4:	0801208b 	.word	0x0801208b

080109f8 <_calloc_r>:
 80109f8:	b570      	push	{r4, r5, r6, lr}
 80109fa:	fba1 5402 	umull	r5, r4, r1, r2
 80109fe:	b93c      	cbnz	r4, 8010a10 <_calloc_r+0x18>
 8010a00:	4629      	mov	r1, r5
 8010a02:	f7ff f93d 	bl	800fc80 <_malloc_r>
 8010a06:	4606      	mov	r6, r0
 8010a08:	b928      	cbnz	r0, 8010a16 <_calloc_r+0x1e>
 8010a0a:	2600      	movs	r6, #0
 8010a0c:	4630      	mov	r0, r6
 8010a0e:	bd70      	pop	{r4, r5, r6, pc}
 8010a10:	220c      	movs	r2, #12
 8010a12:	6002      	str	r2, [r0, #0]
 8010a14:	e7f9      	b.n	8010a0a <_calloc_r+0x12>
 8010a16:	462a      	mov	r2, r5
 8010a18:	4621      	mov	r1, r4
 8010a1a:	f7fe f9cd 	bl	800edb8 <memset>
 8010a1e:	e7f5      	b.n	8010a0c <_calloc_r+0x14>

08010a20 <__ascii_mbtowc>:
 8010a20:	b082      	sub	sp, #8
 8010a22:	b901      	cbnz	r1, 8010a26 <__ascii_mbtowc+0x6>
 8010a24:	a901      	add	r1, sp, #4
 8010a26:	b142      	cbz	r2, 8010a3a <__ascii_mbtowc+0x1a>
 8010a28:	b14b      	cbz	r3, 8010a3e <__ascii_mbtowc+0x1e>
 8010a2a:	7813      	ldrb	r3, [r2, #0]
 8010a2c:	600b      	str	r3, [r1, #0]
 8010a2e:	7812      	ldrb	r2, [r2, #0]
 8010a30:	1e10      	subs	r0, r2, #0
 8010a32:	bf18      	it	ne
 8010a34:	2001      	movne	r0, #1
 8010a36:	b002      	add	sp, #8
 8010a38:	4770      	bx	lr
 8010a3a:	4610      	mov	r0, r2
 8010a3c:	e7fb      	b.n	8010a36 <__ascii_mbtowc+0x16>
 8010a3e:	f06f 0001 	mvn.w	r0, #1
 8010a42:	e7f8      	b.n	8010a36 <__ascii_mbtowc+0x16>

08010a44 <__ascii_wctomb>:
 8010a44:	4603      	mov	r3, r0
 8010a46:	4608      	mov	r0, r1
 8010a48:	b141      	cbz	r1, 8010a5c <__ascii_wctomb+0x18>
 8010a4a:	2aff      	cmp	r2, #255	@ 0xff
 8010a4c:	d904      	bls.n	8010a58 <__ascii_wctomb+0x14>
 8010a4e:	228a      	movs	r2, #138	@ 0x8a
 8010a50:	601a      	str	r2, [r3, #0]
 8010a52:	f04f 30ff 	mov.w	r0, #4294967295
 8010a56:	4770      	bx	lr
 8010a58:	700a      	strb	r2, [r1, #0]
 8010a5a:	2001      	movs	r0, #1
 8010a5c:	4770      	bx	lr
	...

08010a60 <fiprintf>:
 8010a60:	b40e      	push	{r1, r2, r3}
 8010a62:	b503      	push	{r0, r1, lr}
 8010a64:	4601      	mov	r1, r0
 8010a66:	ab03      	add	r3, sp, #12
 8010a68:	4805      	ldr	r0, [pc, #20]	@ (8010a80 <fiprintf+0x20>)
 8010a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a6e:	6800      	ldr	r0, [r0, #0]
 8010a70:	9301      	str	r3, [sp, #4]
 8010a72:	f7ff fd3d 	bl	80104f0 <_vfiprintf_r>
 8010a76:	b002      	add	sp, #8
 8010a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a7c:	b003      	add	sp, #12
 8010a7e:	4770      	bx	lr
 8010a80:	20000028 	.word	0x20000028

08010a84 <abort>:
 8010a84:	b508      	push	{r3, lr}
 8010a86:	2006      	movs	r0, #6
 8010a88:	f000 f82c 	bl	8010ae4 <raise>
 8010a8c:	2001      	movs	r0, #1
 8010a8e:	f7f2 fadf 	bl	8003050 <_exit>

08010a92 <_raise_r>:
 8010a92:	291f      	cmp	r1, #31
 8010a94:	b538      	push	{r3, r4, r5, lr}
 8010a96:	4605      	mov	r5, r0
 8010a98:	460c      	mov	r4, r1
 8010a9a:	d904      	bls.n	8010aa6 <_raise_r+0x14>
 8010a9c:	2316      	movs	r3, #22
 8010a9e:	6003      	str	r3, [r0, #0]
 8010aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8010aa4:	bd38      	pop	{r3, r4, r5, pc}
 8010aa6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010aa8:	b112      	cbz	r2, 8010ab0 <_raise_r+0x1e>
 8010aaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010aae:	b94b      	cbnz	r3, 8010ac4 <_raise_r+0x32>
 8010ab0:	4628      	mov	r0, r5
 8010ab2:	f000 f831 	bl	8010b18 <_getpid_r>
 8010ab6:	4622      	mov	r2, r4
 8010ab8:	4601      	mov	r1, r0
 8010aba:	4628      	mov	r0, r5
 8010abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ac0:	f000 b818 	b.w	8010af4 <_kill_r>
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	d00a      	beq.n	8010ade <_raise_r+0x4c>
 8010ac8:	1c59      	adds	r1, r3, #1
 8010aca:	d103      	bne.n	8010ad4 <_raise_r+0x42>
 8010acc:	2316      	movs	r3, #22
 8010ace:	6003      	str	r3, [r0, #0]
 8010ad0:	2001      	movs	r0, #1
 8010ad2:	e7e7      	b.n	8010aa4 <_raise_r+0x12>
 8010ad4:	2100      	movs	r1, #0
 8010ad6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010ada:	4620      	mov	r0, r4
 8010adc:	4798      	blx	r3
 8010ade:	2000      	movs	r0, #0
 8010ae0:	e7e0      	b.n	8010aa4 <_raise_r+0x12>
	...

08010ae4 <raise>:
 8010ae4:	4b02      	ldr	r3, [pc, #8]	@ (8010af0 <raise+0xc>)
 8010ae6:	4601      	mov	r1, r0
 8010ae8:	6818      	ldr	r0, [r3, #0]
 8010aea:	f7ff bfd2 	b.w	8010a92 <_raise_r>
 8010aee:	bf00      	nop
 8010af0:	20000028 	.word	0x20000028

08010af4 <_kill_r>:
 8010af4:	b538      	push	{r3, r4, r5, lr}
 8010af6:	4d07      	ldr	r5, [pc, #28]	@ (8010b14 <_kill_r+0x20>)
 8010af8:	2300      	movs	r3, #0
 8010afa:	4604      	mov	r4, r0
 8010afc:	4608      	mov	r0, r1
 8010afe:	4611      	mov	r1, r2
 8010b00:	602b      	str	r3, [r5, #0]
 8010b02:	f7f2 fa95 	bl	8003030 <_kill>
 8010b06:	1c43      	adds	r3, r0, #1
 8010b08:	d102      	bne.n	8010b10 <_kill_r+0x1c>
 8010b0a:	682b      	ldr	r3, [r5, #0]
 8010b0c:	b103      	cbz	r3, 8010b10 <_kill_r+0x1c>
 8010b0e:	6023      	str	r3, [r4, #0]
 8010b10:	bd38      	pop	{r3, r4, r5, pc}
 8010b12:	bf00      	nop
 8010b14:	20000f30 	.word	0x20000f30

08010b18 <_getpid_r>:
 8010b18:	f7f2 ba82 	b.w	8003020 <_getpid>

08010b1c <_init>:
 8010b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b1e:	bf00      	nop
 8010b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b22:	bc08      	pop	{r3}
 8010b24:	469e      	mov	lr, r3
 8010b26:	4770      	bx	lr

08010b28 <_fini>:
 8010b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b2a:	bf00      	nop
 8010b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b2e:	bc08      	pop	{r3}
 8010b30:	469e      	mov	lr, r3
 8010b32:	4770      	bx	lr
